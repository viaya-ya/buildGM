{"version":3,"file":"static/js/101.b0b16f35.chunk.js","mappings":"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","sources":["UI/app/Project/desktop/Program/CustomTableProgram.jsx","UI/app/Project/desktop/Program/DrawerUpdateProgram.jsx","UI/app/Project/desktop/Program/Program.jsx"],"sourcesContent":["import React from \"react\";\n\nimport { Table, Form } from \"antd\";\n\nimport { createStyles } from \"antd-style\";\n\nimport useCustomTableProgram from \"../../componentLogic/useCustomTableProgram\";\n\nconst useStyle = createStyles(({ css, token }) => {\n  const { antCls } = token;\n  return {\n    customTable: css`\n      ${antCls}-table {\n        ${antCls}-table-container {\n          ${antCls}-table-body,\n          ${antCls}-table-content {\n            scrollbar-width: thin;\n            scrollbar-color: #eaeaea transparent;\n            scrollbar-gutter: stable;\n          }\n        }\n      }\n    `,\n  };\n});\n\nexport default function CustomTableProgram({\n  expandedRowKeys,\n  setExpandedRowKeys,\n  form,\n  selectedProgramId,\n  targetStateOnProduct,\n  setTargetStateOnProduct,\n\n  disabledTable,\n  tables,\n  setTables,\n  isLoadingGetProjectId,\n  isFetchingGetProjectId,\n  targets,\n  currentProjects,\n  posts,\n  projects,\n  selectedProjectIds,\n  setSelectedProjectIds,\n  setDescriptionProgram,\n  descriptionProgram,\n}) {\n  const { styles } = useStyle();\n\n  const stylesColumnProjectPopconfim = {\n    placement: \"rightBottom\",\n  };\n\n  const stylesColumnProjectSelect = {\n    style: { width: \"100%\" },\n    placement: \"topLeft\",\n  };\n\n  const stylesColumnSelect = {\n    style: { width: \"100%\" },\n    placement: \"topLeft\",\n  };\n\n  const stylesColumnDate = {\n    style: { width: \"100%\" },\n  };\n\n  const { groupColumns, dataWithGroups, expandableConfig } =\n    useCustomTableProgram({\n      expandedRowKeys,\n      setExpandedRowKeys,\n      form,\n      selectedProgramId,\n      targetStateOnProduct,\n      setTargetStateOnProduct,\n\n      disabledTable,\n      tables,\n      setTables,\n      isLoadingGetProjectId,\n      isFetchingGetProjectId,\n      targets,\n      currentProjects,\n      posts,\n      projects,\n      selectedProjectIds,\n      setSelectedProjectIds,\n      setDescriptionProgram,\n      descriptionProgram,\n\n      stylesColumnProjectPopconfim,\n      stylesColumnProjectSelect,\n      stylesColumnSelect,\n      stylesColumnDate,\n    });\n\n  return (\n    <Form form={form} disabled={disabledTable}>\n      <Table\n        bordered\n        className={styles.customTable}\n        loading={isLoadingGetProjectId || isFetchingGetProjectId}\n        columns={groupColumns}\n        dataSource={dataWithGroups}\n        rowKey=\"key\"\n        pagination={false}\n        scroll={{ x: \"max-content\", y: \"calc(100vh - 320px)\" }}\n        style={{ width: \"100%\" }}\n        expandable={expandableConfig}\n      />\n    </Form>\n  );\n}\n","import React from \"react\";\n\nimport {\n  Space,\n  Button,\n  Input,\n  Select,\n  Form,\n  Flex,\n  Drawer as DrawerAnt,\n} from \"antd\";\n\nimport { isMobile } from \"react-device-detect\";\n\nimport useDrawerUpdateProgram from \"../../componentLogic/useDrawerUpdateProgram\";\n\nexport default function DrawerUpdateProgram({\n  currentProgram,\n  isLoadingGetProjectId,\n  open,\n  setOpen,\n  disabled,\n}) {\n  const {\n    form,\n    isSaving,\n    setIsSaving,\n    strategies,\n    isLoadingGetNew,\n    updateProject,\n    isLoadingUpdateProjectMutation,\n    isSuccessUpdateProjectMutation,\n    isErrorUpdateProjectMutation,\n    ErrorUpdateProjectMutation,\n    localIsResponseUpdateProjectMutation,\n    handlePostValuesChange,\n    handleSave,\n    handleReset,\n  } = useDrawerUpdateProgram({\n    currentProgram,\n    isLoadingGetProjectId,\n    open,\n    setOpen,\n    disabled,\n  });\n  return (\n    <>\n      <DrawerAnt\n        closable\n        destroyOnClose2\n        title={<div style={{ whiteSpace: \"nowrap\" }}>Обновление программы</div>}\n        placement=\"right\"\n        open={open}\n        loading={isLoadingGetProjectId || isLoadingGetNew}\n        onClose={() => {\n          setOpen(false);\n          handleReset();\n        }}\n        width={isMobile ? 300 : 350}\n      >\n        <Flex vertical={true} style={{ height: \"100%\" }}>\n          <Form\n            disabled={disabled}\n            form={form}\n            onValuesChange={handlePostValuesChange}\n            layout=\"vertical\"\n            style={{ flexGrow: 1 }}\n          >\n            {/* Название организации */}\n            <Form.Item\n              label=\"Название программы\"\n              name=\"projectName\"\n              rules={[\n                { required: true, message: \"Пожалуйста, введите название!\" },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n\n            {/* Отчетный день*/}\n            <Form.Item label=\"Стратегия\" name=\"strategyId\">\n              <Select\n                allowClear\n                showSearch\n                optionFilterProp=\"label\"\n                filterOption={(input, option) =>\n                  option?.label.toLowerCase().includes(input.toLowerCase())\n                }\n                options={strategies?.map((strategy) => ({\n                  label: \"Стратегия\" + \" \" + strategy.strategyNumber,\n                  value: strategy.id,\n                }))}\n              />\n            </Form.Item>\n          </Form>\n\n          <Space style={{ marginTop: \"auto\" }}>\n            <Button\n              type=\"primary\"\n              onClick={handleSave}\n              loading={isSaving}\n              disabled={disabled}\n            >\n              Сохранить\n            </Button>\n            <Button onClick={handleReset} disabled={disabled}>\n              Сбросить\n            </Button>\n          </Space>\n        </Flex>\n      </DrawerAnt>\n    </>\n  );\n}\n","import React from \"react\";\n\nimport CustomTableProgram from \"./CustomTableProgram\";\nimport DrawerUpdateProgram from \"./DrawerUpdateProgram\";\n\nimport _ from \"lodash\";\nimport {\n  Tabs,\n  Button,\n  Popconfirm,\n  Select,\n  Typography,\n  Flex,\n  Tooltip,\n} from \"antd\";\nimport { PlusOutlined, SaveOutlined } from \"@ant-design/icons\";\nimport usePrograma from \"../../componentLogic/usePrograma\";\n\nexport default function Program({ activeTabTypesProgram, disabledTable }) {\n  const {\n    selectedProgramId,\n    setSelectedProgramId,\n    selectedStrategyId,\n    setSelectedStrategyId,\n    selectedProjectIds,\n    setSelectedProjectIds,\n    descriptionProgram,\n    setDescriptionProgram,\n    form,\n    isSaving,\n    setIsSaving,\n    tables,\n    setTables,\n    targetStateOnProduct,\n    setTargetStateOnProduct,\n    expandedRowKeys,\n    setExpandedRowKeys,\n    items,\n    setItems,\n    activeTab,\n    setActiveTab,\n    openDrawer,\n    setOpenDrawer,\n    // Получение данных проектов\n    programs,\n    archivesPrograms,\n    isErrorGetProject,\n    isLoadingGetProject,\n    // Получение данных выбранного проекта\n\n    currentProgram,\n    currentProjects,\n    targets,\n    isLoadingGetProgramId,\n    isErrorGetProgramId,\n    isFetchingGetProgramId,\n    // Данные для создания программы\n    posts,\n    strategies,\n    projects,\n\n    isLoadingGetNew,\n    isErrorGetNew,\n    // Создание нового проекта\n\n    reduxSelectedOrganizationId,\n    createProject,\n    isLoadingProjectMutation,\n    // Обновление проекта\n\n    updateProject,\n    isLoadingUpdateProjectMutation,\n    isSuccessUpdateProjectMutation,\n    isErrorUpdateProjectMutation,\n    ErrorUpdateProjectMutation,\n    localIsResponseUpdateProjectMutation,\n    // методы\n    onChangeTab,\n    addProgram,\n    resetUseState,\n    updateSingleProject,\n  } = usePrograma({ activeTabTypesProgram });\n\n\n  \n  return (\n    <div style={{ width: \"100%\" }}>\n      <Flex justify=\"space-between\" align=\"center\" style={{ width: \"100%\" }}>\n        <Tabs\n          style={{ width: \"calc(100% - 40px)\" }}\n          type={activeTabTypesProgram === \"programs\" ? \"editable-card\" : \"card\"}\n          activeKey={activeTab}\n          items={items}\n          onChange={onChangeTab}\n          addIcon={\n            <Tooltip  placement=\"bottom\" title={\"создать программу\"}>\n              <Popconfirm\n                placement=\"rightBottom\"\n                showCancel={false}\n                okButtonProps={{ style: { display: \"none\" } }}\n                icon={null}\n                description={\n                  <>\n                    <Flex vertical gap={\"small\"}>\n                      <Typography>Выберите стратегию</Typography>\n                      <Select\n                        style={{ width: \"160px\" }}\n                        allowClear\n                        showSearch\n                        optionFilterProp=\"label\"\n                        value={selectedStrategyId}\n                        onChange={(strategy) => setSelectedStrategyId(strategy)}\n                        filterOption={(input, option) =>\n                          option?.label\n                            .toLowerCase()\n                            .includes(input.toLowerCase())\n                        }\n                        options={strategies.map((strategy) => ({\n                          label: \"Стратегия\" + \" \" + strategy.strategyNumber,\n                          value: strategy.id,\n                        }))}\n                      />\n                    </Flex>\n                    <Button\n                      style={{ marginTop: \"10px\", marginLeft: \"55px\" }}\n                      size=\"small\"\n                      type=\"primary\"\n                      onClick={addProgram}\n                      disabled={!selectedStrategyId}\n                    >\n                      сохранить\n                    </Button>\n                  </>\n                }\n              >\n                <Button  data-tour=\"create-button\" size=\"small\" type=\"text\" icon={<PlusOutlined />} />\n              </Popconfirm>\n            </Tooltip>\n          }\n        />\n        \n        <Tooltip placement=\"bottom\" title={\"сохранить\"}>\n          <Button\n            data-tour=\"save-button\"\n            type=\"primary\"\n            style={{ width: \"40px\" }}\n            icon={<SaveOutlined />}\n            onClick={updateSingleProject}\n            loading={isSaving}\n          />\n        </Tooltip>\n      </Flex>\n\n      {selectedProgramId && (\n        <DrawerUpdateProgram\n          currentProgram={currentProgram}\n          isLoadingGetProgramId={isLoadingGetProgramId}\n          open={openDrawer}\n          setOpen={setOpenDrawer}\n          disabled={activeTabTypesProgram === \"archivesPrograms\" ? true : false}\n        />\n      )}\n\n      <CustomTableProgram\n        expandedRowKeys={expandedRowKeys}\n        setExpandedRowKeys={setExpandedRowKeys}\n        form={form}\n        selectedProgramId={selectedProgramId}\n        disabledTable={disabledTable}\n        tables={tables}\n        setTables={setTables}\n        isLoadingGetProgramId={isLoadingGetProgramId}\n        isFetchingGetProgramId={isFetchingGetProgramId}\n        currentProjects={currentProjects}\n        targets={targets}\n        targetStateOnProduct={targetStateOnProduct}\n        setTargetStateOnProduct={setTargetStateOnProduct}\n        posts={posts}\n        projects={projects}\n        selectedProjectIds={selectedProjectIds}\n        setSelectedProjectIds={setSelectedProjectIds}\n        setDescriptionProgram={setDescriptionProgram}\n        descriptionProgram={descriptionProgram}\n      ></CustomTableProgram>\n    </div>\n  );\n}\n"],"names":["useStyle","createStyles","_ref","css","token","antCls","customTable","CustomTableProgram","_ref2","expandedRowKeys","setExpandedRowKeys","form","selectedProgramId","targetStateOnProduct","setTargetStateOnProduct","disabledTable","tables","setTables","isLoadingGetProjectId","isFetchingGetProjectId","targets","currentProjects","posts","projects","selectedProjectIds","setSelectedProjectIds","setDescriptionProgram","descriptionProgram","styles","groupColumns","dataWithGroups","expandableConfig","useCustomTableProgram","stylesColumnProjectPopconfim","placement","stylesColumnProjectSelect","style","width","stylesColumnSelect","stylesColumnDate","_jsx","Form","disabled","children","Table","bordered","className","loading","columns","dataSource","rowKey","pagination","scroll","x","y","expandable","DrawerUpdateProgram","currentProgram","open","setOpen","isSaving","setIsSaving","strategies","isLoadingGetNew","updateProject","isLoadingUpdateProjectMutation","isSuccessUpdateProjectMutation","isErrorUpdateProjectMutation","ErrorUpdateProjectMutation","localIsResponseUpdateProjectMutation","handlePostValuesChange","handleSave","handleReset","useDrawerUpdateProgram","_Fragment","DrawerAnt","closable","destroyOnClose2","title","whiteSpace","onClose","isMobile","_jsxs","Flex","vertical","height","onValuesChange","layout","flexGrow","Item","label","name","rules","required","message","Input","Select","allowClear","showSearch","optionFilterProp","filterOption","input","option","toLowerCase","includes","options","map","strategy","strategyNumber","value","id","Space","marginTop","Button","type","onClick","Program","activeTabTypesProgram","setSelectedProgramId","selectedStrategyId","setSelectedStrategyId","items","setItems","activeTab","setActiveTab","openDrawer","setOpenDrawer","programs","archivesPrograms","isErrorGetProject","isLoadingGetProject","isLoadingGetProgramId","isErrorGetProgramId","isFetchingGetProgramId","isErrorGetNew","reduxSelectedOrganizationId","createProject","isLoadingProjectMutation","onChangeTab","addProgram","resetUseState","updateSingleProject","usePrograma","justify","align","Tabs","activeKey","onChange","addIcon","Tooltip","Popconfirm","showCancel","okButtonProps","display","icon","description","gap","Typography","marginLeft","size","PlusOutlined","SaveOutlined"],"sourceRoot":""}