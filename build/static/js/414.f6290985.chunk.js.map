{"version":3,"file":"static/js/414.f6290985.chunk.js","mappings":"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","sources":["webpack://good_management/./src/UI/app/DialogPage/desktop/DesktopDialogPage.module.css?6bad","UI/app/DialogPage/desktop/DesktopDoalogPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DesktopDialogPage_dialog__MOt8t\",\"main\":\"DesktopDialogPage_main__ngLDl\",\"body\":\"DesktopDialogPage_body__XXTc3\"};","import React, { useLayoutEffect, useEffect, useRef, useState, useMemo, useCallback } from 'react';\nimport classes from './DesktopDialogPage.module.css';\nimport Headers from \"@Custom/Headers/Headers\";\nimport { useConvertsHook, useMessages } from '@hooks';\nimport { useParams } from 'react-router-dom';\nimport { Message } from '@Custom/Message/Message';\nimport Input from '../Input';\nimport { notEmpty } from '@helpers/helpers'\nimport { debounce } from 'lodash';\nimport { useSocket, useEmitSocket } from '@helpers/SocketContext';\n\nexport default function DesktopDialogPage() {\n    const { convertId } = useParams();\n    const [paginationSeenMessages, setPaginationSeenMessages] = useState(0);\n    const [paginationUnSeenMessages, setPaginationUnSeenMessages] = useState(0);\n    const bodyRef = useRef(null);\n    const [messagesArray, setMessagesArray] = useState();\n    const [socketMessages, setSocketMessages] = useState([]);\n    const unSeenMessagesRef = useRef(null);\n    const [visibleUnSeenMessageIds, setVisibleUnSeenMessageIds] = useState([]);\n    const historySeenIds = []\n\n    const { currentConvert, senderPostId, userInfo, senderPostName, senderPostForSocket, sendMessage, refetchGetConvertId, isLoadingGetConvertId, organizationId } = useConvertsHook({convertId});\n    const {\n        seenMessages,\n        unSeenMessageExist,\n        isLoadingSeenMessages,\n        isErrorSeenMessages,\n        isFetchingSeenMessages,\n        unSeenMessages,\n        unSeenMessagesIds,\n        isLoadingUnSeenMessages,\n        isErrorUnSeenMessages,\n        isFetchingUnSeenMessages,\n    } = useMessages(convertId, paginationSeenMessages);\n    const seenMessagesRef = useRef(seenMessages);\n    const unSeenMessageExistRef = useRef(unSeenMessageExist)\n\n    useEmitSocket('join_convert', { convertId: convertId });\n    useEmitSocket('messagesSeen', { convertId: convertId, messageIds: visibleUnSeenMessageIds, post: senderPostForSocket })\n\n    // Инициализация socket подписок \n    const eventNames = useMemo(() => ['messageCreationEvent', 'messagesAreSeen'], []);\n    const handleEventData = useCallback((eventName, data) => {\n        console.log(`Data from ${eventName}:`, data);\n    }, []);\n    const socketResponse = useSocket(eventNames, handleEventData);\n\n    // Слушатель скрола, пагинация запрашиваемых сообщений \n    const handleScroll = debounce(() => {\n        const bodyElement = bodyRef.current;\n        if (!bodyElement) return;\n\n        const { scrollTop, scrollHeight, clientHeight } = bodyElement;\n        if (Math.abs(scrollTop) >= scrollHeight - clientHeight - 200 && !isFetchingSeenMessages && notEmpty(seenMessagesRef.current))\n            setPaginationSeenMessages((prev) => prev + 30);\n    }, 200);\n\n\n    // Монтирование слушателя скрола\n    useLayoutEffect(() => {\n        const bodyElement = bodyRef.current;\n        if (!bodyElement) {\n            console.error('Body element is not found!');\n            return;\n        }\n\n        bodyElement.addEventListener('scroll', handleScroll);\n        return () => {\n            bodyElement.removeEventListener('scroll', handleScroll);\n        };\n    }, []);\n\n    // Компоновка массива архивных сообщений \n    useEffect(() => {\n        if (!notEmpty(seenMessages)) {\n            seenMessagesRef.current = []\n            return\n        }\n\n        if (!notEmpty(messagesArray)) {\n            seenMessagesRef.current = seenMessages;\n            setMessagesArray(seenMessages);\n        } else {\n            seenMessagesRef.current = seenMessages;\n            setMessagesArray(prev => [...prev, ...seenMessages]);\n        }\n\n    }, [seenMessages]);\n\n    // Создание socket сообщений \n    useEffect(() => {\n        if (!notEmpty(socketResponse?.messageCreationEvent)) return;\n\n        const newMessage = socketResponse.messageCreationEvent\n        setSocketMessages(prev => [...prev, {\n            id: newMessage.id,\n            content: newMessage.content,\n            userMessage: newMessage.sender.id === senderPostId,\n            attachmentToMessage: newMessage.attachmentToMessage,\n            timeSeen: null,\n            createdAt: newMessage.createdAt,\n        }]);\n    }, [socketResponse?.messageCreationEvent]);\n\n    // Прочтение сообщений(смена статуса)\n    useEffect(() => {\n        // Проверяем, что socketResponse.messagesAreSeen и messageIds существуют\n        if (!socketResponse?.messagesAreSeen || !Array.isArray(socketResponse.messagesAreSeen.messageIds)) {\n            return;\n        }\n\n        // Функция для обновления сообщений\n        const updateMessages = (messages) => {\n            return messages.map(message => {\n                console.log(socketResponse.messagesAreSeen.messageIds)\n                if (socketResponse.messagesAreSeen.messageIds.includes(message.id)) {\n                    console.log('bam')\n                    return {\n                        ...message,\n                        seenStatuses: ['isSeen']  // socketResponse.messagesAreSeen.dateSeen,\n                    };\n                }\n                return message;\n            });\n        };\n\n        // Обновляем messagesArray, если есть непрочитанные сообщения\n        if (unSeenMessageExistRef.current) {\n            const updatedMessagesArray = updateMessages(unSeenMessages);\n            const hasUnSeenMessages = updatedMessagesArray.some(message =>\n                socketResponse.messagesAreSeen.messageIds.includes(message.id)\n            );\n\n            if (hasUnSeenMessages) {\n                setMessagesArray(updatedMessagesArray);\n            } else {\n                unSeenMessageExistRef.current = false;\n            }\n        }\n\n        // Обновляем socketMessages\n        const updatedSocketMessages = updateMessages(socketMessages);\n        setSocketMessages(updatedSocketMessages);\n    }, [socketResponse?.messagesAreSeen, unSeenMessageExist]);\n\n    // Установка фокуса на не прочитанные сообщения \n    useLayoutEffect(() => {\n        if (!isLoadingUnSeenMessages && unSeenMessages.length > 0 && unSeenMessagesRef.current) {\n            const firstUnSeenMessageElement = unSeenMessagesRef.current;\n            const bodyElement = bodyRef.current;\n            if (firstUnSeenMessageElement && bodyElement) {\n                const offset = firstUnSeenMessageElement.offsetTop;\n                bodyElement.scrollTop = offset - 170;\n            }\n        }\n    }, [unSeenMessages, isLoadingUnSeenMessages]);\n\n    useEffect(() => {\n        const observer = new IntersectionObserver(\n            (entries) => {\n                // Создаем временный массив для хранения id видимых элементов\n                const visibleIds = [];\n\n                entries.forEach((entry) => {\n                    const messageId = entry.target.dataset.messageId;\n                    if (entry.isIntersecting && !historySeenIds.includes(messageId)) {\n                        // Добавляем id в массив, если элемент видим и его еще нет в historySeenIds\n                        visibleIds.push(messageId);\n                        historySeenIds.push(messageId);\n                    }\n                });\n\n                // Обновляем состояние массива visibleUnSeenMessageIds\n                setVisibleUnSeenMessageIds(visibleIds);\n            },\n            {\n                root: bodyRef.current, // Область видимости — это контейнер сообщений\n                threshold: 0.4,\n            }\n        );\n\n        // Находим все элементы с data-message-id и начинаем их отслеживать\n        const messageElements = bodyRef.current.querySelectorAll('[data-message-id]');\n        messageElements.forEach((element) => observer.observe(element));\n\n        // Очистка при размонтировании\n        return () => {\n            messageElements.forEach((element) => observer.unobserve(element));\n            observer.disconnect();\n        };\n    }, [unSeenMessages, socketMessages]);\n\n    console.warn(messagesArray, unSeenMessages)\n\n    return (\n        <>\n            <div className={classes.dialog}>\n                <Headers name={userInfo?.userName} sectionName={userInfo.postName} avatar={userInfo?.avatar}>\n                </Headers>\n\n                <div className={classes.main}>\n                    <div className={classes.body} ref={bodyRef}>\n                        {socketMessages.slice().reverse().map((item, index) => (\n                            <React.Fragment key={index}>\n                                <Message userMessage={item?.userMessage}\n                                    createdMessage={item?.createdAt}\n                                    seenStatuses={item?.seenStatuses}\n\n                                    attachmentToMessage={item?.attachmentToMessages}\n                                    {...(!item.userMessage && { 'data-message-id': item.id })}\n                                >\n                                    {item.content}\n                                </Message>\n                            </React.Fragment>\n                        ))}\n                        {unSeenMessages.length > 0 && (\n                            <>\n                                {unSeenMessages?.map((item, index) => (\n                                    <React.Fragment key={index}>\n                                        <Message\n                                            userMessage={item?.userMessage}\n                                            createdMessage={item?.createdAt}\n                                            ref={index === unSeenMessages.length - 1 ? unSeenMessagesRef : null}\n                                            data-message-id={item.id} // Добавляем data-атрибут\n                                            attachmentToMessage={item?.attachmentToMessages}\n                                            seenStatuses={item?.seenStatuses}\n\n                                        >\n                                            {item.content}\n                                        </Message>\n                                    </React.Fragment>\n                                ))}\n                                <div className={classes.unSeenMessagesInfo}> Непрочитанные сообщения </div>\n                            </>\n                        )}\n                        {messagesArray?.map((item, index) => (\n                            <React.Fragment key={index}>\n                                <Message key={index}\n                                    userMessage={item?.userMessage}\n                                    seenStatuses={item?.seenStatuses}\n                                    senderPost={item?.sender}\n                                    attachmentToMessage={item?.attachmentToMessages}\n                                    createdMessage={item?.createdAt}\n                                >\n                                    {item.content}\n                                </Message>\n                            </React.Fragment>\n                        ))}\n                        {isFetchingSeenMessages && <div>Loading more messages...</div>}\n                    </div>\n                </div>\n                <footer className={classes.footer}>\n                    <Input\n                        convertId={currentConvert?.id}\n                        sendMessage={sendMessage}\n                        senderPostId={senderPostId}\n                        senderPostName={senderPostName}\n                        refetchMessages={refetchGetConvertId}\n                        isLoadingGetConvertId={isLoadingGetConvertId}\n                        organizationId={organizationId}\n                    />\n                </footer>\n            </div>\n        </>\n    );\n};"],"names":["DesktopDialogPage","convertId","useParams","paginationSeenMessages","setPaginationSeenMessages","useState","paginationUnSeenMessages","setPaginationUnSeenMessages","bodyRef","useRef","messagesArray","setMessagesArray","socketMessages","setSocketMessages","unSeenMessagesRef","visibleUnSeenMessageIds","setVisibleUnSeenMessageIds","historySeenIds","currentConvert","senderPostId","userInfo","senderPostName","senderPostForSocket","sendMessage","refetchGetConvertId","isLoadingGetConvertId","organizationId","useConvertsHook","seenMessages","unSeenMessageExist","isLoadingSeenMessages","isErrorSeenMessages","isFetchingSeenMessages","unSeenMessages","unSeenMessagesIds","isLoadingUnSeenMessages","isErrorUnSeenMessages","isFetchingUnSeenMessages","useMessages","seenMessagesRef","unSeenMessageExistRef","useEmitSocket","messageIds","post","eventNames","useMemo","handleEventData","useCallback","eventName","data","console","log","socketResponse","useSocket","handleScroll","debounce","bodyElement","current","scrollTop","scrollHeight","clientHeight","Math","abs","notEmpty","prev","useLayoutEffect","addEventListener","removeEventListener","error","useEffect","messageCreationEvent","newMessage","id","content","userMessage","sender","attachmentToMessage","timeSeen","createdAt","messagesAreSeen","Array","isArray","updateMessages","messages","map","message","includes","seenStatuses","updatedMessagesArray","some","updatedSocketMessages","length","firstUnSeenMessageElement","offset","offsetTop","observer","IntersectionObserver","entries","visibleIds","forEach","entry","messageId","target","dataset","isIntersecting","push","root","threshold","messageElements","querySelectorAll","element","observe","unobserve","disconnect","warn","_jsx","_Fragment","children","_jsxs","className","classes","dialog","Headers","name","userName","sectionName","postName","avatar","main","body","ref","slice","reverse","item","index","React","Message","createdMessage","attachmentToMessages","unSeenMessagesInfo","senderPost","footer","Input","refetchMessages"],"sourceRoot":""}