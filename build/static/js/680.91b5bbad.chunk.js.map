{"version":3,"file":"static/js/680.91b5bbad.chunk.js","mappings":"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","sources":["webpack://good_management/./src/UI/app/Chat/Chat.module.css?9e13","UI/image/burger.svg","webpack://good_management/./src/UI/app/Chat/section/Section.module.css?5473","UI/app/Chat/section/Section.jsx","UI/app/Chat/Chat.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Chat_contact__fBf8L\",\"header\":\"Chat_header__SIghd\",\"headerName\":\"Chat_headerName__Fx73I\",\"search\":\"Chat_search__IA5WV\",\"main\":\"Chat_main__GwBIV\",\"btnPomoshnik\":\"Chat_btnPomoshnik__Hn+yt\",\"btnAddUser\":\"Chat_btnAddUser__y4aTJ\"};","var _desc, _defs, _rect, _g;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgBurger(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"\\n\\t\\t\\tCreated with Pixso.\\n\\t\")), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip818_4238\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"icon / menu\",\n    width: 24,\n    height: 24,\n    fill: \"white\",\n    fillOpacity: 0\n  })))), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"icon / menu\",\n    width: 24,\n    height: 24,\n    fill: \"#FFFFFF\",\n    fillOpacity: 0\n  })), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip818_4238)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector 36\",\n    d: \"M5 7L19 7\",\n    stroke: \"#FFFFFF\",\n    strokeOpacity: 1,\n    strokeWidth: 2,\n    strokeLinecap: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector 37\",\n    d: \"M5 12L19 12\",\n    stroke: \"#FFFFFF\",\n    strokeOpacity: 1,\n    strokeWidth: 2,\n    strokeLinecap: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector 38\",\n    d: \"M5 17L19 17\",\n    stroke: \"#FFFFFF\",\n    strokeOpacity: 1,\n    strokeWidth: 2,\n    strokeLinecap: \"round\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgBurger);\nexport default __webpack_public_path__ + \"static/media/burger.2a345f899c7f94ac1b78dbdca7e7e145.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__WhS9l\",\"name\":\"Section_name__4KcuY\",\"block\":\"Section_block__qcV4d\",\"icon\":\"Section_icon__l9Zw3\",\"row\":\"Section_row__3H1wG\",\"row_active\":\"Section_row_active__517lR\",\"controlPanel\":\"Section_controlPanel__6SQh6\",\"line\":\"Section_line__++KKp\"};","import React, { useEffect } from \"react\";\nimport classes from \"./Section.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  setSelectedOrganizationId,\n  setSelectedOrganizationReportDay,\n} from \"@slices\";\nimport { useGetReduxOrganization, useOrganizationHook } from \"@hooks\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function Section() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { organizations, isLoadingOrganization, isErrorOrganization } =\n    useOrganizationHook();\n\n  const { reduxSelectedOrganizationId } = useGetReduxOrganization();\n\n  const handleOrganizationNameButtonClick = (id, name, reportDay) => {\n    localStorage.setItem(\"selectedOrganizationId\", id);\n    localStorage.setItem(\"name\", name);\n    localStorage.setItem(\"reportDay\", reportDay);\n    dispatch(setSelectedOrganizationId(id));\n    dispatch(setSelectedOrganizationReportDay(reportDay));\n  };\n\n  const handleControlPanelButtonClick = () => {\n    navigate(\"/controlPanel\");\n  };\n\n  useEffect(() => {\n    if (!isLoadingOrganization && !isErrorOrganization && organizations?.length > 0) {\n      const defaultOrg = organizations[0];\n      if (!localStorage.getItem(\"selectedOrganizationId\")) {\n        localStorage.setItem(\"selectedOrganizationId\", defaultOrg.id);\n        localStorage.setItem(\"name\", defaultOrg.organizationName);\n        localStorage.setItem(\"reportDay\", defaultOrg.reportDay);\n        \n        // Также обновляем Redux store\n        dispatch(setSelectedOrganizationId(defaultOrg.id));\n        dispatch(setSelectedOrganizationReportDay(defaultOrg.reportDay));\n      }\n    }\n  }, [organizations, isLoadingOrganization, isErrorOrganization, dispatch]);\n\n  return (\n    <>\n      <div className={classes.section}>\n        <div className={classes.name}>\n          <span>Организации</span>\n        </div>\n      </div>\n      <div className={classes.block}>\n        {organizations.map((item) => (\n          <>\n            <div\n              key={item.id}\n              className={`${classes.row} ${\n                reduxSelectedOrganizationId === item.id\n                  ? classes.row_active\n                  : \"\"\n              }`}\n              onClick={() =>\n                handleOrganizationNameButtonClick(\n                  item.id,\n                  item.organizationName,\n                  item.reportDay\n                )\n              }\n            >\n              <svg className={classes.icon} width=\"25\" height=\"25\">\n                <path d=\"M19.66 15.5L17.58 15.5L17.58 17.58L19.66 17.58L19.66 15.5ZM19.66 11.33L17.58 11.33L17.58 13.41L19.66 13.41L19.66 11.33ZM21.75 19.66L13.41 19.66L13.41 17.58L15.5 17.58L15.5 15.5L13.41 15.5L13.41 13.41L15.5 13.41L15.5 11.33L13.41 11.33L13.41 9.25L21.75 9.25L21.75 19.66ZM11.33 7.16L9.25 7.16L9.25 5.08L11.33 5.08L11.33 7.16ZM11.33 11.33L9.25 11.33L9.25 9.25L11.33 9.25L11.33 11.33ZM11.33 15.5L9.25 15.5L9.25 13.41L11.33 13.41L11.33 15.5ZM11.33 19.66L9.25 19.66L9.25 17.58L11.33 17.58L11.33 19.66ZM7.16 7.16L5.08 7.16L5.08 5.08L7.16 5.08L7.16 7.16ZM7.16 11.33L5.08 11.33L5.08 9.25L7.16 9.25L7.16 11.33ZM7.16 15.5L5.08 15.5L5.08 13.41L7.16 13.41L7.16 15.5ZM7.16 19.66L5.08 19.66L5.08 17.58L7.16 17.58L7.16 19.66ZM13.41 7.16L13.41 3L3 3L3 21.75L23.83 21.75L23.83 7.16L13.41 7.16Z\" />\n              </svg>\n              <span>{item.organizationName}</span>\n            </div>\n\n            {reduxSelectedOrganizationId === item.id && (\n              <div\n                className={classes.controlPanel}\n                onClick={handleControlPanelButtonClick}\n              >\n                <svg viewBox=\"0 0 24 24\">\n                  <path\n                    d=\"M14.33 11.39L13.93 10.52L13.07 10.13C12.6 9.91 12.6 9.25 13.07 9.03L13.93 8.64L14.33 7.79C14.54 7.32 15.2 7.32 15.42 7.79L15.81 8.65L16.67 9.05C17.13 9.26 17.13 9.92 16.67 10.14L15.8 10.53L15.41 11.39C15.2 11.85 14.53 11.85 14.33 11.39ZM4.61 13.79L5 12.92L5.87 12.53C6.33 12.31 6.33 11.65 5.87 11.43L5 11.05L4.61 10.19C4.4 9.72 3.73 9.72 3.53 10.19L3.13 11.05L2.27 11.45C1.8 11.65 1.8 12.32 2.27 12.53L3.13 12.92L3.53 13.79C3.73 14.25 4.4 14.25 4.61 13.79ZM8.81 8.99L9.39 7.71L10.67 7.13C11.13 6.91 11.13 6.25 10.67 6.03L9.39 5.46L8.81 4.19C8.6 3.72 7.93 3.72 7.73 4.19L7.14 5.46L5.87 6.05C5.4 6.25 5.4 6.92 5.87 7.13L7.14 7.71L7.73 8.99C7.93 9.45 8.6 9.45 8.81 8.99ZM21.99 8.99C21.62 8.65 21.06 8.69 20.72 9.06L14.59 15.96L11.52 12.89C11.05 12.42 10.29 12.42 9.83 12.89L4.11 18.61C3.77 18.96 3.77 19.53 4.11 19.88C4.46 20.23 5.04 20.23 5.39 19.88L10.67 14.59L13.76 17.69C14.25 18.18 15.05 18.15 15.5 17.64L22.07 10.26C22.4 9.89 22.37 9.31 21.99 8.99Z\"\n                    fillRule=\"nonzero\"\n                  />\n                </svg>\n                <span>Панель управления</span>\n              </div>\n            )}\n          </>\n        ))}\n        <div className={classes.line}></div>\n      </div>\n    </>\n  );\n}\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport classes from \"./Chat.module.css\";\nimport iconHeader from \"@image/iconHeader.svg\";\nimport burger from \"@image/burger.svg\";\nimport Section from \"./section/Section\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usePostsHook } from '@hooks'\nimport { DialogContainer } from '@Custom/DialogContainer/DialogContainer.jsx'\nimport { useSocket } from \"@helpers/SocketContext.js\";\nimport { notEmpty, getPostIdRecipientSocketMessage } from '@helpers/helpers'\nimport { FloatButton } from \"antd\";\nimport arrowBack from \"@image/back_white.svg\";\n\nexport default function Chat() {\n  const navigate = useNavigate();\n\n  const { allChats, refetchAllChats } = usePostsHook()\n\n  const [copyChats, setCopyChats] = useState()\n  const [socketMessagesCount, setSocketMessagesCount] = useState(new Map());\n\n  const eventNames = useMemo(\n    () => [\"convertCreationEvent\", \"messageCountEvent\"],\n    []\n  ); // Мемоизация массива событий\n\n  const handleEventData = useCallback((eventName, data) => {\n    console.log(`Data from ${eventName}:`, data);\n  }, []); // Мемоизация callbac\n\n  const socketResponse = useSocket(eventNames, handleEventData);\n\n  const handleUserButtonClick = () => {\n    navigate(\"/user\");\n  };\n  const handleStartButtonClick = () => {\n    navigate(\"/pomoshnik/start\");\n  };\n\n  const handleItemClick = (item) => {\n    //dispatch(setSelectedItem(item));\n\n    navigate(`/Chat/${item.id}`)\n  }\n\n  useEffect(() => {\n    if (!notEmpty(socketResponse?.convertCreationEvent)) return\n\n    refetchAllChats()\n  }, [socketResponse?.convertCreationEvent])\n\n  useEffect(() => {\n    if (!notEmpty(socketResponse?.messageCountEvent)) return\n\n    const response = socketResponse.messageCountEvent\n    const recepientId = getPostIdRecipientSocketMessage(response.host, response.lastPostInConvert);\n    const newMap = new Map(socketMessagesCount);\n\n    if (newMap.has(recepientId.toString())) {\n      newMap.set(recepientId.toString(), newMap.get(recepientId.toString()) + 1);\n    }\n    else {\n      newMap.set(recepientId.toString(), 1);\n    }\n\n    setCopyChats(getChatsWithTimeOfSocketMessage(copyChats, recepientId))\n    setSocketMessagesCount(newMap);\n  }, [socketResponse?.messageCountEvent])\n\n  useEffect(() => {\n    if (!notEmpty(allChats)) return\n\n    setCopyChats([...allChats])\n  }, [allChats])\n\n  return (\n    <div className={classes.contact}>\n      <div className={classes.header}>\n        <div className={classes.headerName}>контакты</div>\n        <img src={burger} alt=\"burger\" />\n      </div>\n      <div className={classes.search}>\n        <input type=\"search\" placeholder=\"поиск\"></input>\n      </div>\n      <div className={classes.main}>\n        <button\n          className={classes.btnPomoshnik}\n          onClick={handleStartButtonClick}\n        >\n          <img src={iconHeader} alt=\"iconHeader\" />\n          <span>Личный помощник</span>\n        </button>\n        <Section></Section>\n\n        <div>\n\n          {copyChats?.map((item, index) => (\n            <div onClick={() => handleItemClick(item)}>\n              <React.Fragment key={index} >\n                <DialogContainer\n                  postName={item?.postName}\n                  userName={item?.userFirstName + ' ' + item?.userLastName}\n                  avatarUrl={item?.userAvatar}\n                  unseenMessagesCount={\n                    (+item?.unseenMessagesCount) +\n                    (+item?.watcherUnseenCount) +\n                    (+socketMessagesCount.get(item?.id) || 0)\n                  }\n                ></DialogContainer>\n              </React.Fragment>\n            </div>\n          ))}\n        </div>\n\n        <button onClick={handleUserButtonClick} className={classes.btnAddUser}>\n          <span> Добавить пользователя </span>\n        </button>\n\n        {/* <FloatButton\n          icon={\n            <img src={arrowBack} alt=\"back\" style={{ width: 20, height: 20 }} />\n          }\n          type=\"primary\"\n          tooltip=\"Добавить пользователя\"\n          onClick={handleUserButtonClick}\n          style={{\n            insetInlineStart: 380,\n          }}\n        /> */}\n      </div>\n    </div>\n  );\n}\n\nconst getChatsWithTimeOfSocketMessage = (chatsArray, id) => {\n  if (!chatsArray) return [];\n\n  // 1. Приводим ВСЕ даты к типу Date (чтобы сравнивать одинаковые типы)\n  const normalizedChats = chatsArray.map(chat => ({\n    ...chat,\n    latestMessageCreatedAt: new Date(chat.latestMessageCreatedAt)\n  }));\n\n  // 2. Обновляем дату в нужном чате\n  const updatedChats = normalizedChats.map(chat =>\n    chat.id === id\n      ? { ...chat, latestMessageCreatedAt: new Date() }\n      : chat\n  );\n\n  // 3. Сортируем (теперь все latestMessageCreatedAt — объекты Date)\n  const sortedChats = [...updatedChats].sort((a, b) =>\n    b.latestMessageCreatedAt - a.latestMessageCreatedAt\n  );\n  console.warn(sortedChats)\n  return sortedChats;\n};\n"],"names":["Section","dispatch","useDispatch","navigate","useNavigate","organizations","isLoadingOrganization","isErrorOrganization","useOrganizationHook","reduxSelectedOrganizationId","useGetReduxOrganization","handleControlPanelButtonClick","useEffect","length","defaultOrg","localStorage","getItem","setItem","id","organizationName","reportDay","setSelectedOrganizationId","setSelectedOrganizationReportDay","_jsxs","_Fragment","children","_jsx","className","classes","section","name","block","map","item","row","row_active","onClick","handleOrganizationNameButtonClick","icon","width","height","d","controlPanel","viewBox","fillRule","line","Chat","allChats","refetchAllChats","usePostsHook","copyChats","setCopyChats","useState","socketMessagesCount","setSocketMessagesCount","Map","eventNames","useMemo","handleEventData","useCallback","eventName","data","console","log","socketResponse","useSocket","notEmpty","convertCreationEvent","messageCountEvent","response","recepientId","getPostIdRecipientSocketMessage","host","lastPostInConvert","newMap","has","toString","set","get","getChatsWithTimeOfSocketMessage","contact","header","headerName","src","burger","alt","search","type","placeholder","main","btnPomoshnik","handleStartButtonClick","iconHeader","index","handleItemClick","React","DialogContainer","postName","userName","userFirstName","userLastName","avatarUrl","userAvatar","unseenMessagesCount","watcherUnseenCount","handleUserButtonClick","btnAddUser","chatsArray","sortedChats","chat","latestMessageCreatedAt","Date","sort","a","b","warn"],"sourceRoot":""}