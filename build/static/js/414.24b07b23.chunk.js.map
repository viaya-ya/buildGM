{"version":3,"file":"static/js/414.24b07b23.chunk.js","mappings":"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","sources":["webpack://good_management/./src/UI/app/DialogPage/desktop/DesktopDialogPage.module.css?6bad","UI/app/DialogPage/desktop/DesktopDoalogPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DesktopDialogPage_dialog__0CwoD\",\"main\":\"DesktopDialogPage_main__K5jst\",\"body\":\"DesktopDialogPage_body__yq9vZ\"};","import React, { useLayoutEffect, useEffect, useRef, useState, useMemo, useCallback } from 'react';\r\nimport classes from './DesktopDialogPage.module.css';\r\nimport Headers from \"@Custom/Headers/Headers\";\r\nimport { useConvertsHook, useMessages } from '@hooks';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Message } from '@Custom/Message/Message';\r\nimport Input from '../Input';\r\nimport { notEmpty } from '@helpers/helpers'\r\nimport { debounce } from 'lodash';\r\nimport { useSocket, useEmitSocket } from '@helpers/SocketContext';\r\n\r\nexport default function DesktopDialogPage() {\r\n    const { convertId } = useParams();\r\n    const [paginationSeenMessages, setPaginationSeenMessages] = useState(0);\r\n    const [paginationUnSeenMessages, setPaginationUnSeenMessages] = useState(0);\r\n    const bodyRef = useRef(null);\r\n    const [messagesArray, setMessagesArray] = useState();\r\n    const [socketMessages, setSocketMessages] = useState([]);\r\n    const unSeenMessagesRef = useRef(null);\r\n    const [visibleUnSeenMessageIds, setVisibleUnSeenMessageIds] = useState([]);\r\n    const historySeenIds = []\r\n\r\n    const { currentConvert, senderPostId, userInfo, senderPostName, senderPostForSocket, sendMessage, refetchGetConvertId, isLoadingGetConvertId, organizationId } = useConvertsHook({convertId});\r\n    const {\r\n        seenMessages,\r\n        unSeenMessageExist,\r\n        isLoadingSeenMessages,\r\n        isErrorSeenMessages,\r\n        isFetchingSeenMessages,\r\n        unSeenMessages,\r\n        unSeenMessagesIds,\r\n        isLoadingUnSeenMessages,\r\n        isErrorUnSeenMessages,\r\n        isFetchingUnSeenMessages,\r\n    } = useMessages(convertId, paginationSeenMessages);\r\n    const seenMessagesRef = useRef(seenMessages);\r\n    const unSeenMessageExistRef = useRef(unSeenMessageExist)\r\n\r\n    useEmitSocket('join_convert', { convertId: convertId });\r\n    useEmitSocket('messagesSeen', { convertId: convertId, messageIds: visibleUnSeenMessageIds, post: senderPostForSocket })\r\n\r\n    // Инициализация socket подписок \r\n    const eventNames = useMemo(() => ['messageCreationEvent', 'messagesAreSeen'], []);\r\n    const handleEventData = useCallback((eventName, data) => {\r\n        console.log(`Data from ${eventName}:`, data);\r\n    }, []);\r\n    const socketResponse = useSocket(eventNames, handleEventData);\r\n\r\n    // Слушатель скрола, пагинация запрашиваемых сообщений \r\n    const handleScroll = debounce(() => {\r\n        const bodyElement = bodyRef.current;\r\n        if (!bodyElement) return;\r\n\r\n        const { scrollTop, scrollHeight, clientHeight } = bodyElement;\r\n        if (Math.abs(scrollTop) >= scrollHeight - clientHeight - 200 && !isFetchingSeenMessages && notEmpty(seenMessagesRef.current))\r\n            setPaginationSeenMessages((prev) => prev + 30);\r\n    }, 200);\r\n\r\n\r\n    // Монтирование слушателя скрола\r\n    useLayoutEffect(() => {\r\n        const bodyElement = bodyRef.current;\r\n        if (!bodyElement) {\r\n            console.error('Body element is not found!');\r\n            return;\r\n        }\r\n\r\n        bodyElement.addEventListener('scroll', handleScroll);\r\n        return () => {\r\n            bodyElement.removeEventListener('scroll', handleScroll);\r\n        };\r\n    }, []);\r\n\r\n    // Компоновка массива архивных сообщений \r\n    useEffect(() => {\r\n        if (!notEmpty(seenMessages)) {\r\n            seenMessagesRef.current = []\r\n            return\r\n        }\r\n\r\n        if (!notEmpty(messagesArray)) {\r\n            seenMessagesRef.current = seenMessages;\r\n            setMessagesArray(seenMessages);\r\n        } else {\r\n            seenMessagesRef.current = seenMessages;\r\n            setMessagesArray(prev => [...prev, ...seenMessages]);\r\n        }\r\n\r\n    }, [seenMessages]);\r\n\r\n    // Создание socket сообщений \r\n    useEffect(() => {\r\n        if (!notEmpty(socketResponse?.messageCreationEvent)) return;\r\n\r\n        const newMessage = socketResponse.messageCreationEvent\r\n        setSocketMessages(prev => [...prev, {\r\n            id: newMessage.id,\r\n            content: newMessage.content,\r\n            userMessage: newMessage.sender.id === senderPostId,\r\n            attachmentToMessage: newMessage.attachmentToMessage,\r\n            timeSeen: null,\r\n            createdAt: newMessage.createdAt,\r\n        }]);\r\n    }, [socketResponse?.messageCreationEvent]);\r\n\r\n    // Прочтение сообщений(смена статуса)\r\n    useEffect(() => {\r\n        // Проверяем, что socketResponse.messagesAreSeen и messageIds существуют\r\n        if (!socketResponse?.messagesAreSeen || !Array.isArray(socketResponse.messagesAreSeen.messageIds)) {\r\n            return;\r\n        }\r\n\r\n        // Функция для обновления сообщений\r\n        const updateMessages = (messages) => {\r\n            return messages.map(message => {\r\n                console.log(socketResponse.messagesAreSeen.messageIds)\r\n                if (socketResponse.messagesAreSeen.messageIds.includes(message.id)) {\r\n                    console.log('bam')\r\n                    return {\r\n                        ...message,\r\n                        seenStatuses: ['isSeen']  // socketResponse.messagesAreSeen.dateSeen,\r\n                    };\r\n                }\r\n                return message;\r\n            });\r\n        };\r\n\r\n        // Обновляем messagesArray, если есть непрочитанные сообщения\r\n        if (unSeenMessageExistRef.current) {\r\n            const updatedMessagesArray = updateMessages(unSeenMessages);\r\n            const hasUnSeenMessages = updatedMessagesArray.some(message =>\r\n                socketResponse.messagesAreSeen.messageIds.includes(message.id)\r\n            );\r\n\r\n            if (hasUnSeenMessages) {\r\n                setMessagesArray(updatedMessagesArray);\r\n            } else {\r\n                unSeenMessageExistRef.current = false;\r\n            }\r\n        }\r\n\r\n        // Обновляем socketMessages\r\n        const updatedSocketMessages = updateMessages(socketMessages);\r\n        setSocketMessages(updatedSocketMessages);\r\n    }, [socketResponse?.messagesAreSeen, unSeenMessageExist]);\r\n\r\n    // Установка фокуса на не прочитанные сообщения \r\n    useLayoutEffect(() => {\r\n        if (!isLoadingUnSeenMessages && unSeenMessages.length > 0 && unSeenMessagesRef.current) {\r\n            const firstUnSeenMessageElement = unSeenMessagesRef.current;\r\n            const bodyElement = bodyRef.current;\r\n            if (firstUnSeenMessageElement && bodyElement) {\r\n                const offset = firstUnSeenMessageElement.offsetTop;\r\n                bodyElement.scrollTop = offset - 170;\r\n            }\r\n        }\r\n    }, [unSeenMessages, isLoadingUnSeenMessages]);\r\n\r\n    useEffect(() => {\r\n        const observer = new IntersectionObserver(\r\n            (entries) => {\r\n                // Создаем временный массив для хранения id видимых элементов\r\n                const visibleIds = [];\r\n\r\n                entries.forEach((entry) => {\r\n                    const messageId = entry.target.dataset.messageId;\r\n                    if (entry.isIntersecting && !historySeenIds.includes(messageId)) {\r\n                        // Добавляем id в массив, если элемент видим и его еще нет в historySeenIds\r\n                        visibleIds.push(messageId);\r\n                        historySeenIds.push(messageId);\r\n                    }\r\n                });\r\n\r\n                // Обновляем состояние массива visibleUnSeenMessageIds\r\n                setVisibleUnSeenMessageIds(visibleIds);\r\n            },\r\n            {\r\n                root: bodyRef.current, // Область видимости — это контейнер сообщений\r\n                threshold: 0.4,\r\n            }\r\n        );\r\n\r\n        // Находим все элементы с data-message-id и начинаем их отслеживать\r\n        const messageElements = bodyRef.current.querySelectorAll('[data-message-id]');\r\n        messageElements.forEach((element) => observer.observe(element));\r\n\r\n        // Очистка при размонтировании\r\n        return () => {\r\n            messageElements.forEach((element) => observer.unobserve(element));\r\n            observer.disconnect();\r\n        };\r\n    }, [unSeenMessages, socketMessages]);\r\n\r\n    console.warn(messagesArray, unSeenMessages)\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.dialog}>\r\n                <Headers name={userInfo?.userName} sectionName={userInfo.postName} avatar={userInfo?.avatar}>\r\n                </Headers>\r\n\r\n                <div className={classes.main}>\r\n                    <div className={classes.body} ref={bodyRef}>\r\n                        {socketMessages.slice().reverse().map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <Message userMessage={item?.userMessage}\r\n                                    createdMessage={item?.createdAt}\r\n                                    seenStatuses={item?.seenStatuses}\r\n\r\n                                    attachmentToMessage={item?.attachmentToMessages}\r\n                                    {...(!item.userMessage && { 'data-message-id': item.id })}\r\n                                >\r\n                                    {item.content}\r\n                                </Message>\r\n                            </React.Fragment>\r\n                        ))}\r\n                        {unSeenMessages.length > 0 && (\r\n                            <>\r\n                                {unSeenMessages?.map((item, index) => (\r\n                                    <React.Fragment key={index}>\r\n                                        <Message\r\n                                            userMessage={item?.userMessage}\r\n                                            createdMessage={item?.createdAt}\r\n                                            ref={index === unSeenMessages.length - 1 ? unSeenMessagesRef : null}\r\n                                            data-message-id={item.id} // Добавляем data-атрибут\r\n                                            attachmentToMessage={item?.attachmentToMessages}\r\n                                            seenStatuses={item?.seenStatuses}\r\n\r\n                                        >\r\n                                            {item.content}\r\n                                        </Message>\r\n                                    </React.Fragment>\r\n                                ))}\r\n                                <div className={classes.unSeenMessagesInfo}> Непрочитанные сообщения </div>\r\n                            </>\r\n                        )}\r\n                        {messagesArray?.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <Message key={index}\r\n                                    userMessage={item?.userMessage}\r\n                                    seenStatuses={item?.seenStatuses}\r\n                                    senderPost={item?.sender}\r\n                                    attachmentToMessage={item?.attachmentToMessages}\r\n                                    createdMessage={item?.createdAt}\r\n                                >\r\n                                    {item.content}\r\n                                </Message>\r\n                            </React.Fragment>\r\n                        ))}\r\n                        {isFetchingSeenMessages && <div>Loading more messages...</div>}\r\n                    </div>\r\n                </div>\r\n                <footer className={classes.footer}>\r\n                    <Input\r\n                        convertId={currentConvert?.id}\r\n                        sendMessage={sendMessage}\r\n                        senderPostId={senderPostId}\r\n                        senderPostName={senderPostName}\r\n                        refetchMessages={refetchGetConvertId}\r\n                        isLoadingGetConvertId={isLoadingGetConvertId}\r\n                        organizationId={organizationId}\r\n                    />\r\n                </footer>\r\n            </div>\r\n        </>\r\n    );\r\n};"],"names":["DesktopDialogPage","convertId","useParams","paginationSeenMessages","setPaginationSeenMessages","useState","paginationUnSeenMessages","setPaginationUnSeenMessages","bodyRef","useRef","messagesArray","setMessagesArray","socketMessages","setSocketMessages","unSeenMessagesRef","visibleUnSeenMessageIds","setVisibleUnSeenMessageIds","historySeenIds","currentConvert","senderPostId","userInfo","senderPostName","senderPostForSocket","sendMessage","refetchGetConvertId","isLoadingGetConvertId","organizationId","useConvertsHook","seenMessages","unSeenMessageExist","isLoadingSeenMessages","isErrorSeenMessages","isFetchingSeenMessages","unSeenMessages","unSeenMessagesIds","isLoadingUnSeenMessages","isErrorUnSeenMessages","isFetchingUnSeenMessages","useMessages","seenMessagesRef","unSeenMessageExistRef","useEmitSocket","messageIds","post","eventNames","useMemo","handleEventData","useCallback","eventName","data","console","log","concat","socketResponse","useSocket","handleScroll","debounce","bodyElement","current","scrollTop","scrollHeight","clientHeight","Math","abs","notEmpty","prev","useLayoutEffect","addEventListener","removeEventListener","error","useEffect","messageCreationEvent","newMessage","id","content","userMessage","sender","attachmentToMessage","timeSeen","createdAt","messagesAreSeen","Array","isArray","updateMessages","messages","map","message","includes","_objectSpread","seenStatuses","updatedMessagesArray","some","updatedSocketMessages","length","firstUnSeenMessageElement","offset","offsetTop","observer","IntersectionObserver","entries","visibleIds","forEach","entry","messageId","target","dataset","isIntersecting","push","root","threshold","messageElements","querySelectorAll","element","observe","unobserve","disconnect","warn","_jsx","_Fragment","children","_jsxs","className","classes","dialog","Headers","name","userName","sectionName","postName","avatar","main","body","ref","slice","reverse","item","index","React","Message","createdMessage","attachmentToMessages","unSeenMessagesInfo","senderPost","footer","Input","refetchMessages"],"sourceRoot":""}