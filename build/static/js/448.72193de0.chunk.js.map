{"version":3,"file":"static/js/448.72193de0.chunk.js","mappings":"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","sources":["UI/image/statisticsArrowLeft.svg","webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/BottomHeaders.module.css?e3ba","webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.module.css?2769","UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.jsx","UI/Custom/Headers/BottomHeaders/BottomHeaders.jsx","UI/image/statisticsArrowRight.svg","webpack://good_management/./src/UI/Custom/ModalWindow.module.css?7f9e","UI/Custom/ModalWindow.jsx","webpack://good_management/./src/UI/Custom/modalSelectRadio/ModalSelectRadio.module.css?504c","UI/Custom/modalSelectRadio/ModalSelectRadio.jsx","webpack://good_management/./src/UI/app/ControlPanel/ControlPanel.module.css?500d","webpack://good_management/./src/UI/app/ControlPanel/GraphicStatistics/modal/ModalStatistic.module.css?c4b0","UI/app/ControlPanel/GraphicStatistics/modal/ModalStatistic.jsx","webpack://good_management/./src/UI/app/ControlPanel/panelDragDrop/PanelDragDrop.module.css?ddcb","UI/app/ControlPanel/panelDragDrop/PanelDragDrop.jsx","webpack://good_management/./src/UI/app/ControlPanel/modalSetting/ModalSetting.module.css?471d","UI/app/ControlPanel/modalSetting/ModalSetting.jsx","webpack://good_management/./src/UI/app/ControlPanel/GraphicStatistics/card/CardStatistic.module.css?4a9e","UI/app/ControlPanel/GraphicStatistics/card/CardStatistic.jsx","UI/app/ControlPanel/GraphicStatistics/card/sortable/SortableCard.jsx","UI/app/ControlPanel/ControlPanel.jsx"],"sourcesContent":["var _desc, _defs, _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgStatisticsArrowLeft(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 11.669983,\n    height: 19.799805,\n    viewBox: \"0 0 11.67 19.7998\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"\\n\\t\\t\\tCreated with Pixso.\\n\\t\")), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null)), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M11.67 1.77L9.89 0L0 9.89L9.9 19.79L11.67 18.02L3.53 9.89L11.67 1.77Z\",\n    fill: \"#005475\",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgStatisticsArrowLeft);\nexport default __webpack_public_path__ + \"static/media/statisticsArrowLeft.f7936a0e8650e337baf9f5e86cf7fa65.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"editText\":\"BottomHeaders_editText__BUuuG\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ButtonAction_wrapper__S7EYo\"};","import React from \"react\";\nimport classes from \"./ButtonAction.module.css\";\nimport iconAdd from \"../../../../image/iconAdd.svg\";\nimport Blacksavetmp from \"../../../../image/Blacksavetmp.svg\";\nimport ButtonImage from \"@Custom/buttonImage/ButtonImage\";\nexport default function ButtonAction({ create, update, refUpdate, refCreate }) {\n  return (\n    <div className={classes.wrapper}>\n      {create && (\n        <ButtonImage\n          refAction={refCreate}\n          name={\"создать\"}\n          icon={iconAdd}\n          onClick={create}\n        ></ButtonImage>\n      )}\n\n      {update && (\n        <ButtonImage\n          refAction={refUpdate}\n          name={\"обновить\"}\n          icon={Blacksavetmp}\n          onClick={update}\n        ></ButtonImage>\n      )}\n    </div>\n  );\n}\n","import React from 'react'\nimport classes from \"./BottomHeaders.module.css\"\nimport ButtonAction from './ButtonAction/ButtonAction'\n\nexport default function BottomHeaders({children, create, update,  refUpdate, refCreate}) {\n  return (\n    <div className={classes.editText}>\n        {children}\n        <ButtonAction create={create} update={update} refUpdate={refUpdate} refCreate={refCreate}></ButtonAction>\n    </div>\n  )\n}\n","var _desc, _defs, _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgStatisticsArrowRight(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 11.670044,\n    height: 19.799805,\n    viewBox: \"0 0 11.67 19.7998\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"\\n\\t\\t\\tCreated with Pixso.\\n\\t\")), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null)), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M0 18.02L1.78 19.79L11.67 9.89L1.77 0L0 1.77L8.13 9.89L0 18.02Z\",\n    fill: \"#005475\",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgStatisticsArrowRight);\nexport default __webpack_public_path__ + \"static/media/statisticsArrowRight.3daf16467905e170a2a5537d09a742a8.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"modalDelete\":\"ModalWindow_modalDelete__ukhRp\",\"modalDeleteElement\":\"ModalWindow_modalDeleteElement__6zWsf\",\"modalRow1\":\"ModalWindow_modalRow1__pu+1f\",\"modalRow2\":\"ModalWindow_modalRow2__KBA6s\",\"btnYes\":\"ModalWindow_btnYes__g3eEP\",\"btnNo\":\"ModalWindow_btnNo__0IBST\",\"textBtnYes\":\"ModalWindow_textBtnYes__bEP3u\",\"textBtnNo\":\"ModalWindow_textBtnNo__yJDBD\",\"text\":\"ModalWindow_text__YqzfM\",\"exitImage\":\"ModalWindow_exitImage__Bc2Og\"};","import React from \"react\";\nimport classes from \"./ModalWindow.module.css\";\nimport exit from \"../image/exitModal.svg\";\n\nexport default function ModalWindow({ text, close, btnYes, btnNo, exitBtn }) {\n  return (\n    <div className={classes.modalDelete}>\n      <div className={classes.modalDeleteElement}>\n        <img\n          src={exit}\n          alt=\"exit\"\n          className={classes.exitImage}\n          onClick={() => close(false)}\n        />\n        <div className={classes.modalRow1}>\n          <span className={classes.text}>{text}</span>\n        </div>\n        {!exitBtn && (\n          <div className={classes.modalRow2}>\n            <button\n              className={`${classes.btnYes} ${classes.textBtnYes}`}\n              onClick={btnYes}\n            >\n              Да\n            </button>\n            <button\n              className={`${classes.btnNo} ${classes.textBtnNo}`}\n              onClick={btnNo}\n            >\n              Нет\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalSelectRadio_modal__NKc1b\",\"modalWindow\":\"ModalSelectRadio_modalWindow__5RkFz\",\"header\":\"ModalSelectRadio_header__6ISO7\",\"item1\":\"ModalSelectRadio_item1__OXY0f\",\"item2\":\"ModalSelectRadio_item2__V4lIS\",\"search\":\"ModalSelectRadio_search__asvAb\",\"exit\":\"ModalSelectRadio_exit__et8tp\",\"table\":\"ModalSelectRadio_table__ZIpre\",\"row\":\"ModalSelectRadio_row__smpE+\"};","import React from \"react\";\nimport classes from \"./ModalSelectRadio.module.css\";\nimport exitModal from \"@image/exitModal.svg\";\nimport Blacksavetmp from \"@image/Blacksavetmp.svg\";\nimport ButtonImage from \"@Custom/buttonImage/ButtonImage\";\n\nexport function ModalSelectRadio({\n  nameTable,\n  handleSearchValue,\n  handleSearchOnChange,\n  exit,\n  filterArray,\n  array,\n  arrayItem,\n  selectedItemID,\n  handleRadioChange,\n  save,\n}) {\n  return (\n    <div className={classes.modal}>\n      <div className={classes.modalWindow}>\n        <img\n          src={exitModal}\n          alt=\"exitModal\"\n          onClick={() => exit()}\n          className={classes.exit}\n        />\n\n        <div className={classes.header}>\n          <div className={classes.item1}>\n            <input\n              type=\"search\"\n              placeholder=\"Найти\"\n              value={handleSearchValue}\n              onChange={handleSearchOnChange}\n              className={classes.search}\n            />\n          </div>\n\n          {save && (\n            <div className={classes.item2}>\n              <ButtonImage\n                name={\"сохранить\"}\n                icon={Blacksavetmp}\n                onClick={save}\n              ></ButtonImage>\n            </div>\n          )}\n        </div>\n\n        <table className={classes.table}>\n          <thead>\n            <tr>\n              <th>{nameTable}</th>\n            </tr>\n          </thead>\n\n          {filterArray.length > 0 ? (\n            <tbody>\n              <tr>\n                <td>\n                  {filterArray?.map((item) => (\n                    <div\n                      key={item.id}\n                      className={classes.row}\n                      onClick={() => handleRadioChange(item.id, item)}\n                    >\n                      <input\n                        type=\"radio\"\n                        checked={selectedItemID === item.id}\n                      />\n                      {item[arrayItem]}\n                    </div>\n                  ))}\n                </td>\n              </tr>\n            </tbody>\n          ) : (\n            <tbody>\n              <tr>\n                <td>\n                  {array?.map((item) => (\n                    <div\n                      key={item.id}\n                      className={classes.row}\n                      onClick={() => handleRadioChange(item.id, item)}\n                    >\n                      <input\n                        type=\"radio\"\n                        checked={selectedItemID === item.id}\n                      />\n                      {item[arrayItem]}\n                    </div>\n                  ))}\n                </td>\n              </tr>\n            </tbody>\n          )}\n        </table>\n      </div>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"ControlPanel_dialog__rq6ds\",\"main\":\"ControlPanel_main__HyxwA\",\"droppableContainer\":\"ControlPanel_droppableContainer__kpsNJ\",\"graphics\":\"ControlPanel_graphics__67Jvw\",\"handler\":\"ControlPanel_handler__9axiM\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalStatistic_modal__uZYyW\",\"modalWindow\":\"ModalStatistic_modalWindow__VPWUY\",\"exit\":\"ModalStatistic_exit__Wd3yW\",\"item_rowSVG\":\"ModalStatistic_item_rowSVG__3B6hl\",\"item_rowBtns\":\"ModalStatistic_item_rowBtns__C6wtW\",\"btn\":\"ModalStatistic_btn__ttSAY\",\"btn_active\":\"ModalStatistic_btn_active__+lsb0\",\"blockArrrow\":\"ModalStatistic_blockArrrow__cLB03\",\"row_svg_arrow\":\"ModalStatistic_row_svg_arrow__J0isU\"};","import React, { useEffect, useRef, useState } from \"react\";\nimport classes from \"./ModalStatistic.module.css\";\nimport * as d3 from \"d3\";\nimport getDateFormatSatatistic from \"@Custom/Function/getDateFormatStatistic\";\nimport exitModal from \"@image/exitModal.svg\";\nimport arrowLeft from \"@image/statisticsArrowLeft.svg\";\nimport arrowRight from \"@image/statisticsArrowRight.svg\";\n\nconst ModalStatistic = ({\n  data,\n  graphicTypeBD,\n  type,\n  name,\n  exit,\n  reportDay,\n}) => {\n  \n  const svgRef = useRef();\n  const [width, setWidth] = useState(850);\n  const [height, setHeight] = useState(640);\n  const [pointsForGraphic, setPointsForGraphic] = useState([]);\n  const [typeGraphic, setTypeGraphic] = useState(graphicTypeBD);\n  const [count, setCount] = useState(0);\n\n  const buttonTypes = [\n    {\n      type: \"13\",\n      value: \"13 недель\",\n    },\n    {\n      type: \"26\",\n      value: \"26 недель\",\n    },\n    {\n      type: \"52\",\n      value: \"52 недели\",\n    },\n    {\n      type: \"Ежедневный\",\n      value: \"Ежедневный\",\n    },\n    {\n      type: \"Ежемесячный\",\n      value: \"Ежемесячный\",\n    },\n    {\n      type: \"Ежегодовой\",\n      value: \"Ежегодовой\",\n    },\n  ];\n\n  const handleTypeGraphicButtonClick = (type) => {\n    setTypeGraphic(type);\n  };\n\n  // Высота графика в хависимотси от экрана\n  useEffect(() => {\n    const updateDimensions = () => {\n      if (window.innerHeight > 900) {\n        setHeight(640);\n      } else if (window.innerHeight > 500) {\n        setHeight(420);\n      }\n    };\n\n    updateDimensions();\n    window.addEventListener(\"resize\", updateDimensions);\n\n    return () => {\n      window.removeEventListener(\"resize\", updateDimensions);\n    };\n  }, []);\n\n  // Изменение pointsForGraphic в зависимости от типа графика\n  useEffect(() => {\n    setCount(0); // обнуление кол-во нажатий при смене графика\n\n    if (typeGraphic === \"Ежедневный\") {\n      const dayNow = new Date();\n      const currentWeekday = dayNow.getDay(); // Текущий день недели (0 - Воскресенье, 1 - Понедельник и т.д.)\n\n      // Определяем начальную дату - ближайший предыдущий день `day`\n      const startDate = new Date(dayNow);\n      let dayDifference;\n\n      if (currentWeekday >= reportDay) {\n        dayDifference = currentWeekday - reportDay;\n      } else {\n        dayDifference = 7 - (reportDay - currentWeekday);\n      }\n\n      startDate.setDate(dayNow.getDate() - dayDifference);\n\n      // Вычисляем конечную дату (b = startDate + 7 дней)\n      const endDate = new Date(startDate);\n      endDate.setDate(startDate.getDate() + 7);\n\n      // Генерируем массив всех дат в диапазоне [startDate, endDate)\n      const allDates = [];\n      for (\n        let date = new Date(startDate);\n        date < endDate;\n        date.setDate(date.getDate() + 1)\n      ) {\n        allDates.push(new Date(date).toISOString().split(\"T\")[0]);\n      }\n\n      // Фильтруем данные и заполняем пропущенные даты\n      const filteredData = data\n        ?.filter((item) => {\n          // Проверяем, если valueDate существует и валиден\n          const itemDate = item?.valueDate ? new Date(item.valueDate) : null;\n\n          // Если itemDate не валидная, пропускаем элемент\n          if (isNaN(itemDate?.getTime())) {\n            return false; // Пропускаем невалидные даты\n          }\n\n          // Проверяем, если startDate и endDate валидные\n          const isValidStartDate =\n            startDate instanceof Date && !isNaN(startDate.getTime());\n          const isValidEndDate =\n            endDate instanceof Date && !isNaN(endDate.getTime());\n\n          if (!isValidStartDate || !isValidEndDate) {\n            return false; // Пропускаем, если startDate или endDate невалидны\n          }\n\n          const itemDateStr = itemDate.toISOString().split(\"T\")[0];\n          const startDateStr = startDate.toISOString().split(\"T\")[0];\n          const endDateStr = endDate.toISOString().split(\"T\")[0];\n\n          // Возвращаем результат фильтрации\n          return (\n            startDateStr <= itemDateStr &&\n            itemDateStr < endDateStr &&\n            item.isCorrelation !== true\n          );\n        })\n        ?.map((item) => ({\n          ...item,\n          valueDate: item.valueDate?.split(\"T\")[0], // Предполагаем, что valueDate - строка с датой\n        }));\n\n      const updatedPoints = [];\n      const _createdPoints = [];\n\n      allDates.forEach((date) => {\n        const existingPoint = filteredData.find(\n          (item) => item.valueDate === date\n        );\n\n        if (existingPoint) {\n          updatedPoints.push(existingPoint);\n        } else {\n          _createdPoints.push({\n            id: date,\n            valueDate: date,\n            value: \"\",\n            isCorrelation: false,\n          });\n        }\n      });\n\n      // Сортируем данные по убыванию даты\n      updatedPoints.sort(\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\n      );\n      _createdPoints.sort(\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\n      );\n      // Устанавливаем данные\n      setPointsForGraphic([...updatedPoints, ..._createdPoints]);\n    }\n\n    if (typeGraphic === \"Ежемесячный\") {\n      // Группируем данные по месяцам и суммируем `valueDate` за каждый месяц\n      const monthlyData = data.reduce((acc, item) => {\n        const itemDate = new Date(item.valueDate);\n        const monthKey = `${itemDate.getFullYear()}-${itemDate.getMonth() + 1}`; // Год-месяц как ключ\n        if (\n          !isNaN(itemDate) &&\n          new Date(new Date().setMonth(new Date().getMonth() - 13)) < itemDate\n        ) {\n          if (item?.isCorrelation === true) {\n            acc[monthKey] = {\n              id: item.id,\n              valueSum: item.value,\n              year: itemDate.getFullYear(),\n              month: itemDate.getMonth() + 1,\n              isCorrelation: true,\n            };\n          }\n\n          // Если месяца ещё нет в acc, создаем начальный объект с valueSum = 0\n          if (!acc[monthKey] || !acc[monthKey]?.isCorrelation) {\n            if (!acc[monthKey]) {\n              acc[monthKey] = {\n                valueSum: 0,\n                year: itemDate.getFullYear(),\n                month: itemDate.getMonth() + 1,\n                isCorrelation: false,\n              };\n            }\n            acc[monthKey].valueSum += item.value;\n          }\n        }\n        return acc;\n      }, {});\n\n      // Формируем новый массив, включающий `valueDate` и `date` (последний день месяца)\n      const updatedMonthlyPoints = [];\n\n      // Для каждого месяца от 14 месяцев назад до текущего добавляем данные\n      for (let i = 0; i < 13; i++) {\n        const monthDate = new Date();\n        monthDate.setMonth(monthDate.getMonth() - i);\n        const monthKey = `${monthDate.getFullYear()}-${\n          monthDate.getMonth() + 1\n        }`;\n\n        // Если данных нет для этого месяца, создаем запись с суммой 0\n        if (!monthlyData[monthKey]) {\n          monthlyData[monthKey] = {\n            valueSum: 0,\n            year: monthDate.getFullYear(),\n            month: monthDate.getMonth() + 1,\n            isCorrelation: false,\n          };\n        }\n\n        const lastDayOfMonth = new Date(\n          monthDate.getFullYear(),\n          monthDate.getMonth() + 1,\n          0\n        ); // Получаем последний день месяца\n        const year = lastDayOfMonth.getFullYear();\n        const monthValue = lastDayOfMonth.getMonth() + 1; // Месяцы начинаются с 0\n        const date = lastDayOfMonth.getDate(); // Дата\n\n        updatedMonthlyPoints.push({\n          id: monthlyData[monthKey]?.id || null, // Если id не найден, присваиваем null\n          valueDate: `${year}-${monthValue}-${date}`,\n          value: monthlyData[monthKey].valueSum, // Сумма за месяц\n          isCorrelation: monthlyData[monthKey].isCorrelation,\n        });\n      }\n\n      // Сортируем данные по дате, от последнего месяца к первому\n      updatedMonthlyPoints.sort(\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\n      );\n\n      setPointsForGraphic(updatedMonthlyPoints);\n    }\n\n    if (typeGraphic === \"Ежегодовой\") {\n      // Группируем данные по годам и суммируем `valueDate` за каждый год\n      const yearData = data.reduce((acc, item) => {\n        const itemDate = new Date(item.valueDate);\n        const yearKey = `${itemDate.getFullYear()}`;\n        // Проверяем, что дата корректна и меньше чем на 13 лет от текущего года\n        if (\n          !isNaN(itemDate) &&\n          new Date().getFullYear() - 12 < itemDate.getFullYear()\n        ) {\n          if (item?.isCorrelation === true) {\n            acc[yearKey] = {\n              id: item.id,\n              valueSum: item.value,\n              year: itemDate.getFullYear(),\n              isCorrelation: true,\n            };\n          }\n\n          // Если года еще нет в acc, создаем начальный объект с valueSum = 0\n          if (!acc[yearKey] || !acc[yearKey]?.isCorrelation) {\n            if (!acc[yearKey]) {\n              acc[yearKey] = {\n                valueSum: 0,\n                year: itemDate.getFullYear(),\n                isCorrelation: false,\n              };\n            }\n            acc[yearKey].valueSum += item.value;\n          }\n        }\n        return acc;\n      }, {});\n\n      // Формируем новый массив, включающий `valueDate` и `date` (первый день года)\n      const updatedYearPoints = [];\n\n      // Для каждого года от 13 лет назад до текущего добавляем данные\n      for (let i = 0; i < 12; i++) {\n        const yearDate = new Date();\n        yearDate.setFullYear(yearDate.getFullYear() - i);\n        const yearKey = `${yearDate.getFullYear()}`;\n\n        // Если данных нет для этого года, создаем запись с суммой 0\n        if (!yearData[yearKey]) {\n          yearData[yearKey] = {\n            valueSum: 0,\n            year: yearDate.getFullYear(),\n            isCorrelation: false,\n          };\n        }\n\n        updatedYearPoints.push({\n          id: yearData[yearKey]?.id || null, // Если id не найден, присваиваем null\n          valueDate: `${yearDate.getFullYear()}-01-01`,\n          value: yearData[yearKey].valueSum, // Сумма за год\n          isCorrelation: yearData[yearKey].isCorrelation,\n        });\n      }\n\n      // Сортируем данные по дате, от последнего года к первому\n      updatedYearPoints.sort(\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\n      );\n\n      setPointsForGraphic(updatedYearPoints);\n    }\n    if (typeGraphic === \"13\" || typeGraphic === \"26\" || typeGraphic === \"52\") {\n      const today = new Date();\n      const end = new Date(today);\n      const start = new Date();\n      start.setDate(today.getDate() - (Number(typeGraphic) + 1) * 7);\n\n      const selectedDayOfWeek = parseInt(reportDay);\n      if (isNaN(selectedDayOfWeek)) {\n        throw new Error(\"selectedDayOfWeek должен быть числом.\");\n      }\n\n      const result = [];\n      let currentDate = new Date(start);\n\n      // Перемещаем currentDate на первый выбранный день недели\n      while (currentDate.getDay() !== selectedDayOfWeek) {\n        console.log(\"11111111111111\");\n        currentDate.setDate(currentDate.getDate() + 1);\n      }\n\n      // Цикл по неделям\n      while (currentDate <= end) {\n        console.log(\"2222222222222222\");\n        const nextDate = new Date(currentDate);\n        nextDate.setDate(currentDate.getDate() + 7);\n\n        // Фильтруем и суммируем значения для текущей недели\n        const currentSum = data\n          .filter((item) => {\n            const itemDate = new Date(item.valueDate);\n            const isValid =\n              currentDate <= itemDate &&\n              itemDate < nextDate &&\n              item.isCorrelation !== true;\n\n            return isValid;\n          })\n          .reduce((sum, item) => sum + item.value, 0);\n\n        // Создаем новую дату на день позже\n        const valueDate = new Date(nextDate.getTime() + 24 * 60 * 60 * 1000);\n\n        // Проверяем, что valueDate не позже сегодняшней даты\n        if (valueDate <= today) {\n          result.push({\n            value: currentSum,\n            valueDate: valueDate.toISOString().split(\"T\")[0],\n          });\n        }\n\n        currentDate = nextDate; // Переходим к следующей неделе\n      }\n\n      setPointsForGraphic(\n        result.sort((a, b) => new Date(b.valueDate) - new Date(a.valueDate))\n      );\n    }\n  }, [typeGraphic]);\n\n  // Построение svg картинки\n  useEffect(() => {\n    pointsForGraphic.sort(\n      (a, b) => new Date(a.valueDate) - new Date(b.valueDate)\n    );\n\n    // const formatDate = d3.timeFormat(\"%d.%m.%y\");\n    // const parseDate = d3.timeParse(\"%Y-%m-%d\");\n\n    const margin = { top: 40, right: 20, bottom: 80, left: 50 };\n\n    const minValue = d3.min(pointsForGraphic, (d) => d.value);\n    const maxValue = d3.max(pointsForGraphic, (d) => d.value);\n\n    // Устанавливаем верхнюю границу оси Y с небольшим запасом\n    const upperLimit = maxValue * 1.1; // Увеличиваем максимальное значение на 10%\n\n    const x = d3\n      .scalePoint()\n      .domain(\n        pointsForGraphic.map((d) =>\n          d.valueDate === \"\" || d.valueDate === null\n            ? \"дата\"\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\n        )\n      )\n      .range([margin.left, width - margin.right])\n      .padding(0);\n\n    // Если type === \"Обратная\", то ось Y будет инвертирована, а верхний предел будет больше\n    const y =\n      type === \"Обратная\"\n        ? d3\n            .scaleLinear()\n            .domain([0, upperLimit]) // Начинаем с 0 для обратного типа\n            .nice()\n            .range([margin.top, height - margin.bottom])\n        : d3\n            .scaleLinear()\n            .domain([0, upperLimit]) // Начинаем с 0 для обычного типа\n            .nice()\n            .range([height - margin.bottom, margin.top]);\n\n    const line = d3\n      .line()\n      .x((d) =>\n        x(\n          d.valueDate === \"\" || d.valueDate === null\n            ? \"дата\"\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\n        )\n      )\n      .y((d) => y(d.value))\n      .defined((d) => d.value !== null);\n\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n\n    const svg = d3\n      .select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const tickValues = pointsForGraphic.map((d) =>\n      d.valueDate === \"\" || d.valueDate === null\n        ? \"дата\"\n        : getDateFormatSatatistic(d.valueDate, typeGraphic)\n    );\n\n    // Получаем значения для горизонтальных линий сетки с использованием y.ticks()\n    const yTickValues = y.ticks(5); // Используем метод ticks() для точных значений\n\n    // Добавляем вертикальные линии сетки\n    svg\n      .selectAll(\".grid-vertical\")\n      .data(tickValues)\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", \"grid-vertical\")\n      .attr(\"x1\", (d) => x(d))\n      .attr(\"x2\", (d) => x(d))\n      .attr(\"y1\", margin.top)\n      .attr(\"y2\", height - margin.bottom)\n      .attr(\"stroke\", \"#4a4a4a\") // Темный цвет для сетки\n      .attr(\"stroke-width\", 1)\n      .attr(\"opacity\", 0.3);\n\n    // Добавляем горизонтальные линии сетки\n    svg\n      .selectAll(\".grid-horizontal\")\n      .data(yTickValues)\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", \"grid-horizontal\")\n      .attr(\"x1\", margin.left)\n      .attr(\"x2\", width - margin.right)\n      .attr(\"y1\", (d) => y(d))\n      .attr(\"y2\", (d) => y(d))\n      .attr(\"stroke\", \"#4a4a4a\") // Темный цвет для сетки\n      .attr(\"stroke-width\", 1)\n      .attr(\"opacity\", 0.3);\n\n    const xAxis = d3.axisBottom(x);\n\n    svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n      .call(xAxis)\n      .selectAll(\"text\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"dx\", \"-10px\")\n      .attr(\"dy\", \"-5px\")\n      .style(\"font-weight\", \"bold\")\n      .style(\"font-size\", \"12px\");\n\n    svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},0)`)\n      .call(d3.axisLeft(y).ticks(5).tickFormat(d3.format(\".2s\"))); // Format Y axis\n\n    pointsForGraphic.forEach((d, i) => {\n      if (i > 0) {\n        const prevValue = pointsForGraphic[i - 1].value;\n        // Reverse the line color logic based on the 'type' prop\n        const color =\n          type === \"Обратная\"\n            ? d.value < prevValue\n              ? \"blue\"\n              : \"red\" // Reverse logic for line color\n            : d.value < prevValue\n            ? \"red\"\n            : \"blue\"; // Normal logic for line color\n\n        svg\n          .append(\"path\")\n          .datum([pointsForGraphic[i - 1], d])\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", color)\n          .attr(\"stroke-width\", 2)\n          .attr(\"d\", line);\n      }\n    });\n\n    const getColor = (value, index) => {\n      if (index > 0) {\n        const prevValue = pointsForGraphic[index - 1].value;\n        // Reverse the color logic for points as well\n        return type === \"Обратная\"\n          ? value < prevValue\n            ? \"blue\"\n            : \"red\" // Reverse logic for points\n          : value < prevValue\n          ? \"red\"\n          : \"blue\"; // Normal logic for points\n      } else {\n        return \"green\";\n      }\n    };\n\n    svg\n      .selectAll(\"circle\")\n      .data(pointsForGraphic)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", (d) =>\n        x(\n          d.valueDate === \"\" || d.valueDate === null\n            ? \"дата\"\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\n        )\n      )\n      .attr(\"cy\", (d) => y(d.value))\n      .attr(\"r\", 5)\n      .attr(\"fill\", (d, i) => getColor(d.value, i)) // Apply the reversed color logic here\n      .on(\"mouseover\", (event, d) => {\n        d3.select(event.currentTarget).attr(\"r\", 7).attr(\"fill\", \"orange\");\n\n        const tooltipX = x(\n          d.valueDate === \"\" || d.valueDate === null\n            ? \"дата\"\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\n        );\n        const tooltipY = y(d.value) - 15;\n\n        // Формируем текст для тултипа\n        const dateText = `Дата: ${\n          d.valueDate === \"\" || d.valueDate === null\n            ? \"дата\"\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\n        }`;\n        const valueText = `Значение: ${d.value}`;\n        const textWidth = Math.max(dateText.length, valueText.length) * 6; // Оценочная ширина в пикселях\n\n        // Ширина тултипа\n        const tooltipWidth = Math.max(120, textWidth + 20);\n        const tooltipHeight = 50;\n\n        // Проверка на выход за границы\n        const isTopOutOfBound = tooltipY - tooltipHeight < margin.top;\n        const isRightOutOfBound =\n          tooltipX + tooltipWidth / 2 > width - margin.right;\n        const isLeftOutOfBound = tooltipX - tooltipWidth / 2 < margin.left;\n\n        let adjustedX = tooltipX;\n        if (isRightOutOfBound)\n          adjustedX = width - margin.right - tooltipWidth / 2;\n        else if (isLeftOutOfBound) adjustedX = margin.left + tooltipWidth / 2;\n\n        const adjustedY = isTopOutOfBound ? tooltipY + tooltipHeight : tooltipY;\n\n        // Получаем цвет точки\n        const pointColor = getColor(d.value, pointsForGraphic.indexOf(d));\n\n        const tooltipGroup = svg\n          .append(\"g\")\n          .attr(\"id\", \"tooltip\")\n          .attr(\"transform\", `translate(${adjustedX}, ${adjustedY})`);\n\n        tooltipGroup\n          .append(\"rect\")\n          .attr(\"x\", -tooltipWidth / 2)\n          .attr(\"y\", isTopOutOfBound ? 0 : -tooltipHeight)\n          .attr(\"width\", tooltipWidth)\n          .attr(\"height\", tooltipHeight)\n          .attr(\"fill\", pointColor) // Используем цвет точки для фона тултипа\n          .attr(\"rx\", 4)\n          .attr(\"ry\", 4);\n\n        tooltipGroup\n          .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"y\", isTopOutOfBound ? 15 : -30)\n          .style(\"font-size\", \"11px\")\n          .style(\"fill\", \"white\")\n          .style(\"font-family\", \"Montserrat, sans-serif\")\n          .text(dateText);\n\n        tooltipGroup\n          .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"y\", isTopOutOfBound ? 35 : -10)\n          .style(\"font-size\", \"11px\")\n          .style(\"fill\", \"white\")\n          .style(\"font-family\", \"Montserrat, sans-serif\")\n          .text(valueText);\n      })\n      .on(\"mouseout\", (event) => {\n        const d = d3.select(event.currentTarget).datum();\n        const index = pointsForGraphic.indexOf(d);\n        d3.select(event.currentTarget)\n          .attr(\"r\", 5)\n          .attr(\"fill\", getColor(d.value, index)); // Apply the reversed color logic here\n        svg.select(\"#tooltip\").remove();\n      });\n  }, [pointsForGraphic]);\n\n  // Для стрелок на графике\n  const handleArrowLeftClick = () => {\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  const handleArrowRightClick = () => {\n    setCount((prevCount) => prevCount - 1);\n  };\n\n  const updateStatisticsData = () => {\n    setPointsForGraphic([]);\n\n    if (!data.length) return;\n\n    if (typeGraphic === \"Ежедневный\") {\n      const dayNow = new Date();\n      const currentWeekday = dayNow.getDay(); // Текущий день недели (0 - Воскресенье, 1 - Понедельник и т.д.)\n\n      // Определяем начальную дату - ближайший предыдущий день `day`, не более 7 дней назад\n      const startDate = new Date(dayNow);\n      let dayDifference;\n\n      if (currentWeekday >= reportDay) {\n        dayDifference = currentWeekday - reportDay;\n      } else {\n        dayDifference = 7 - (reportDay - currentWeekday);\n      }\n\n      startDate.setDate(dayNow.getDate() - dayDifference);\n\n      // Ограничиваем начальную дату максимум 7 днями назад от текущего дня\n      const maxStartDate = new Date(dayNow);\n      maxStartDate.setDate(dayNow.getDate() - 7);\n\n      if (startDate < maxStartDate) {\n        startDate.setTime(maxStartDate.getTime());\n      }\n\n      // Создаем массив всех дат за последние 7 дней\n      const last7Days = [];\n      for (let i = count; i < 7 + count; i++) {\n        const date = new Date(dayNow);\n        date.setDate(dayNow.getDate() - i);\n        last7Days.push(date.toISOString().split(\"T\")[0]);\n      }\n\n      // Группируем данные по дате и фильтруем\n      const dataMap = data.reduce((acc, item) => {\n        const itemDate = item.valueDate.split(\"T\")[0];\n        acc[itemDate] = {\n          ...item,\n          valueDate: itemDate,\n        };\n        return acc;\n      }, {});\n\n      // Создаем массив данных для последних 7 дней, добавляем нулевые значения, если данные отсутствуют\n      const updatedPoints = last7Days.map((date) => {\n        if (dataMap[date] && dataMap[date].isCorrelation !== true) {\n          return dataMap[date];\n        } else {\n          return {\n            id: date,\n            valueDate: date,\n            value: \"\", // Заполняем нулевым значением, если данных за день нет\n            isCorrelation: false,\n          };\n        }\n      });\n\n      const crPoints = updatedPoints.filter((item) => item.value === \"\");\n      const _updatedPoints = updatedPoints.filter((item) => item.value !== \"\");\n\n      setPointsForGraphic([..._updatedPoints, ...crPoints]);\n    }\n\n    if (typeGraphic === \"Ежемесячный\") {\n      // Группируем данные по месяцам и суммируем `valueDate` за каждый месяц\n      const monthlyData = data.reduce((acc, item) => {\n        const itemDate = new Date(item.valueDate);\n        const monthKey = `${itemDate.getFullYear()}-${itemDate.getMonth() + 1}`; // Год-месяц как ключ\n        if (\n          !isNaN(itemDate) &&\n          new Date(new Date().setMonth(new Date().getMonth() - 14 + count)) <\n            itemDate\n        ) {\n          if (item?.isCorrelation === true) {\n            acc[monthKey] = {\n              id: item.id,\n              valueSum: item.value,\n              year: itemDate.getFullYear(),\n              month: itemDate.getMonth() + 1,\n              isCorrelation: true,\n            };\n          }\n\n          // Если месяца ещё нет в acc, создаем начальный объект с valueSum = 0\n          if (!acc[monthKey] || !acc[monthKey]?.isCorrelation) {\n            if (!acc[monthKey]) {\n              acc[monthKey] = {\n                valueSum: 0,\n                year: itemDate.getFullYear(),\n                month: itemDate.getMonth() + 1,\n                isCorrelation: false,\n              };\n            }\n            acc[monthKey].valueSum += item.value;\n          }\n        }\n        return acc;\n      }, {});\n\n      // Формируем новый массив, включающий `valueDate` и `date` (последний день месяца)\n      const updatedMonthlyPoints = [];\n\n      // Для каждого месяца от 14 месяцев назад до текущего добавляем данные\n      for (let i = count; i < 13 + count; i++) {\n        const monthDate = new Date();\n        monthDate.setMonth(monthDate.getMonth() - i);\n        const monthKey = `${monthDate.getFullYear()}-${\n          monthDate.getMonth() + 1\n        }`;\n\n        // Если данных нет для этого месяца, создаем запись с суммой 0\n        if (!monthlyData[monthKey]) {\n          monthlyData[monthKey] = {\n            valueSum: 0,\n            year: monthDate.getFullYear(),\n            month: monthDate.getMonth() + 1,\n            isCorrelation: false,\n          };\n        }\n\n        const lastDayOfMonth = new Date(\n          monthDate.getFullYear(),\n          monthDate.getMonth() + 1,\n          0\n        ); // Получаем последний день месяца\n        const year = lastDayOfMonth.getFullYear();\n        const monthValue = lastDayOfMonth.getMonth() + 1; // Месяцы начинаются с 0\n        const date = lastDayOfMonth.getDate(); // Дата\n\n        updatedMonthlyPoints.push({\n          id: monthlyData[monthKey]?.id || null, // Если id не найден, присваиваем null\n          valueDate: `${year}-${monthValue}-${date}`, // Форматирование в 'год-месяц-день'\n          value: monthlyData[monthKey].valueSum, // Сумма за месяц\n          isCorrelation: monthlyData[monthKey].isCorrelation,\n        });\n      }\n\n      // Сортируем данные по дате, от последнего месяца к первому\n      updatedMonthlyPoints.sort(\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\n      );\n\n      setPointsForGraphic(updatedMonthlyPoints);\n    }\n\n    if (typeGraphic === \"Ежегодовой\") {\n      // Группируем данные по годам и суммируем `valueDate` за каждый год\n      const yearData = data.reduce((acc, item) => {\n        const itemDate = new Date(item.valueDate);\n        const yearKey = `${itemDate.getFullYear()}`;\n        // Проверяем, что дата корректна и меньше чем на 13 лет от текущего года\n        if (\n          !isNaN(itemDate) &&\n          new Date().getFullYear() - 12 < itemDate.getFullYear()\n        ) {\n          if (item?.isCorrelation === true) {\n            acc[yearKey] = {\n              id: item.id,\n              valueSum: item.value,\n              year: itemDate.getFullYear(),\n              isCorrelation: true,\n            };\n          }\n\n          // Если года еще нет в acc, создаем начальный объект с valueSum = 0\n          if (!acc[yearKey] || !acc[yearKey]?.isCorrelation) {\n            if (!acc[yearKey]) {\n              acc[yearKey] = {\n                valueSum: 0,\n                year: itemDate.getFullYear(),\n                isCorrelation: false,\n              };\n            }\n            acc[yearKey].valueSum += item.value;\n          }\n        }\n        return acc;\n      }, {});\n\n      // Формируем новый массив, включающий `valueDate` и `date` (первый день года)\n      const updatedYearPoints = [];\n\n      // Для каждого года от 13 лет назад до текущего добавляем данные\n      for (let i = count; i < 12 + count; i++) {\n        const yearDate = new Date();\n        yearDate.setFullYear(yearDate.getFullYear() - i);\n        const yearKey = `${yearDate.getFullYear()}`;\n\n        // Если данных нет для этого года, создаем запись с суммой 0\n        if (!yearData[yearKey]) {\n          yearData[yearKey] = {\n            valueSum: 0,\n            year: yearDate.getFullYear(),\n            isCorrelation: false,\n          };\n        }\n\n        updatedYearPoints.push({\n          id: yearData[yearKey]?.id || null, // Если id не найден, присваиваем null\n          valueDate: `${yearDate.getFullYear()}-01-01`,\n          value: yearData[yearKey].valueSum, // Сумма за год\n          isCorrelation: yearData[yearKey].isCorrelation,\n        });\n      }\n\n      // Сортируем данные по дате, от последнего года к первому\n      updatedYearPoints.sort(\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\n      );\n\n      setPointsForGraphic(updatedYearPoints);\n    }\n    if (typeGraphic === \"13\" || typeGraphic === \"26\" || typeGraphic === \"52\") {\n      const today = new Date();\n      today.setDate(today.getDate() - count * 7);\n      const end = new Date(today);\n\n      const start = new Date(end);\n      start.setDate(end.getDate() - (Number(typeGraphic) + 1) * 7);\n\n      const selectedDayOfWeek = parseInt(reportDay);\n      const result = [];\n\n      let currentDate = new Date(start);\n      let currentSum = 0;\n\n      // Перемещаем currentDate на первый выбранный день недели\n      while (currentDate.getDay() !== selectedDayOfWeek) {\n        currentDate.setDate(currentDate.getDate() + 1);\n      }\n\n      // Цикл по неделям\n      while (currentDate <= end) {\n        const nextDate = new Date(currentDate);\n        nextDate.setDate(currentDate.getDate() + 7);\n\n        // Фильтруем и суммируем значения для текущей недели\n        currentSum = data\n          .filter((item) => {\n            const itemDate = new Date(item.valueDate);\n            return (\n              currentDate <= itemDate &&\n              itemDate < nextDate &&\n              item.isCorrelation !== true\n            );\n          })\n          .reduce((sum, item) => sum + item.value, 0);\n\n        // Создаем новую дату на день позже\n        const valueDate = new Date(nextDate.getTime() + 24 * 60 * 60 * 1000);\n\n        // Проверяем, что valueDate не позже сегодняшней даты\n        if (valueDate <= today) {\n          result.push({\n            value: currentSum,\n            valueDate: valueDate.toISOString().split(\"T\")[0],\n          });\n        }\n\n        currentDate = nextDate; // Переходим к следующей неделе\n      }\n\n      setPointsForGraphic(\n        result.sort((a, b) => new Date(b.valueDate) - new Date(a.valueDate))\n      );\n    }\n  };\n\n  useEffect(() => {\n    updateStatisticsData();\n  }, [count]);\n\n\n  \n  return (\n    <div className={classes.modal}>\n      <div className={classes.modalWindow}>\n        <img\n          src={exitModal}\n          alt=\"exitModal\"\n          onClick={() => exit()}\n          className={classes.exit}\n        />\n\n        <div className={classes.item_rowSVG}>\n          <span>{name}</span>\n\n          <div className={classes.row_svg_arrow}>\n            <svg ref={svgRef}></svg>\n            <div className={classes.blockArrrow}>\n              <div className={classes.statisticsArrow}>\n                <img\n                  src={arrowLeft}\n                  alt=\"arrowLeft\"\n                  onClick={handleArrowLeftClick}\n                />\n              </div>\n              <div className={classes.statisticsArrow}>\n                <img\n                  src={arrowRight}\n                  alt=\"arrowRight\"\n                  onClick={handleArrowRightClick}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className={classes.item_rowBtns}>\n          {buttonTypes.map((item) => (\n            <button\n              key={type}\n              className={`${classes.btn} ${\n                typeGraphic === item.type ? classes.btn_active : \"\"\n              }`}\n              onClick={() => handleTypeGraphicButtonClick(item.type)}\n            >\n              {item.value}\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ModalStatistic;\n","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"PanelDragDrop_block__40DIx\",\"name\":\"PanelDragDrop_name__vRCNB\",\"button\":\"PanelDragDrop_button__Tz3-W\",\"active\":\"PanelDragDrop_active__1B0I7\"};","import React from \"react\";\nimport classes from \"./PanelDragDrop.module.css\";\nimport setting from \"@image/setting.svg\";\nimport exitModal from \"@image/exitModal.svg\";\n\nexport default function PanelDragDrop({ name, openSetting, onClick, deletePanel, isActive }) {\n  return (\n    <div className={`${classes.block} ${isActive ? classes.active : \"\"}`} onClick = {onClick}>\n      <div className={classes.name}>\n        <span>{name}</span>\n      </div>\n      <div className={classes.button}>\n        <img src={setting} alt=\"setting\" onClick={openSetting} />\n        <img src={exitModal} alt=\"exitModal\" onClick={deletePanel} />\n      </div>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalSetting_modal__0tUgQ\",\"modalWindow\":\"ModalSetting_modalWindow__Fis+q\",\"exit\":\"ModalSetting_exit__+uf7-\",\"wrapper\":\"ModalSetting_wrapper__Al+Pq\",\"header\":\"ModalSetting_header__0XbyO\",\"save\":\"ModalSetting_save__BUTtr\",\"blockSelect\":\"ModalSetting_blockSelect__Gk8W1\"};","import React, { useState, useEffect } from \"react\";\nimport classes from \"./ModalSetting.module.css\";\nimport exitModal from \"@image/exitModal.svg\";\nimport Blacksavetmp from \"@image/Blacksavetmp.svg\";\nimport Input from \"@Custom/Input/Input\";\nimport Select from \"@Custom/Select/Select\";\nimport ButtonImage from \"@Custom/buttonImage/ButtonImage\";\nimport TableCheckBox from \"@Custom/tableCheckBox/TableCheckBox\";\nimport {useStatisticsHook} from \"@hooks\";\n\nexport default function ModalSetting({\n  exit,\n  currentControlPanel,\n  updateControlPanel,\n  statisticsIdsInPanel,\n}) {\n  const panelTypes = [\n    { id: \"Личная\", type: \"Личная\" },\n    { id: \"Глобальная\", type: \"Глобальная\" },\n  ];\n\n  const graphicTypes = [\n    { id: \"Ежедневный\", value: \"Ежедневный\", view: \"Ежедневный\" },\n    { id: \"Ежемесячный\", value: \"Ежемесячный\", view: \"Ежемесячный\" },\n    { id: \"Ежегодовой\", value: \"Ежегодовой\", view: \"Ежегодовой\" },\n    { id: \"13\", value: \"13\", view: \"13 недель\" },\n    { id: \"26\", value: \"26\", view: \"26 недель\" },\n    { id: \"52\", value: \"52\", view: \"52 недели\" },\n  ];\n\n  const [oldPanelName, setOldPanelName] = useState(\"\");\n  const [panelName, setPanelName] = useState(\"\");\n  const [panelType, setPanelType] = useState(\"\");\n  const [graphType, setGraphType] = useState(\"\");\n  const [statisticsChecked, setStatisticsChecked] = useState([]);\n\n  const {\n    statistics,\n    isLoadingGetStatistics,\n    isFetchingGetStatistics,\n    isErrorGetStatistics,\n  } = useStatisticsHook({ statisticData: false });\n\n  const saveUpdateControlPanel = async () => {\n    const Data = {};\n\n    Data.statisticIds = statisticsChecked;\n\n    if (oldPanelName !== panelName) {\n      Data.panelName = panelName;\n    }\n    if (currentControlPanel.panelType !== panelType) {\n      Data.panelType = panelType;\n    }\n    if (currentControlPanel.graphType !== graphType) {\n      Data.graphType = graphType;\n    }\n    await updateControlPanel({\n      ...Data,\n      id: currentControlPanel.id,\n    })\n      .unwrap()\n      .then(()=> {\n        exit();\n      })\n      .catch((error) => {\n        console.error(\"Ошибка:\", JSON.stringify(error, null, 2));\n      });\n  };\n\n  const handleChecboxChange = (id) => {\n    setStatisticsChecked((prev) => {\n      if (prev.includes(id)) {\n        return prev.filter((item) => item !== id);\n      } else {\n        return [...prev, id];\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (currentControlPanel) {\n      setPanelName(\n        currentControlPanel.isNameChanged ? currentControlPanel.panelName : `${currentControlPanel.panelName} ${currentControlPanel.controlPanelNumber}`\n      );\n      setOldPanelName(\n        currentControlPanel.isNameChanged ? currentControlPanel.panelName : `${currentControlPanel.panelName} ${currentControlPanel.controlPanelNumber}`\n      );\n      setPanelType(currentControlPanel.panelType);\n      setGraphType(currentControlPanel.graphType);\n    }\n    if (statisticsIdsInPanel) {\n      setStatisticsChecked(statisticsIdsInPanel);\n    }\n  }, [currentControlPanel, statisticsIdsInPanel]);\n\n  return (\n    <div className={classes.modal}>\n      <div className={classes.modalWindow}>\n        <img\n          src={exitModal}\n          alt=\"exitModal\"\n          onClick={exit}\n          className={classes.exit}\n        />\n        <div className={classes.wrapper}>\n          <div className={classes.header}>\n            <div className={classes.save}>\n              <ButtonImage\n                name={\"сохранить\"}\n                icon={Blacksavetmp}\n                onClick={saveUpdateControlPanel}\n              ></ButtonImage>\n            </div>\n            <Input\n              name={\"Название панели\"}\n              value={`${panelName}`}\n              onChange={setPanelName}\n            ></Input>\n            <div className={classes.blockSelect}>\n              <Select\n                name={\"Тип панели\"}\n                value={panelType}\n                onChange={setPanelType}\n                array={panelTypes}\n                arrayItem={\"type\"}\n              ></Select>\n              <Select\n                name={\"Тип графиков\"}\n                value={graphType}\n                onChange={setGraphType}\n                array={graphicTypes}\n                arrayItem={\"view\"}\n              ></Select>\n            </div>\n          </div>\n\n          <TableCheckBox\n            nameTable={\"Прикрепленные статистики\"}\n            array={statistics}\n            arrayItem={\"name\"}\n            arrayCheked={statisticsChecked}\n            handleChecboxChange={handleChecboxChange}\n          ></TableCheckBox>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"graphic\":\"CardStatistic_graphic__UhFPv\"};","import React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport classes from \"./CardStatistic.module.css\";\nimport getDateFormatSatatistic from \"@Custom/Function/getDateFormatStatistic\";\n\nexport default function CardStatistic({\n  name,\n  data,\n  typeGraphic,\n  type,\n  reportDay,\n  // Для модального окна\n  setOpenModalStatistic,\n  setModalStatisticName,\n  setModalStatisticDatas,\n}) {\n  const svgRef = useRef();\n\n  const [width, setWidth] = useState(300);\n  const [height, setHeight] = useState(340);\n\n  const [pointsForGraphic, setPointsForGraphic] = useState([]);\n\n  // Для клика по карточке\n  const [isDragging, setIsDragging] = useState(false);\n  const handlePointerDown = (event) => {\n    setIsDragging(false); // Сбрасываем флаг перетаскивания\n  };\n\n  const handlePointerMove = () => {\n    setIsDragging(true); // Устанавливаем флаг перетаскивания, если есть движение\n  };\n\n  const handlePointerUp = () => {\n    if (!isDragging) {\n      // Если не было движения, считаем это кликом\n      setOpenModalStatistic(true);\n      setModalStatisticName(name);\n      setModalStatisticDatas(data);\n    }\n  };\n\n  useEffect(() => {\n    if (typeGraphic === \"Ежедневный\") {\n      const dayNow = new Date();\n      const currentWeekday = dayNow.getDay(); // Текущий день недели (0 - Воскресенье, 1 - Понедельник и т.д.)\n\n      // Определяем начальную дату - ближайший предыдущий день `day`, не более 7 дней назад\n      const startDate = new Date(dayNow);\n      let dayDifference;\n\n      if (currentWeekday >= reportDay) {\n        dayDifference = currentWeekday - reportDay;\n      } else {\n        dayDifference = 7 - (reportDay - currentWeekday);\n      }\n\n      startDate.setDate(dayNow.getDate() - dayDifference);\n\n      // Ограничиваем начальную дату максимум 7 днями назад от текущего дня\n      const maxStartDate = new Date(dayNow);\n      maxStartDate.setDate(dayNow.getDate() - 7);\n\n      if (startDate < maxStartDate) {\n        startDate.setTime(maxStartDate.getTime());\n      }\n\n      // Создаем массив всех дат за последние 7 дней\n      const last7Days = [];\n      for (let i = 0; i < 7 ; i++) {\n        const date = new Date(dayNow);\n        date.setDate(dayNow.getDate() - i);\n        last7Days.push(date.toISOString().split(\"T\")[0]);\n      }\n\n      // Группируем данные по дате и фильтруем\n      const dataMap = data.reduce((acc, item) => {\n        const itemDate = item.valueDate.split(\"T\")[0];\n        acc[itemDate] = {\n          ...item,\n          valueDate: itemDate,\n        };\n        return acc;\n      }, {});\n\n      // Создаем массив данных для последних 7 дней, добавляем нулевые значения, если данные отсутствуют\n      const updatedPoints = last7Days.map((date) => {\n        if (dataMap[date] && dataMap[date].isCorrelation !== true) {\n          return dataMap[date];\n        } else {\n          return {\n            id: date,\n            valueDate: date,\n            value: \"\", // Заполняем нулевым значением, если данных за день нет\n            isCorrelation: false,\n          };\n        }\n      });\n\n      const crPoints = updatedPoints.filter((item) => item.value === \"\");\n      const _updatedPoints = updatedPoints.filter((item) => item.value !== \"\");\n\n      setPointsForGraphic([..._updatedPoints, ...crPoints]);\n    }\n\n\n    if (typeGraphic === \"Ежемесячный\") {\n      // Группируем данные по месяцам и суммируем `valueDate` за каждый месяц\n      const monthlyData = data.reduce((acc, item) => {\n        const itemDate = new Date(item.valueDate);\n        const monthKey = `${itemDate.getFullYear()}-${itemDate.getMonth() + 1}`; // Год-месяц как ключ\n        if (\n          !isNaN(itemDate) &&\n          new Date(new Date().setMonth(new Date().getMonth() - 13)) < itemDate\n        ) {\n          if (item?.isCorrelation === true) {\n            acc[monthKey] = {\n              id: item.id,\n              valueSum: item.value,\n              year: itemDate.getFullYear(),\n              month: itemDate.getMonth() + 1,\n              isCorrelation: true,\n            };\n          }\n\n          // Если месяца ещё нет в acc, создаем начальный объект с valueSum = 0\n          if (!acc[monthKey] || !acc[monthKey]?.isCorrelation) {\n            if (!acc[monthKey]) {\n              acc[monthKey] = {\n                valueSum: 0,\n                year: itemDate.getFullYear(),\n                month: itemDate.getMonth() + 1,\n                isCorrelation: false,\n              };\n            }\n            acc[monthKey].valueSum += item.value;\n          }\n        }\n        return acc;\n      }, {});\n\n      // Формируем новый массив, включающий `valueDate` и `date` (последний день месяца)\n      const updatedMonthlyPoints = [];\n\n      // Для каждого месяца от 14 месяцев назад до текущего добавляем данные\n      for (let i = 0; i < 13; i++) {\n        const monthDate = new Date();\n        monthDate.setMonth(monthDate.getMonth() - i);\n        const monthKey = `${monthDate.getFullYear()}-${\n          monthDate.getMonth() + 1\n        }`;\n\n        // Если данных нет для этого месяца, создаем запись с суммой 0\n        if (!monthlyData[monthKey]) {\n          monthlyData[monthKey] = {\n            valueSum: 0,\n            year: monthDate.getFullYear(),\n            month: monthDate.getMonth() + 1,\n            isCorrelation: false,\n          };\n        }\n\n        const lastDayOfMonth = new Date(\n          monthDate.getFullYear(),\n          monthDate.getMonth() + 1,\n          0\n        ); // Получаем последний день месяца\n        const year = lastDayOfMonth.getFullYear();\n        const monthValue = lastDayOfMonth.getMonth() + 1; // Месяцы начинаются с 0\n        const date = lastDayOfMonth.getDate(); // Дата\n\n        updatedMonthlyPoints.push({\n          id: monthlyData[monthKey]?.id || null, // Если id не найден, присваиваем null\n          valueDate: `${year}-${monthValue}-${date}`,\n          value: monthlyData[monthKey].valueSum, // Сумма за месяц\n          isCorrelation: monthlyData[monthKey].isCorrelation,\n        });\n      }\n\n      // Сортируем данные по дате, от последнего месяца к первому\n      updatedMonthlyPoints.sort(\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\n      );\n\n      setPointsForGraphic(updatedMonthlyPoints);\n    }\n\n    if (typeGraphic === \"Ежегодовой\") {\n      // Группируем данные по годам и суммируем `valueDate` за каждый год\n      const yearData = data.reduce((acc, item) => {\n        const itemDate = new Date(item.valueDate);\n        const yearKey = `${itemDate.getFullYear()}`;\n        // Проверяем, что дата корректна и меньше чем на 13 лет от текущего года\n        if (\n          !isNaN(itemDate) &&\n          new Date().getFullYear() - 12 < itemDate.getFullYear()\n        ) {\n          if (item?.isCorrelation === true) {\n            acc[yearKey] = {\n              id: item.id,\n              valueSum: item.value,\n              year: itemDate.getFullYear(),\n              isCorrelation: true,\n            };\n          }\n\n          // Если года еще нет в acc, создаем начальный объект с valueSum = 0\n          if (!acc[yearKey] || !acc[yearKey]?.isCorrelation) {\n            if (!acc[yearKey]) {\n              acc[yearKey] = {\n                valueSum: 0,\n                year: itemDate.getFullYear(),\n                isCorrelation: false,\n              };\n            }\n            acc[yearKey].valueSum += item.value;\n          }\n        }\n        return acc;\n      }, {});\n\n      // Формируем новый массив, включающий `valueDate` и `date` (первый день года)\n      const updatedYearPoints = [];\n\n      // Для каждого года от 13 лет назад до текущего добавляем данные\n      for (let i = 0; i < 12; i++) {\n        const yearDate = new Date();\n        yearDate.setFullYear(yearDate.getFullYear() - i);\n        const yearKey = `${yearDate.getFullYear()}`;\n\n        // Если данных нет для этого года, создаем запись с суммой 0\n        if (!yearData[yearKey]) {\n          yearData[yearKey] = {\n            valueSum: 0,\n            year: yearDate.getFullYear(),\n            isCorrelation: false,\n          };\n        }\n\n        updatedYearPoints.push({\n          id: yearData[yearKey]?.id || null, // Если id не найден, присваиваем null\n          valueDate: `${yearDate.getFullYear()}-01-01`,\n          value: yearData[yearKey].valueSum, // Сумма за год\n          isCorrelation: yearData[yearKey].isCorrelation,\n        });\n      }\n\n      // Сортируем данные по дате, от последнего года к первому\n      updatedYearPoints.sort(\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\n      );\n\n      setPointsForGraphic(updatedYearPoints);\n    }\n    if (typeGraphic === \"13\" || typeGraphic === \"26\" || typeGraphic === \"52\") {\n      const today = new Date();\n      const end = new Date(today);\n      const start = new Date();\n      start.setDate(today.getDate() - (Number(typeGraphic) + 1) * 7);\n\n      const selectedDayOfWeek = parseInt(reportDay);\n      if (isNaN(selectedDayOfWeek)) {\n        throw new Error(\"selectedDayOfWeek должен быть числом.\");\n      }\n\n      const result = [];\n      let currentDate = new Date(start);\n\n      // Перемещаем currentDate на первый выбранный день недели\n      while (currentDate.getDay() !== selectedDayOfWeek) {\n        currentDate.setDate(currentDate.getDate() + 1);\n      }\n\n      // Цикл по неделям\n      while (currentDate <= end) {\n        const nextDate = new Date(currentDate);\n        nextDate.setDate(currentDate.getDate() + 7);\n\n        // Фильтруем и суммируем значения для текущей недели\n        const currentSum = data\n          .filter((item) => {\n            const itemDate = new Date(item.valueDate);\n            const isValid =\n              currentDate <= itemDate &&\n              itemDate < nextDate &&\n              item.isCorrelation !== true;\n\n            return isValid;\n          })\n          .reduce((sum, item) => sum + item.value, 0);\n\n        // Создаем новую дату на день позже\n        const valueDate = new Date(nextDate.getTime() + 24 * 60 * 60 * 1000);\n\n        // Проверяем, что valueDate не позже сегодняшней даты\n        if (valueDate <= today) {\n          result.push({\n            value: currentSum,\n            valueDate: valueDate.toISOString().split(\"T\")[0],\n          });\n        }\n\n        currentDate = nextDate; // Переходим к следующей неделе\n      }\n\n      setPointsForGraphic(\n        result.sort((a, b) => new Date(b.valueDate) - new Date(a.valueDate))\n      );\n    }\n  }, [data, typeGraphic]);\n\n  useEffect(() => {\n    pointsForGraphic?.sort(\n      (a, b) => new Date(a.valueDate) - new Date(b.valueDate)\n    );\n\n    const margin = { top: 20, right: 20, bottom: 40, left: 20 };\n\n    const minValue = d3.min(pointsForGraphic, (d) => d.value);\n    const maxValue = d3.max(pointsForGraphic, (d) => d.value);\n\n    // Устанавливаем верхнюю границу оси Y с небольшим запасом\n    const upperLimit = maxValue * 1.1; // Увеличиваем максимальное значение на 10%\n\n    const x = d3\n      .scalePoint()\n      .domain(\n        pointsForGraphic.map((d) =>\n          d.valueDate === \"\" || d.valueDate === null\n            ? \"дата\"\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\n        )\n      )\n      .range([margin.left, width - margin.right])\n      .padding(0);\n\n    // Если type === \"Обратная\", то ось Y будет инвертирована, а верхний предел будет больше\n    const y =\n      type === \"Обратная\"\n        ? d3\n            .scaleLinear()\n            .domain([0, upperLimit]) // Начинаем с 0 для обратного типа\n            .nice()\n            .range([margin.top, height - margin.bottom])\n        : d3\n            .scaleLinear()\n            .domain([0, upperLimit]) // Начинаем с 0 для обычного типа\n            .nice()\n            .range([height - margin.bottom, margin.top]);\n\n    const line = d3\n      .line()\n      .x((d) =>\n        x(\n          d.valueDate === \"\" || d.valueDate === null\n            ? \"дата\"\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\n        )\n      )\n      .y((d) => y(d.value))\n      .defined((d) => d.value !== null);\n\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n\n    const svg = d3\n      .select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const tickValues = pointsForGraphic.map((d) =>\n      d.valueDate === \"\" || d.valueDate === null\n        ? \"дата\"\n        : getDateFormatSatatistic(d.valueDate, typeGraphic)\n    );\n\n    // Получаем значения для горизонтальных линий сетки с использованием y.ticks()\n    const yTickValues = y.ticks(5); // Используем метод ticks() для точных значений\n\n    // Добавляем вертикальные линии сетки\n    svg\n      .selectAll(\".grid-vertical\")\n      .data(tickValues)\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", \"grid-vertical\")\n      .attr(\"x1\", (d) => x(d))\n      .attr(\"x2\", (d) => x(d))\n      .attr(\"y1\", margin.top)\n      .attr(\"y2\", height - margin.bottom)\n      .attr(\"stroke\", \"#4a4a4a\") // Темный цвет для сетки\n      .attr(\"stroke-width\", 1)\n      .attr(\"opacity\", 0.3);\n\n    // Добавляем горизонтальные линии сетки\n    svg\n      .selectAll(\".grid-horizontal\")\n      .data(yTickValues)\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", \"grid-horizontal\")\n      .attr(\"x1\", margin.left)\n      .attr(\"x2\", width - margin.right)\n      .attr(\"y1\", (d) => y(d))\n      .attr(\"y2\", (d) => y(d))\n      .attr(\"stroke\", \"#4a4a4a\") // Темный цвет для сетки\n      .attr(\"stroke-width\", 1)\n      .attr(\"opacity\", 0.3);\n\n    const xAxis = d3\n      .axisBottom(x)\n      .tickFormat(() => \"\")\n      .tickSize(0);\n\n    svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n      .call(xAxis)\n      .selectAll(\"text\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"dx\", \"-10px\")\n      .attr(\"dy\", \"-5px\")\n      .style(\"font-weight\", \"bold\")\n      .style(\"font-size\", \"12px\");\n\n    const yAxis = d3\n      .axisLeft(y)\n      .tickFormat(() => \"\")\n      .tickSize(0);\n\n    svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},0)`)\n      .call(yAxis);\n\n    pointsForGraphic.forEach((d, i) => {\n      if (i > 0) {\n        const prevValue = pointsForGraphic[i - 1].value;\n        // Reverse the line color logic based on the 'type' prop\n        const color =\n          type === \"Обратная\"\n            ? d.value < prevValue\n              ? \"blue\"\n              : \"red\" // Reverse logic for line color\n            : d.value < prevValue\n            ? \"red\"\n            : \"blue\"; // Normal logic for line color\n\n        svg\n          .append(\"path\")\n          .datum([pointsForGraphic[i - 1], d])\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", color)\n          .attr(\"stroke-width\", 2)\n          .attr(\"d\", line);\n      }\n    });\n\n    const getColor = (value, index) => {\n      if (index > 0) {\n        const prevValue = pointsForGraphic[index - 1].value;\n        // Reverse the color logic for points as well\n        return type === \"Обратная\"\n          ? value < prevValue\n            ? \"blue\"\n            : \"red\" // Reverse logic for points\n          : value < prevValue\n          ? \"red\"\n          : \"blue\"; // Normal logic for points\n      } else {\n        return \"blue\";\n      }\n    };\n\n    svg\n      .selectAll(\"circle\")\n      .data(pointsForGraphic)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", (d) =>\n        x(\n          d.valueDate === \"\" || d.valueDate === null\n            ? \"дата\"\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\n        )\n      )\n      .attr(\"cy\", (d) => y(d.value))\n      .attr(\"r\", 5)\n      .attr(\"fill\", (d, i) => getColor(d.value, i)) // Apply the reversed color logic here\n      .on(\"mouseover\", (event, d) => {\n        d3.select(event.currentTarget).attr(\"r\", 7).attr(\"fill\", \"orange\");\n\n        const tooltipX = x(\n          d.valueDate === \"\" || d.valueDate === null\n            ? \"дата\"\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\n        );\n        const tooltipY = y(d.value) - 15;\n\n        // Формируем текст для тултипа\n        const dateText = `Дата: ${\n          d.valueDate === \"\" || d.valueDate === null\n            ? \"дата\"\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\n        }`;\n        const valueText = `Значение: ${d.value}`;\n        const textWidth = Math.max(dateText.length, valueText.length) * 6; // Оценочная ширина в пикселях\n\n        // Ширина тултипа\n        const tooltipWidth = Math.max(120, textWidth + 20);\n        const tooltipHeight = 50;\n\n        // Проверка на выход за границы\n        const isTopOutOfBound = tooltipY - tooltipHeight < margin.top;\n        const isRightOutOfBound =\n          tooltipX + tooltipWidth / 2 > width - margin.right;\n        const isLeftOutOfBound = tooltipX - tooltipWidth / 2 < margin.left;\n\n        let adjustedX = tooltipX;\n        if (isRightOutOfBound)\n          adjustedX = width - margin.right - tooltipWidth / 2;\n        else if (isLeftOutOfBound) adjustedX = margin.left + tooltipWidth / 2;\n\n        const adjustedY = isTopOutOfBound ? tooltipY + tooltipHeight : tooltipY;\n\n        // Получаем цвет точки\n        const pointColor = getColor(d.value, pointsForGraphic.indexOf(d));\n\n        const tooltipGroup = svg\n          .append(\"g\")\n          .attr(\"id\", \"tooltip\")\n          .attr(\"transform\", `translate(${adjustedX}, ${adjustedY})`);\n\n        tooltipGroup\n          .append(\"rect\")\n          .attr(\"x\", -tooltipWidth / 2)\n          .attr(\"y\", isTopOutOfBound ? 0 : -tooltipHeight)\n          .attr(\"width\", tooltipWidth)\n          .attr(\"height\", tooltipHeight)\n          .attr(\"fill\", pointColor) // Используем цвет точки для фона тултипа\n          .attr(\"rx\", 4)\n          .attr(\"ry\", 4);\n\n        tooltipGroup\n          .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"y\", isTopOutOfBound ? 15 : -30)\n          .style(\"font-size\", \"11px\")\n          .style(\"fill\", \"white\")\n          .style(\"font-family\", \"Montserrat, sans-serif\")\n          .text(dateText);\n\n        tooltipGroup\n          .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"y\", isTopOutOfBound ? 35 : -10)\n          .style(\"font-size\", \"11px\")\n          .style(\"fill\", \"white\")\n          .style(\"font-family\", \"Montserrat, sans-serif\")\n          .text(valueText);\n      })\n      .on(\"mouseout\", (event) => {\n        const d = d3.select(event.currentTarget).datum();\n        const index = pointsForGraphic.indexOf(d);\n        d3.select(event.currentTarget)\n          .attr(\"r\", 5)\n          .attr(\"fill\", getColor(d.value, index)); // Apply the reversed color logic here\n        svg.select(\"#tooltip\").remove();\n      });\n  }, [pointsForGraphic]);\n\n  return (\n    <div\n      className={classes.graphic}\n      onPointerDown={handlePointerDown}\n      onPointerMove={handlePointerMove}\n      onPointerUp={handlePointerUp}\n    >\n      <span>{name}</span>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useSortable } from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport CardStatistic from \"../CardStatistic\";\n\nexport default function SortableCard({\n    id,\n    item,\n    type,\n    typeGraphic,\n    reportDay,\n    setOpenModalStatistic,\n    setModalStatisticName,\n    setModalStatisticDatas,\n  }) {\n  const { attributes, listeners, setNodeRef, transform, transition } =\n    useSortable({ id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n  return (\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n      <CardStatistic\n        name={item.name}\n        data={[...item.statisticDatas]}\n        type={type}\n        typeGraphic={typeGraphic}\n        reportDay={reportDay}\n        setOpenModalStatistic={setOpenModalStatistic}\n        setModalStatisticName={setModalStatisticName}\n        setModalStatisticDatas={setModalStatisticDatas}\n      />\n    </div>\n  );\n}\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport classes from \"./ControlPanel.module.css\";\nimport Headers from \"@Custom/Headers/Headers\";\nimport BottomHeaders from \"@Custom/Headers/BottomHeaders/BottomHeaders\";\n\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { useControlPanel } from \"@hooks\";\nimport { usePostsHook } from \"@hooks\";\nimport { ModalSelectRadio } from \"@Custom/modalSelectRadio/ModalSelectRadio\";\nimport { useModalSelectRadio } from \"@hooks\";\nimport ModalWindow from \"@Custom/ModalWindow\";\nimport HandlerMutation from \"@Custom/HandlerMutation.jsx\";\nimport HandlerQeury from \"@Custom/HandlerQeury.jsx\";\n\nimport ModalStatistic from \"./GraphicStatistics/modal/ModalStatistic\";\nimport PanelDragDrop from \"./panelDragDrop/PanelDragDrop\";\nimport ModalSetting from \"./modalSetting/ModalSetting\";\nimport SortableCard from \"./GraphicStatistics/card/sortable/SortableCard\";\n\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from \"@dnd-kit/core\";\nimport {\n  SortableContext,\n  arrayMove,\n  sortableKeyboardCoordinates,\n  rectSortingStrategy,\n} from \"@dnd-kit/sortable\";\n\nimport {\n  saveToIndexedDB,\n  deleteFromIndexedDB,\n  loadFromIndexedDB,\n} from \"@utils/src/index.js\";\nimport usePanelToStatisticsHook from \"@hooks/usePanelToStatisticsHook\";\nimport { debounce, isEqual } from \"lodash\";\n\n\nexport default function ControlPanel() {\n  const [openModalSetting, setOpenModalSetting] = useState(false);\n  const [openModalCreate, setOpenModalCreate] = useState(false);\n  const [openModalDelete, setOpenModalDelete] = useState(false);\n\n  const [selectedControlPanelId, setSelectedControlPanelId] = useState();\n  const [arrayAllControlPanel, setArrayAllControlPanel] = useState([]);\n\n  const [cards, setCards] = useState([]);\n\n  // Для модального окна статистики\n  const [openModalStatistic, setOpenModalStatistic] = useState(false);\n  const [modalStatisticName, setModalStatisticName] = useState(\"\");\n  const [modalStatisticDatas, setModalStatisticDatas] = useState([]);\n\n  const {\n    reduxSelectedOrganizationId,\n    reduxSelectedOrganizationReportDay,\n\n    // Получение всех панелей по организации\n    allControlPanel,\n    isLoadingGetAllControlPanel,\n    isFetchingGetAllControlPanel,\n    isErrorGetAllControlPanel,\n\n    // Получение панели по id\n    currentControlPanel,\n    statisticsIdsInPanel,\n    statisticsPoints,\n    isLoadingGetontrolPanelId,\n    isFetchingGetontrolPanelId,\n    isErrorGetontrolPanelId,\n\n    // Создание панели\n    postControlPanel,\n    isLoadingPostControlPanelMutation,\n    isSuccessPostControlPanelMutation,\n    isErrorPostControlPanelMutation,\n    ErrorPostControlPanel,\n    localIsResponsePostControlPanelMutation,\n\n    //  Обновление\n    updateControlPanel,\n    isLoadingUpdateControlPanelMutation,\n    isSuccessUpdateControlPanelMutation,\n    isErrorUpdateControlPanelMutation,\n    ErrorUpdateControlPanel,\n    localIsResponseUpdateControlPanelMutation,\n\n    // Удаление статистики\n    deleteControlPanel,\n    isLoadingDeleteControlPanelMutation,\n    isSuccessDeleteControlPanelMutation,\n    isErrorDeleteControlPanelMutation,\n    ErrorDeleteControlPanel,\n    localIsResponseDeleteControlPanelMutation,\n  } = useControlPanel({ selectedControlPanelId });\n\n  const { allPosts, isLoadingGetPosts, isErrorGetPosts } = usePostsHook();\n\n  const {\n    selectedID: selectedPostIdForCreated,\n    selectedName,\n\n    handleRadioChange,\n    handleInputChangeModalSearch,\n\n    filterArraySearchModal,\n    inputSearchModal,\n  } = useModalSelectRadio({ array: allPosts, arrayItem: \"postName\" });\n\n  const getControlPanelId = (id) => {\n    saveToIndexedDB(\n      reduxSelectedOrganizationId,\n      arrayAllControlPanel.map(({ id, orderNumber, panelName }) => ({\n        id,\n        orderNumber,\n        panelName,\n      })),\n      id\n    );\n    console.log(\"getControlPanelId\");\n    setSelectedControlPanelId(id);\n  };\n\n  const openCreate = () => {\n    setOpenModalCreate(true);\n  };\n  const createControlPanel = async () => {\n    await postControlPanel({\n      orderNumber: allControlPanel.length == 0 ? 1 : allControlPanel.length + 1,\n      panelName: `${selectedName} №`,\n      organizationId: reduxSelectedOrganizationId,\n      postId: selectedPostIdForCreated,\n    })\n      .unwrap()\n      .then(() => {\n        setOpenModalCreate(false);\n      })\n      .catch((error) => {\n        console.error(\"Ошибка:\", JSON.stringify(error, null, 2));\n      });\n  };\n  const removeControlPanel = async () => {\n    try {\n      // Удаляем панель управления через API\n      await deleteControlPanel({\n        controlPanelId: selectedControlPanelId,\n      }).unwrap();\n\n      setSelectedControlPanelId();\n      // Закрываем модальное окно\n      setOpenModalDelete(false);\n\n      // Удаляем панель управления из IndexedDB\n      deleteFromIndexedDB(reduxSelectedOrganizationId, selectedControlPanelId)\n        .then(() => {\n          console.log(\n            `Панель управления с id ${selectedControlPanelId} успешно удалена из IndexedDB.`\n          );\n        })\n        .catch((error) => {\n          console.error(\"Ошибка при удалении из IndexedDB:\", error);\n        });\n    } catch (error) {\n      console.error(\n        \"Ошибка при удалении панели управления:\",\n        JSON.stringify(error, null, 2)\n      );\n    }\n  };\n\n  const onDragEnd_ControlPanel = async (result) => {\n    const { source, destination } = result;\n\n    // Если элемент не перемещен в допустимую область, ничего не делаем\n    if (!destination) {\n      return;\n    }\n\n    // Создаем новый массив состояний\n    const updatedState = Array.from(arrayAllControlPanel);\n\n    // Перемещаем элемент\n    const [movedItem] = updatedState.splice(source.index, 1);\n    updatedState.splice(destination.index, 0, movedItem);\n\n    // Обновляем порядковые номера\n    const updatedArray = updatedState.map((item, index) => ({\n      ...item,\n      orderNumber: index + 1,\n    }));\n\n    // Обновляем состояние\n    setArrayAllControlPanel(updatedArray);\n\n    try {\n      // Сохраняем массив в IndexedDB\n      await saveToIndexedDB(\n        reduxSelectedOrganizationId,\n        updatedArray.map(({ id, orderNumber, panelName }) => ({\n          id,\n          orderNumber,\n          panelName,\n        }))\n      );\n\n      console.log(\"Данные успешно сохранены в IndexedDB\");\n    } catch (error) {\n      console.error(\"Ошибка при сохранении данных в IndexedDB:\", error);\n    }\n  };\n\n  const btnYes = () => {\n    removeControlPanel();\n  };\n\n  const btnNo = () => {\n    setOpenModalDelete(false);\n  };\n\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  const {\n    updatePanelToStatisticsUpdateOrderNumbers,\n    isLoadingPanelToStatisticsUpdateOrderNumbersMutation,\n    isSuccessPanelToStatisticsUpdateOrderNumbersMutation,\n    isErrorPanelToStatisticsUpdateOrderNumbersMutation,\n    ErrorPanelToStatisticsUpdateOrderNumbersMutation,\n    resetPanelToStatisticsUpdateOrderNumbersMutation,\n    localIsResponsePanelToStatisticsUpdateOrderNumbersMutation,\n  } = usePanelToStatisticsHook();\n\n  const debouncedUpdate = useCallback(\n    debounce((updatedStatistics) => {\n      updatePanelToStatisticsUpdateOrderNumbers(updatedStatistics);\n    }, 5000),\n    []\n  );\n\n  const handleDragEnd_CardStatstic = (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      setCards((items) => {\n        const oldIndex = items.findIndex((item) => item.id === active.id);\n        const newIndex = items.findIndex((item) => item.id === over.id);\n\n        const newItems = arrayMove(items, oldIndex, newIndex);\n\n        const updatedStatistics = newItems.map((item, index) => ({\n          _id: item.panelToStatisticsId,\n          orderStatisticNumber: index + 1,\n        }));\n\n\n        debouncedUpdate(updatedStatistics);\n\n        return newItems;\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (Object.keys(allControlPanel).length > 0) {\n      loadFromIndexedDB(reduxSelectedOrganizationId, (data) => {\n        if (data.length > 0) {\n          setArrayAllControlPanel(() => {\n            return allControlPanel\n              .map((panel) => {\n                const matchingData = data.find((item) => item.id === panel.id);\n                if (matchingData) {\n                  return {\n                    ...panel,\n                    orderNumber: matchingData.orderNumber,\n                    isActive: matchingData.isActive,\n                  };\n                }\n                return panel;\n              })\n              .sort((a, b) => a.orderNumber - b.orderNumber);\n          });\n        } else {\n          setArrayAllControlPanel(allControlPanel);\n        }\n      });\n    } else {\n      setArrayAllControlPanel(allControlPanel);\n    }\n  }, [allControlPanel]);\n\n // Сброс cards при изменении reduxSelectedOrganizationId\nuseEffect(() => {\n  setCards([]);\n}, [reduxSelectedOrganizationId]);\n\n// Обновление cards при изменении statisticsPoints\nuseEffect(() => {\n  if (statisticsPoints && !isEqual(statisticsPoints, cards)) {\n    setCards(statisticsPoints);\n  }\n}, [statisticsPoints]); \n\n  return (\n    <div className={classes.dialog}>\n      <Headers name={\"панель управления\"}>\n        <BottomHeaders create={openCreate}></BottomHeaders>\n      </Headers>\n\n      <div className={classes.main}>\n        <DragDropContext onDragEnd={onDragEnd_ControlPanel}>\n          <Droppable droppableId=\"panelList\" direction=\"horizontal\">\n            {(provided) => (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                className={classes.droppableContainer}\n              >\n                {arrayAllControlPanel?.map((item, index) => (\n                  <Draggable\n                    key={index}\n                    draggableId={`item-${index}`}\n                    index={index}\n                  >\n                    {(provided) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                      >\n                        <PanelDragDrop\n                          isActive={currentControlPanel.id === item.id}\n                          openSetting={() => setOpenModalSetting(true)}\n                          name={\n                            item.isNameChanged\n                              ? item.panelName\n                              : `${item.panelName} ${item.controlPanelNumber}`\n                          }\n                          onClick={() => getControlPanelId(item.id)}\n                          deletePanel={() => setOpenModalDelete(true)}\n                        ></PanelDragDrop>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n\n        {cards.length > 0 && (\n          <DndContext\n            sensors={sensors}\n            collisionDetection={closestCenter}\n            onDragEnd={handleDragEnd_CardStatstic}\n          >\n            <SortableContext items={cards} strategy={rectSortingStrategy}>\n              <div className={classes.graphics}>\n                {cards.map((item) => (\n                  <SortableCard\n                    key={item.id}\n                    id={item.id}\n                    item={item}\n                    type={\"Прямая\"}\n                    typeGraphic={currentControlPanel.graphType}\n                    reportDay={reduxSelectedOrganizationReportDay}\n                    setOpenModalStatistic={setOpenModalStatistic}\n                    setModalStatisticName={setModalStatisticName}\n                    setModalStatisticDatas={setModalStatisticDatas}\n                  />\n                ))}\n              </div>\n            </SortableContext>\n          </DndContext>\n        )}\n\n        {!isErrorGetontrolPanelId && !isLoadingGetontrolPanelId && !isFetchingGetontrolPanelId && openModalSetting && (\n          <ModalSetting\n            exit={() => setOpenModalSetting(false)}\n            updateControlPanel={updateControlPanel}\n            currentControlPanel={currentControlPanel}\n            statisticsIdsInPanel={statisticsIdsInPanel}\n          ></ModalSetting>\n        )}\n        {!isErrorGetontrolPanelId && !isLoadingGetontrolPanelId && !isFetchingGetontrolPanelId && openModalDelete && (\n          <ModalWindow\n            text={`Вы точно хотите удалить панель управления ${\n              currentControlPanel.isNameChanged\n                ? currentControlPanel.panelName\n                : `${currentControlPanel.panelName} ${currentControlPanel.controlPanelNumber}`\n            }`}\n            close={setOpenModalDelete}\n            btnYes={btnYes}\n            btnNo={btnNo}\n          ></ModalWindow>\n        )}\n        {openModalCreate && (\n          <ModalSelectRadio\n            nameTable={\"Название поста\"}\n            handleSearchValue={inputSearchModal}\n            handleSearchOnChange={handleInputChangeModalSearch}\n            handleRadioChange={handleRadioChange}\n            exit={() => {\n              setOpenModalCreate(false);\n            }}\n            filterArray={filterArraySearchModal}\n            array={allPosts}\n            arrayItem={\"postName\"}\n            selectedItemID={selectedPostIdForCreated}\n            save={createControlPanel}\n          ></ModalSelectRadio>\n        )}\n        {openModalStatistic && (\n          <ModalStatistic\n            data={modalStatisticDatas}\n            name={modalStatisticName}\n            graphicTypeBD={currentControlPanel.graphType}\n            type={\"Прямая\"}\n            exit={() => setOpenModalStatistic(false)}\n            reportDay={reduxSelectedOrganizationReportDay}\n          ></ModalStatistic>\n        )}\n\n        <div className={classes.handler}>\n          <HandlerQeury\n            Loading={isLoadingGetAllControlPanel}\n            Fetching={isFetchingGetAllControlPanel}\n            Error={isErrorGetAllControlPanel}\n          ></HandlerQeury>\n\n          <HandlerQeury\n            Loading={isLoadingGetontrolPanelId}\n            Fetching={isFetchingGetontrolPanelId}\n            Error={isErrorGetontrolPanelId}\n          ></HandlerQeury>\n\n          <HandlerMutation\n            Loading={isLoadingPostControlPanelMutation}\n            Error={\n              isErrorPostControlPanelMutation &&\n              localIsResponsePostControlPanelMutation\n            }\n            Success={\n              isSuccessPostControlPanelMutation &&\n              localIsResponsePostControlPanelMutation\n            }\n            textSuccess={`Панель управления успешно создана.`}\n            textError={\n              ErrorPostControlPanel?.data?.errors?.[0]?.errors?.[0]\n                ? ErrorPostControlPanel.data.errors[0].errors[0]\n                : ErrorPostControlPanel?.data?.message\n            }\n          ></HandlerMutation>\n\n          <HandlerMutation\n            Loading={isLoadingUpdateControlPanelMutation}\n            Error={\n              isErrorUpdateControlPanelMutation &&\n              localIsResponseUpdateControlPanelMutation\n            }\n            Success={\n              isSuccessUpdateControlPanelMutation &&\n              localIsResponseUpdateControlPanelMutation\n            }\n            textSuccess={`Панель управления обновлена.`}\n            textError={\n              ErrorUpdateControlPanel?.data?.errors?.[0]?.errors?.[0]\n                ? ErrorUpdateControlPanel.data.errors[0].errors[0]\n                : ErrorUpdateControlPanel?.data?.message\n            }\n          ></HandlerMutation>\n\n          <HandlerMutation\n            Loading={isLoadingDeleteControlPanelMutation}\n            Error={\n              isErrorDeleteControlPanelMutation &&\n              localIsResponseDeleteControlPanelMutation\n            }\n            Success={\n              isSuccessDeleteControlPanelMutation &&\n              localIsResponseDeleteControlPanelMutation\n            }\n            textSuccess={\"Панель управления удалена\"}\n            textError={\n              ErrorDeleteControlPanel?.data?.errors?.[0]?.errors?.[0]\n                ? ErrorDeleteControlPanel.data.errors[0].errors[0]\n                : ErrorDeleteControlPanel?.data?.message\n            }\n          ></HandlerMutation>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["ButtonAction","_ref","create","update","refUpdate","refCreate","_jsxs","className","classes","wrapper","children","_jsx","ButtonImage","refAction","name","icon","iconAdd","onClick","Blacksavetmp","BottomHeaders","editText","ModalWindow","text","close","btnYes","btnNo","exitBtn","modalDelete","modalDeleteElement","src","exit","alt","exitImage","modalRow1","modalRow2","textBtnYes","textBtnNo","ModalSelectRadio","nameTable","handleSearchValue","handleSearchOnChange","filterArray","array","arrayItem","selectedItemID","handleRadioChange","save","modal","modalWindow","exitModal","header","item1","type","placeholder","value","onChange","search","item2","table","length","map","item","row","id","checked","data","graphicTypeBD","reportDay","svgRef","useRef","width","setWidth","useState","height","setHeight","pointsForGraphic","setPointsForGraphic","typeGraphic","setTypeGraphic","count","setCount","useEffect","updateDimensions","window","innerHeight","addEventListener","removeEventListener","_data$filter","dayNow","Date","currentWeekday","getDay","startDate","dayDifference","setDate","getDate","endDate","allDates","date","push","toISOString","split","filteredData","filter","itemDate","valueDate","isNaN","getTime","isValidStartDate","isValidEndDate","itemDateStr","startDateStr","endDateStr","isCorrelation","_item$valueDate","updatedPoints","_createdPoints","forEach","existingPoint","find","sort","a","b","monthlyData","reduce","acc","monthKey","getFullYear","getMonth","_acc$monthKey","setMonth","valueSum","year","month","updatedMonthlyPoints","i","_monthlyData$monthKey","monthDate","lastDayOfMonth","monthValue","yearData","yearKey","_acc$yearKey","updatedYearPoints","_yearData$yearKey","yearDate","setFullYear","today","end","start","Number","selectedDayOfWeek","parseInt","Error","result","currentDate","console","log","nextDate","currentSum","sum","margin","upperLimit","d3","d","x","domain","getDateFormatSatatistic","range","padding","y","nice","line","defined","current","selectAll","remove","svg","attr","tickValues","yTickValues","ticks","enter","append","xAxis","call","style","tickFormat","prevValue","color","datum","getColor","index","on","event","currentTarget","tooltipX","tooltipY","dateText","valueText","textWidth","Math","max","tooltipWidth","isTopOutOfBound","adjustedX","adjustedY","pointColor","indexOf","tooltipGroup","select","updateStatisticsData","maxStartDate","setTime","last7Days","dataMap","crPoints","_updatedPoints","_acc$monthKey2","_monthlyData$monthKey2","_acc$yearKey2","_yearData$yearKey2","item_rowSVG","row_svg_arrow","ref","blockArrrow","statisticsArrow","arrowLeft","handleArrowLeftClick","prevCount","arrowRight","handleArrowRightClick","item_rowBtns","btn","btn_active","handleTypeGraphicButtonClick","PanelDragDrop","openSetting","deletePanel","isActive","block","active","button","setting","ModalSetting","currentControlPanel","updateControlPanel","statisticsIdsInPanel","oldPanelName","setOldPanelName","panelName","setPanelName","panelType","setPanelType","graphType","setGraphType","statisticsChecked","setStatisticsChecked","statistics","isLoadingGetStatistics","isFetchingGetStatistics","isErrorGetStatistics","useStatisticsHook","statisticData","isNameChanged","controlPanelNumber","async","Data","statisticIds","unwrap","then","catch","error","JSON","stringify","Input","blockSelect","Select","view","TableCheckBox","arrayCheked","handleChecboxChange","prev","includes","CardStatistic","setOpenModalStatistic","setModalStatisticName","setModalStatisticDatas","isDragging","setIsDragging","tickSize","yAxis","graphic","onPointerDown","onPointerMove","handlePointerMove","onPointerUp","handlePointerUp","SortableCard","attributes","listeners","setNodeRef","transform","transition","useSortable","CSS","Transform","toString","statisticDatas","ControlPanel","_ErrorPostControlPane","_ErrorPostControlPane2","_ErrorPostControlPane3","_ErrorPostControlPane4","_ErrorPostControlPane5","_ErrorUpdateControlPa","_ErrorUpdateControlPa2","_ErrorUpdateControlPa3","_ErrorUpdateControlPa4","_ErrorUpdateControlPa5","_ErrorDeleteControlPa","_ErrorDeleteControlPa2","_ErrorDeleteControlPa3","_ErrorDeleteControlPa4","_ErrorDeleteControlPa5","openModalSetting","setOpenModalSetting","openModalCreate","setOpenModalCreate","openModalDelete","setOpenModalDelete","selectedControlPanelId","setSelectedControlPanelId","arrayAllControlPanel","setArrayAllControlPanel","cards","setCards","openModalStatistic","modalStatisticName","modalStatisticDatas","reduxSelectedOrganizationId","reduxSelectedOrganizationReportDay","allControlPanel","isLoadingGetAllControlPanel","isFetchingGetAllControlPanel","isErrorGetAllControlPanel","statisticsPoints","isLoadingGetontrolPanelId","isFetchingGetontrolPanelId","isErrorGetontrolPanelId","postControlPanel","isLoadingPostControlPanelMutation","isSuccessPostControlPanelMutation","isErrorPostControlPanelMutation","ErrorPostControlPanel","localIsResponsePostControlPanelMutation","isLoadingUpdateControlPanelMutation","isSuccessUpdateControlPanelMutation","isErrorUpdateControlPanelMutation","ErrorUpdateControlPanel","localIsResponseUpdateControlPanelMutation","deleteControlPanel","isLoadingDeleteControlPanelMutation","isSuccessDeleteControlPanelMutation","isErrorDeleteControlPanelMutation","ErrorDeleteControlPanel","localIsResponseDeleteControlPanelMutation","useControlPanel","allPosts","isLoadingGetPosts","isErrorGetPosts","usePostsHook","selectedID","selectedPostIdForCreated","selectedName","handleInputChangeModalSearch","filterArraySearchModal","inputSearchModal","useModalSelectRadio","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","updatePanelToStatisticsUpdateOrderNumbers","isLoadingPanelToStatisticsUpdateOrderNumbersMutation","isSuccessPanelToStatisticsUpdateOrderNumbersMutation","isErrorPanelToStatisticsUpdateOrderNumbersMutation","ErrorPanelToStatisticsUpdateOrderNumbersMutation","resetPanelToStatisticsUpdateOrderNumbersMutation","localIsResponsePanelToStatisticsUpdateOrderNumbersMutation","usePanelToStatisticsHook","debouncedUpdate","useCallback","debounce","updatedStatistics","Object","keys","loadFromIndexedDB","panel","matchingData","orderNumber","isEqual","dialog","Headers","openCreate","main","DragDropContext","onDragEnd","source","destination","updatedState","Array","from","movedItem","splice","updatedArray","saveToIndexedDB","_ref2","Droppable","droppableId","direction","provided","droppableProps","innerRef","droppableContainer","Draggable","draggableId","draggableProps","dragHandleProps","getControlPanelId","DndContext","collisionDetection","closestCenter","over","items","oldIndex","findIndex","newIndex","newItems","arrayMove","_id","panelToStatisticsId","orderStatisticNumber","SortableContext","strategy","rectSortingStrategy","graphics","controlPanelId","deleteFromIndexedDB","removeControlPanel","organizationId","postId","ModalStatistic","handler","HandlerQeury","Loading","Fetching","HandlerMutation","Success","textSuccess","textError","errors","message"],"sourceRoot":""}