{"version":3,"file":"static/js/765.3f5391cd.chunk.js","mappings":"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","sources":["webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/BottomHeaders.module.css?e3ba","webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.module.css?2769","UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.jsx","UI/Custom/Headers/BottomHeaders/BottomHeaders.jsx","UI/app/CompanySchema/desktop/schemeСompanies/SchemeСompanies.module.css","UI/app/CompanySchema/desktop/schemeСompanies/elementTree/Node.jsx","UI/app/CompanySchema/desktop/schemeСompanies/SchemeСompanies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"editText\":\"BottomHeaders_editText__6e9Ca\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ButtonAction_wrapper__YWbBU\"};","import React from \"react\";\r\nimport classes from \"./ButtonAction.module.css\";\r\nimport iconAdd from \"../../../../image/iconAdd.svg\";\r\nimport Blacksavetmp from \"../../../../image/Blacksavetmp.svg\";\r\nimport ButtonImage from \"@Custom/buttonImage/ButtonImage\";\r\nexport default function ButtonAction({ create, update, refUpdate, refCreate }) {\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      {create && (\r\n        <ButtonImage\r\n          refAction={refCreate}\r\n          name={\"создать\"}\r\n          icon={iconAdd}\r\n          onClick={create}\r\n        ></ButtonImage>\r\n      )}\r\n\r\n      {update && (\r\n        <ButtonImage\r\n          refAction={refUpdate}\r\n          name={\"обновить\"}\r\n          icon={Blacksavetmp}\r\n          onClick={update}\r\n        ></ButtonImage>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport classes from \"./BottomHeaders.module.css\"\r\nimport ButtonAction from './ButtonAction/ButtonAction'\r\n\r\nexport default function BottomHeaders({children, create, update,  refUpdate, refCreate}) {\r\n  return (\r\n    <div className={classes.editText}>\r\n        {children}\r\n        <ButtonAction create={create} update={update} refUpdate={refUpdate} refCreate={refCreate}></ButtonAction>\r\n    </div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"SchemeСompanies_dialog__A7deL\",\"main\":\"SchemeСompanies_main__FadsK\"};","import React from \"react\";\r\nimport { TreeNode } from \"react-organizational-chart\";\r\nimport { Card, Button } from \"antd\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DrawerUpdateOrganization from \"../../../drawer/drawerForOrganization/DrawerUpdateOrganization\";\r\n\r\nexport default function Node({ organization, allOrganizations, childrenOrg }) {\r\n  const navigate = useNavigate();\r\n  const cardClick = (organizationId) => {\r\n    navigate(`/pomoshnik/postSchema/${organizationId}`);\r\n  };\r\n\r\n  return (\r\n    <TreeNode\r\n      label={\r\n        <Card\r\n          loading={false}\r\n          style={{\r\n            display: \"inline-block\",\r\n            width: \"300px\",\r\n            height: \"175px\",\r\n            backgroundColor: organization.organizationColor,\r\n            // boxShadow: \"0px 0px 4px 0px rgba(0, 0, 0, 0.25)\",\r\n            boxShadow: \"rgba(0, 0, 0, 0.1) 0px 4px 12px\",\r\n          }}\r\n        >\r\n          <DrawerUpdateOrganization\r\n            organizationId={organization.id}\r\n            allOrganizations={allOrganizations}\r\n          ></DrawerUpdateOrganization>\r\n\r\n          <Button  data-tour = \"click-companyName\" type=\"link\" onClick={() => cardClick(organization.id)}>\r\n            {organization.organizationName}\r\n          </Button>\r\n        </Card>\r\n      }\r\n    >\r\n      {/* Рекурсивно отображаем дочерние элементы */}\r\n      {childrenOrg && childrenOrg.length > 0\r\n        ? childrenOrg.map((child) => (\r\n            <Node\r\n              key={child.id}\r\n              organization={child}\r\n              allOrganizations={allOrganizations}\r\n              childrenOrg={child.children}\r\n            />\r\n          ))\r\n        : null}\r\n    </TreeNode>\r\n  );\r\n}","import React, { useState, useEffect, useRef } from \"react\";\r\nimport classes from \"./SchemeСompanies.module.css\";\r\n\r\nimport _ from \"lodash\";\r\n\r\nimport { Card } from \"antd\";\r\nimport { Tree, TreeNode } from \"react-organizational-chart\";\r\n\r\nimport Headers from \"@Custom/Headers/Headers\";\r\nimport BottomHeaders from \"@Custom/Headers/BottomHeaders/BottomHeaders.jsx\";\r\n\r\nimport Node from \"./elementTree/Node.jsx\";\r\nimport { useAllOrganizations } from \"@hooks/Organization/useAllOrganizations.js\";\r\nimport DrawerCreateOrganization from \"../../drawer/drawerForOrganization/DrawerCreateOrganization\";\r\n\r\nimport { ConfigProvider, Tour } from \"antd\";\r\nimport ruRU from \"antd/locale/ru_RU\";\r\nconst buildTree = (organizations) => {\r\n  const postMap = {};\r\n  const roots = [];\r\n\r\n  // Создаем карту постов\r\n  organizations.forEach((post) => {\r\n    post.children = [];\r\n    postMap[post.id] = post;\r\n  });\r\n\r\n  // Строим дерево\r\n  organizations.forEach((post) => {\r\n    if (post.parentOrganizationId === null) {\r\n      roots.push(post);\r\n    } else {\r\n      if (postMap[post.parentOrganizationId]) {\r\n        postMap[post.parentOrganizationId].children.push(post);\r\n      }\r\n    }\r\n  });\r\n\r\n  return roots;\r\n};\r\n\r\nconst OrganizationTree = ({ organizations }) => {\r\n  const tree = buildTree(organizations);\r\n  return (\r\n    <>\r\n      {tree.map((org) => (\r\n        <Node\r\n          key={org.id}\r\n          organization={org}\r\n          allOrganizations={organizations}\r\n          childrenOrg={org.children}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default function SchemeСompanies() {\r\n  const { organizations, isLoadingOrganization, isErrorOrganization } =\r\n    useAllOrganizations();\r\n\r\n  const [getOrganizations, setGetOrganizations] = useState([]);\r\n  const [openCreateOrganization, setOpenCreateOrganization] = useState(false);\r\n\r\n  const [openHint, setOpenHint] = useState(false);\r\n  const refCreate = useRef(null); \r\n  const steps = [\r\n    {\r\n      title: \"Создать\",\r\n      description: \"Нажмите для создания компании\",\r\n      target: () => refCreate.current,\r\n    },\r\n    {\r\n      title: \"Редактировать\",\r\n      description: \"Нажмите и отредактируйте\",\r\n      target: () => document.querySelector('[data-tour=\"setting-button\"]'),\r\n      disabled: !document.querySelector('[data-tour=\"setting-button\"]'),\r\n    },\r\n    {\r\n      title: \"Компания\",\r\n      description: \"Нажмите для перехода в компанию\",\r\n      target: () => document.querySelector('[data-tour=\"click-companyName\"]'),\r\n      disabled: !document.querySelector('[data-tour=\"click-companyName\"]'),\r\n    },\r\n  ].filter((step) => {\r\n    if (step.target.toString().includes(\"querySelector\")) {\r\n      return !step.disabled;\r\n    }\r\n    return true;\r\n  });\r\n\r\n  const createOrganization = () => {\r\n    setOpenCreateOrganization(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!_.isEqual(getOrganizations, organizations)) {\r\n      setGetOrganizations(_.cloneDeep(organizations));\r\n    }\r\n  }, [organizations]);\r\n\r\n  return (\r\n    <div className={classes.dialog}>\r\n      <Headers\r\n        name={\"схема компании\"}\r\n        funcActiveHint={() => setOpenHint(true)}\r\n      >\r\n        <BottomHeaders create={createOrganization}  refCreate={refCreate}/>\r\n      </Headers>\r\n\r\n      <ConfigProvider locale={ruRU}>\r\n        <Tour\r\n          open={openHint}\r\n          onClose={() => setOpenHint(false)}\r\n          steps={steps}\r\n        />\r\n      </ConfigProvider>\r\n\r\n      <DrawerCreateOrganization\r\n        open={openCreateOrganization}\r\n        setOpen={setOpenCreateOrganization}\r\n        allOrganizations={organizations}\r\n      ></DrawerCreateOrganization>\r\n\r\n      <div className={classes.main}>\r\n        <Tree\r\n          lineWidth={\"2px\"}\r\n          lineColor={\"#ccc\"}\r\n          lineBorderRadius={\"10px\"}\r\n          label={\r\n            <Card\r\n              loading={false}\r\n              style={{\r\n                display: \"inline-block\",\r\n                width: \"300px\",\r\n                height: \"175px\",\r\n                // boxShadow: \"0px 0px 4px 0px rgba(0, 0, 0, 0.25)\",\r\n                boxShadow: \"rgba(0, 0, 0, 0.1) 0px 4px 12px\",\r\n              }}\r\n            >\r\n              <p>МОЙ БИЗНЕС</p>\r\n              <p>СОБСТВЕННИК</p>\r\n              <p>Иванов Иван</p>\r\n            </Card>\r\n          }\r\n        >\r\n          <OrganizationTree organizations={getOrganizations}></OrganizationTree>\r\n        </Tree>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["ButtonAction","_ref","create","update","refUpdate","refCreate","_jsxs","className","classes","wrapper","children","_jsx","ButtonImage","refAction","name","icon","iconAdd","onClick","Blacksavetmp","BottomHeaders","editText","Node","organization","allOrganizations","childrenOrg","navigate","useNavigate","TreeNode","label","Card","loading","style","display","width","height","backgroundColor","organizationColor","boxShadow","DrawerUpdateOrganization","organizationId","id","Button","type","cardClick","concat","organizationName","length","map","child","OrganizationTree","organizations","tree","postMap","roots","forEach","post","parentOrganizationId","push","buildTree","_Fragment","org","SchemeСompanies","isLoadingOrganization","isErrorOrganization","useAllOrganizations","getOrganizations","setGetOrganizations","useState","openCreateOrganization","setOpenCreateOrganization","openHint","setOpenHint","useRef","steps","title","description","target","current","document","querySelector","disabled","filter","step","toString","includes","useEffect","_","dialog","Headers","funcActiveHint","createOrganization","ConfigProvider","locale","ruRU","Tour","open","onClose","DrawerCreateOrganization","setOpen","main","Tree","lineWidth","lineColor","lineBorderRadius"],"sourceRoot":""}