{"version":3,"file":"static/js/171.f356fb31.chunk.js","mappings":"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","sources":["webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/BottomHeaders.module.css?e3ba","webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.module.css?2769","UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.jsx","UI/Custom/Headers/BottomHeaders/BottomHeaders.jsx","webpack://good_management/./src/UI/app/CompanySchema/desktop/CompanySchema.module.css?205a","webpack://good_management/./src/UI/app/CompanySchema/desktop/postSchema/PostSchema.module.css?2d4e","UI/app/CompanySchema/desktop/postSchema/PostSchema.jsx","webpack://good_management/./src/UI/app/CompanySchema/desktop/blockSchema/BlockSchema.module.css?f736","UI/app/CompanySchema/desktop/blockSchema/BlockSchema.jsx","UI/app/CompanySchema/desktop/CompanySchema.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"editText\":\"BottomHeaders_editText__6e9Ca\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ButtonAction_wrapper__YWbBU\"};","import React from \"react\";\r\nimport classes from \"./ButtonAction.module.css\";\r\nimport iconAdd from \"../../../../image/iconAdd.svg\";\r\nimport Blacksavetmp from \"../../../../image/Blacksavetmp.svg\";\r\nimport ButtonImage from \"@Custom/buttonImage/ButtonImage\";\r\nexport default function ButtonAction({ create, update, refUpdate, refCreate }) {\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      {create && (\r\n        <ButtonImage\r\n          refAction={refCreate}\r\n          name={\"создать\"}\r\n          icon={iconAdd}\r\n          onClick={create}\r\n        ></ButtonImage>\r\n      )}\r\n\r\n      {update && (\r\n        <ButtonImage\r\n          refAction={refUpdate}\r\n          name={\"обновить\"}\r\n          icon={Blacksavetmp}\r\n          onClick={update}\r\n        ></ButtonImage>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport classes from \"./BottomHeaders.module.css\"\r\nimport ButtonAction from './ButtonAction/ButtonAction'\r\n\r\nexport default function BottomHeaders({children, create, update,  refUpdate, refCreate}) {\r\n  return (\r\n    <div className={classes.editText}>\r\n        {children}\r\n        <ButtonAction create={create} update={update} refUpdate={refUpdate} refCreate={refCreate}></ButtonAction>\r\n    </div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"CompanySchema_dialog__p281w\",\"main\":\"CompanySchema_main__x8uFf\",\"header\":\"CompanySchema_header__NDQ-a\",\"boldText\":\"CompanySchema_boldText__YEQlF\",\"wrapper\":\"CompanySchema_wrapper__RDxD1\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"PostSchema_wrapper__tJVHs\",\"block\":\"PostSchema_block__AbUbC\",\"nameBlock\":\"PostSchema_nameBlock__H0JFk\",\"childBlock\":\"PostSchema_childBlock__kgZ7x\",\"customScrollbar\":\"PostSchema_customScrollbar__wxTK2\",\"customScrollbarThumb\":\"PostSchema_customScrollbarThumb__Okbqn\"};","import React from \"react\";\r\nimport classes from \"./PostSchema.module.css\";\r\nimport _ from \"lodash\";\r\nimport { Button } from \"antd\";\r\n\r\nimport { lightenColor } from \"../../constants/contsants.js\";\r\n\r\nconst PodSchema = ({ post, level = 1, baseColor, setOnePost, setViewChildrenPost, setHeader }) => {\r\n  const backgroundColor = lightenColor(baseColor, level * 0.2);\r\n\r\n  const handleOpenPostButtonClick = (event, element) => {\r\n    event.stopPropagation(); // Останавливаем всплытие события\r\n    const newElement = _.cloneDeep(element);\r\n    newElement.color = backgroundColor;\r\n    console.log(newElement);\r\n    setOnePost([newElement]);\r\n    setHeader({\r\n      postName: post?.postName ?? \"Не указано\",\r\n      divisionName: post?.divisionName ?? \"Не указано\",\r\n      fullName: post?.user ? `${post.user.firstName ?? \"\"} ${post.user.lastName ?? \"\"}`.trim() : \"Нет пользователя\",\r\n    });\r\n    setViewChildrenPost(true);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.childBlock} style={{ backgroundColor }}>\r\n      <div className={classes.nameBlock}>\r\n        <Button\r\n          type=\"link\"\r\n          onClick={(event) => {\r\n            handleOpenPostButtonClick(event, post);\r\n          }}\r\n        >\r\n          {post?.divisionName}\r\n        </Button>\r\n        <h2>{post.postName}</h2>\r\n        {post.user ? (\r\n          <h3>\r\n            {post?.user.firstName} {post?.user.lastName}\r\n          </h3>\r\n        ) : (\r\n          <h3>Пост свободен</h3>\r\n        )}\r\n      </div>\r\n      {post?.children.length > 0 && (\r\n        <div className={classes.childBlock}>\r\n          {post.children.map((child) => (\r\n            <PodSchema\r\n              key={child.id}\r\n              post={child}\r\n              level={level > 2 ? 1 : level + 1}\r\n              baseColor={baseColor}\r\n              setOnePost={setOnePost}\r\n              setViewChildrenPost={setViewChildrenPost}\r\n              setHeader={setHeader}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function PostSchema({ post, backgroundColor, setOnePost, setViewChildrenPost, setHeader }) {\r\n  const handleOpenPostButtonClick = (element) => {\r\n    const newElement = _.cloneDeep(element);\r\n    newElement.color = backgroundColor;\r\n    console.log(newElement);\r\n    setOnePost([newElement]);\r\n    setHeader({\r\n      postName: post?.postName ?? \"Не указано\",\r\n      divisionName: post?.divisionName ?? \"Не указано\",\r\n      fullName: post?.user ? `${post.user.firstName ?? \"\"} ${post.user.lastName ?? \"\"}`.trim() : \"Нет пользователя\",\r\n    });\r\n    setViewChildrenPost(true);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.wrapper} style={{ backgroundColor }}>\r\n      <div className={classes.block} style={{ backgroundColor }}>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            cursor: \"pointer\",\r\n          }}\r\n        ></div>\r\n\r\n        <div className={classes.nameBlock}>\r\n          <Button\r\n           data-tour=\"click-postName\"\r\n            type=\"link\"\r\n            onClick={() => {\r\n              handleOpenPostButtonClick(post);\r\n            }}\r\n          >\r\n            {post?.divisionName}\r\n          </Button>\r\n          <h2>{post?.postName}</h2>\r\n          {post?.user && (\r\n            <h3>\r\n              {post?.user?.firstName} {post?.user?.lastName}\r\n            </h3>\r\n          )}\r\n        </div>\r\n\r\n        {post?.children.length > 0 && (\r\n          <div className={classes.childBlock}>\r\n            {post?.children.map((child) => (\r\n              <PodSchema\r\n                key={child.id}\r\n                post={child}\r\n                baseColor={backgroundColor}\r\n                setOnePost={setOnePost}\r\n                setViewChildrenPost={setViewChildrenPost}\r\n                setHeader={setHeader}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"BlockSchema_wrapper__dYpX+\",\"block\":\"BlockSchema_block__-HPh8\",\"nameBlock\":\"BlockSchema_nameBlock__9hAAV\",\"childBlock\":\"BlockSchema_childBlock__frsbQ\",\"customScrollbar\":\"BlockSchema_customScrollbar__koGtG\",\"customScrollbarThumb\":\"BlockSchema_customScrollbarThumb__-hKGq\"};","import React, { useState } from \"react\";\r\nimport classes from \"./BlockSchema.module.css\";\r\nimport palette from \"@image/color_palette.svg\";\r\nimport { Popover } from \"antd\";\r\nimport _ from \"lodash\";\r\nimport { Button } from \"antd\";\r\nimport DrawerUpdatePost from \"../../drawer/drawerForPost/DrawerUpdatePost\";\r\nimport { lightenColor, ColorPickerModal } from \"../../constants/contsants.js\";\r\n\r\nconst PodSchema = ({\r\n  post,\r\n  level = 1,\r\n  baseColor,\r\n  setOnePost,\r\n  setViewChildrenPost,\r\n  setHeader,\r\n}) => {\r\n  const backgroundColor = lightenColor(baseColor, level * 0.2);\r\n\r\n  const handleOpenPostButtonClick = (event, element) => {\r\n    event.stopPropagation(); // Останавливаем всплытие события\r\n    const newElement = _.cloneDeep(element);\r\n    newElement.color = baseColor;\r\n    console.log(newElement);\r\n    setOnePost([newElement]);\r\n    setHeader({\r\n      postName: post?.postName ?? \"Не указано\",\r\n      divisionName: post?.divisionName ?? \"Не указано\",\r\n      fullName: post?.user\r\n        ? `${post.user.firstName ?? \"\"} ${post.user.lastName ?? \"\"}`.trim()\r\n        : \"Нет пользователя\",\r\n    });\r\n    setViewChildrenPost(true);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.childBlock} style={{ backgroundColor }}>\r\n      \r\n      <div className={classes.nameBlock}>\r\n      <DrawerUpdatePost postId={post.id}></DrawerUpdatePost>\r\n        <Button\r\n          type=\"link\"\r\n          onClick={(event) => {\r\n            handleOpenPostButtonClick(event, post);\r\n          }}\r\n        >\r\n          {post.divisionName}\r\n        </Button>\r\n        <h2>{post.postName}</h2>\r\n        {post.user ? (\r\n          <h3>\r\n            {post.user.firstName} {post.user.lastName}\r\n          </h3>\r\n        ) : (\r\n          <h3>Пост свободен</h3>\r\n        )}\r\n      </div>\r\n      {post.children.length > 0 && (\r\n        <div className={classes.childBlock}>\r\n          {post.children.map((child) => (\r\n            <PodSchema\r\n              key={child.id}\r\n              post={child}\r\n              level={level > 2 ? 1 : level + 1}\r\n              baseColor={baseColor}\r\n              setOnePost={setOnePost}\r\n              setViewChildrenPost={setViewChildrenPost}\r\n              setHeader={setHeader}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function BlockSchema({\r\n  post,\r\n  arrayColors,\r\n  setArrayColors,\r\n  setOnePost,\r\n  setViewChildrenPost,\r\n  setHeader,\r\n}) {\r\n\r\n  let colorPostFromBD = arrayColors.get(post.id);\r\n\r\n  const [selectedColor, setSelectedColor] = useState(null);\r\n\r\n  const handleColorSelect = (color) => {\r\n    setSelectedColor(color);\r\n    setArrayColors((prevState) => {\r\n      const newMap = new Map(prevState);\r\n      newMap.set(post.id, color);\r\n      return newMap;\r\n    });\r\n  };\r\n\r\n  const handleOpenPostButtonClick = (element) => {\r\n    const newElement = _.cloneDeep(element);\r\n    newElement.color = selectedColor || colorPostFromBD;\r\n    console.log(newElement);\r\n    setOnePost([newElement]);\r\n    setHeader({\r\n      postName: post?.postName ?? \"Не указано\",\r\n      divisionName: post?.divisionName ?? \"Не указано\",\r\n      fullName: post?.user\r\n        ? `${post.user.firstName ?? \"\"} ${post.user.lastName ?? \"\"}`.trim()\r\n        : \"Нет пользователя\",\r\n    });\r\n    setViewChildrenPost(true);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classes.wrapper}\r\n      style={{ backgroundColor: selectedColor || colorPostFromBD }}\r\n    >\r\n      <div\r\n        className={classes.block}\r\n        style={{ backgroundColor: selectedColor || colorPostFromBD }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            cursor: \"pointer\",\r\n          }}\r\n        >\r\n          <Popover\r\n            placement=\"topLeft\"\r\n            content={<ColorPickerModal onColorSelect={handleColorSelect} selectedColor = {selectedColor} colorFromBD = {colorPostFromBD}/>}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n              }}\r\n            >\r\n              <img  data-tour=\"color-palette\" src={palette} alt=\"palette\" width=\"30px\" height=\"30px\" />\r\n            </div>\r\n          </Popover>\r\n          <DrawerUpdatePost postId={post.id}></DrawerUpdatePost>\r\n        </div>\r\n\r\n        <div className={classes.nameBlock}>\r\n          <Button\r\n            type=\"link\"\r\n            onClick={() => {\r\n              handleOpenPostButtonClick(post);\r\n            }}\r\n          >\r\n            {post.divisionName}\r\n          </Button>\r\n          <h2>{post.postName}</h2>\r\n          {post.user && (\r\n            <h3>\r\n              {post.user.firstName} {post.user.lastName}\r\n            </h3>\r\n          )}\r\n        </div>\r\n\r\n        {post.children.length > 0 && (\r\n          <div className={classes.childBlock}>\r\n            {post.children.map((child) => (\r\n              <PodSchema\r\n                key={child.id}\r\n                post={child}\r\n                baseColor={selectedColor || colorPostFromBD}\r\n                setOnePost={setOnePost}\r\n                setViewChildrenPost={setViewChildrenPost}\r\n                setHeader={setHeader}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport classes from \"./CompanySchema.module.css\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport _ from \"lodash\";\r\nimport { FloatButton } from \"antd\";\r\n\r\nimport Headers from \"@Custom/Headers/Headers\";\r\nimport BottomHeaders from \"@Custom/Headers/BottomHeaders/BottomHeaders.jsx\";\r\nimport HandlerQeury from \"@Custom/HandlerQeury.jsx\";\r\nimport HandlerMutation from \"@Custom/HandlerMutation.jsx\";\r\n\r\nimport PostSchema from \"./postSchema/PostSchema\";\r\nimport BlockSchema from \"./blockSchema/BlockSchema\";\r\n\r\nimport arrowBack from \"@image/back_white.svg\";\r\nimport DrawerCreatePost from \"../drawer/drawerForPost/DrawerCreatePost\";\r\nimport { useGetSingleOrganization, useUpdateSingleOrganization } from \"@hooks\";\r\n\r\nimport { useAllPosts } from \"@hooks\";\r\n\r\nimport { buildTree } from \"../constants/contsants.js\";\r\n\r\nimport { ConfigProvider, Tour } from \"antd\";\r\nimport ruRU from \"antd/locale/ru_RU\";\r\n\r\nconst PostTree = ({\r\n  posts,\r\n  arrayColors,\r\n  setArrayColors,\r\n  setOnePost,\r\n  setViewChildrenPost,\r\n  setHeader,\r\n}) => {\r\n  const tree = buildTree(posts);\r\n  console.log(tree);\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      {tree.map((post) => (\r\n        <BlockSchema\r\n          key={post.id}\r\n          post={post}\r\n          arrayColors={arrayColors}\r\n          setArrayColors={setArrayColors}\r\n          setOnePost={setOnePost}\r\n          setViewChildrenPost={setViewChildrenPost}\r\n          setHeader={setHeader}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function CompanySchema() {\r\n  const { organizationId } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const backCompanySchema = () => {\r\n    navigate(`/pomoshnik/companySchema`);\r\n  };\r\n\r\n  const {\r\n    allPosts = [],\r\n    isLoadingGetPosts,\r\n    isFetchingGetPosts,\r\n    isErrorGetPosts,\r\n  } = useAllPosts({ organizationId, structure: true });\r\n\r\n  const {\r\n    currentOrganization,\r\n    isLoadingOrganizationId,\r\n    isFetchingOrganizationId,\r\n  } = useGetSingleOrganization({ organizationId: organizationId });\r\n\r\n  const {\r\n    updateOrganization,\r\n    isLoadingUpdateOrganizationMutation,\r\n    isSuccessUpdateOrganizationMutation,\r\n    isErrorUpdateOrganizationMutation,\r\n    ErrorOrganization,\r\n    localIsResponseUpdateOrganizationMutation,\r\n  } = useUpdateSingleOrganization();\r\n\r\n  const [arrayAllPosts, setArrayAllPosts] = useState([]);\r\n  const [onePost, setOnePost] = useState([]);\r\n  const [arrayColors, setArrayColors] = useState(new Map());\r\n  const [isViewChildrenPost, setViewChildrenPost] = useState(false);\r\n  const [header, setHeader] = useState({\r\n    postName: \"\",\r\n    divisionName: \"\",\r\n    fullName: \"\",\r\n  });\r\n\r\n  const refCreate = useRef(null);\r\n  const refUpdate = useRef(null);\r\n  const [openHint, setOpenHint] = useState(false);\r\n\r\n  const steps = [\r\n    {\r\n      title: \"Создать\",\r\n      description: \"Нажмите для создания стратегии\",\r\n      target: () => refCreate.current,\r\n    },\r\n    {\r\n      title: \"Сохранить\",\r\n      description: \"Нажмите для сохранения\",\r\n      target: () => refUpdate.current,\r\n    },\r\n    {\r\n      title: \"Палитра\",\r\n      description: \"Нажмите и и поменяйте цветовую гамму поста\",\r\n      target: () => document.querySelector('[data-tour=\"color-palette\"]'),\r\n      disabled: !document.querySelector('[data-tour=\"color-palette\"]'),\r\n    },\r\n    {\r\n      title: \"Редактировать пост\",\r\n      description: \"Нажмите и отредактируйте пост\",\r\n      target: () => document.querySelector('[data-tour=\"setting-button\"]'),\r\n      disabled: !document.querySelector('[data-tour=\"setting-button\"]'),\r\n    },\r\n    {\r\n      title: \"Подразделение\",\r\n      description: \"Нажмите для перехода в Подразделение\",\r\n      target: () => document.querySelector('[data-tour=\"click-postName\"]'),\r\n      disabled: !document.querySelector('[data-tour=\"click-postName\"]'),\r\n    },  \r\n    {\r\n      title: \"Назад\",\r\n      description: \"Нажмите для перехода к схеме компаний\",\r\n      target: () => document.querySelector('[data-tour=\"click-backCompany\"]'),\r\n      disabled: !document.querySelector('[data-tour=\"click-backCompany\"]'),\r\n    }, \r\n        \r\n  ].filter((step) => {\r\n    if (step.target.toString().includes(\"querySelector\")) {\r\n      return !step.disabled;\r\n    }\r\n    return true;\r\n  });\r\n\r\n  const saveUpdateOrganization = async () => {\r\n    const colorCodes = {};\r\n    for (const [key, value] of arrayColors) {\r\n      colorCodes[key] = value;\r\n    }\r\n\r\n    await updateOrganization({\r\n      _id: organizationId,\r\n      colorCodes,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!_.isEqual(arrayAllPosts, allPosts)) {\r\n      setArrayAllPosts(_.cloneDeep(allPosts));\r\n    }\r\n  }, [allPosts]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      currentOrganization?.colorCodes &&\r\n      typeof currentOrganization.colorCodes === \"object\"\r\n    ) {\r\n      setArrayColors(new Map(Object.entries(currentOrganization.colorCodes)));\r\n    }\r\n  }, [currentOrganization]);\r\n\r\n  const [openCreatePost, setOpenCreatePost] = useState(false);\r\n  const createPost = () => {\r\n    setOpenCreatePost(true);\r\n  };\r\n\r\n  console.log(\"onePost\");\r\n  console.log(onePost);\r\n  return (\r\n    <div className={classes.dialog}>\r\n      <Headers name={\"схема постов\"} funcActiveHint={() => setOpenHint(true)}>\r\n        <BottomHeaders\r\n          update={saveUpdateOrganization}\r\n          create={createPost}\r\n          refCreate={refCreate}\r\n          refUpdate={refUpdate}\r\n        />\r\n      </Headers>\r\n\r\n      <ConfigProvider locale={ruRU}>\r\n        <Tour\r\n          open={openHint}\r\n          onClose={() => setOpenHint(false)}\r\n          steps={steps}\r\n        />\r\n      </ConfigProvider>\r\n\r\n      <DrawerCreatePost\r\n        open={openCreatePost}\r\n        setOpen={setOpenCreatePost}\r\n        organizationId={organizationId}\r\n      ></DrawerCreatePost>\r\n\r\n      {isErrorGetPosts ? (\r\n        <>\r\n          <HandlerQeury Error={isErrorGetPosts}></HandlerQeury>\r\n        </>\r\n      ) : (\r\n        <div className={classes.main}>\r\n          {isFetchingGetPosts || isLoadingGetPosts ? (\r\n            <HandlerQeury\r\n              Loading={isLoadingGetPosts}\r\n              Fetching={isFetchingGetPosts}\r\n            ></HandlerQeury>\r\n          ) : (\r\n            <>\r\n              {allPosts.length === 0 ? (\r\n                <div className={classes.header}>\r\n                  <h1 className={classes.boldText}>Посты отсутсвуют</h1>\r\n                  <FloatButton\r\n                    data-tour=\"click-backCompany\"\r\n                    icon={\r\n                      <img\r\n                        src={arrowBack}\r\n                        alt=\"back\"\r\n                        style={{ width: 20, height: 20 }}\r\n                      />\r\n                    }\r\n                    type=\"primary\"\r\n                    tooltip=\"Вернуться назад\"\r\n                    onClick={backCompanySchema}\r\n                    style={{\r\n                      insetInlineEnd: 94,\r\n                    }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  <div className={classes.header}>\r\n                    <h1 className={classes.boldText}>{header.postName}</h1>\r\n                    <h2 className={classes.boldText}>{header.divisionName}</h2>\r\n                    <h3>{header.fullName}</h3>\r\n                  </div>\r\n\r\n                  <div className={classes.wrapper}>\r\n                    {isViewChildrenPost ? (\r\n                      <>\r\n                        {onePost[0]?.children?.map((item) => {\r\n                          return (\r\n                            <>\r\n                              <PostSchema\r\n                                key={item.id}\r\n                                post={item}\r\n                                backgroundColor={onePost[0].color}\r\n                                setOnePost={setOnePost}\r\n                                setViewChildrenPost={setViewChildrenPost}\r\n                                setHeader={setHeader}\r\n                              />\r\n                            </>\r\n                          );\r\n                        })}\r\n\r\n                        <FloatButton\r\n                          data-tour=\"click-backCompany\"\r\n                          icon={\r\n                            <img\r\n                              src={arrowBack}\r\n                              alt=\"back\"\r\n                              style={{ width: 20, height: 20 }}\r\n                            />\r\n                          }\r\n                          type=\"primary\"\r\n                          tooltip=\"Вернуться назад\"\r\n                          onClick={() => setViewChildrenPost(false)}\r\n                          style={{\r\n                            insetInlineEnd: 94,\r\n                          }}\r\n                        />\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <PostTree\r\n                          posts={arrayAllPosts}\r\n                          arrayColors={arrayColors}\r\n                          setArrayColors={setArrayColors}\r\n                          setOnePost={setOnePost}\r\n                          setViewChildrenPost={setViewChildrenPost}\r\n                          setHeader={setHeader}\r\n                        />\r\n\r\n                        <FloatButton\r\n                          data-tour=\"click-backCompany\"\r\n                          icon={\r\n                            <img\r\n                              src={arrowBack}\r\n                              alt=\"back\"\r\n                              style={{ width: 20, height: 20 }}\r\n                            />\r\n                          }\r\n                          type=\"primary\"\r\n                          tooltip=\"Вернуться назад\"\r\n                          onClick={backCompanySchema}\r\n                          style={{\r\n                            insetInlineEnd: 94,\r\n                          }}\r\n                        />\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":["ButtonAction","_ref","create","update","refUpdate","refCreate","_jsxs","className","classes","wrapper","children","_jsx","ButtonImage","refAction","name","icon","iconAdd","onClick","Blacksavetmp","BottomHeaders","editText","PodSchema","post","level","baseColor","setOnePost","setViewChildrenPost","setHeader","backgroundColor","lightenColor","childBlock","style","nameBlock","Button","type","event","handleOpenPostButtonClick","element","_post$postName","_post$divisionName","_post$user$firstName","_post$user$lastName","stopPropagation","newElement","_","color","console","log","postName","divisionName","fullName","user","concat","firstName","lastName","trim","length","map","child","id","PostSchema","_ref2","_post$user","_post$user2","block","display","justifyContent","cursor","_post$postName2","_post$divisionName2","_post$user$firstName2","_post$user$lastName2","DrawerUpdatePost","postId","BlockSchema","arrayColors","setArrayColors","colorPostFromBD","get","selectedColor","setSelectedColor","useState","Popover","placement","content","ColorPickerModal","onColorSelect","prevState","newMap","Map","set","colorFromBD","src","palette","alt","width","height","PostTree","posts","tree","buildTree","CompanySchema","_onePost$","_onePost$$children","organizationId","useParams","navigate","useNavigate","backCompanySchema","allPosts","isLoadingGetPosts","isFetchingGetPosts","isErrorGetPosts","useAllPosts","structure","currentOrganization","isLoadingOrganizationId","isFetchingOrganizationId","useGetSingleOrganization","updateOrganization","isLoadingUpdateOrganizationMutation","isSuccessUpdateOrganizationMutation","isErrorUpdateOrganizationMutation","ErrorOrganization","localIsResponseUpdateOrganizationMutation","useUpdateSingleOrganization","arrayAllPosts","setArrayAllPosts","onePost","isViewChildrenPost","header","useRef","openHint","setOpenHint","steps","title","description","target","current","document","querySelector","disabled","filter","step","toString","includes","useEffect","colorCodes","Object","entries","openCreatePost","setOpenCreatePost","dialog","Headers","funcActiveHint","async","key","value","_id","createPost","ConfigProvider","locale","ruRU","Tour","open","onClose","DrawerCreatePost","setOpen","_Fragment","HandlerQeury","Error","main","Loading","Fetching","boldText","FloatButton","arrowBack","tooltip","insetInlineEnd","item"],"sourceRoot":""}