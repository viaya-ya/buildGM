{"version":3,"file":"static/js/149.823572a5.chunk.js","mappings":"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","sources":["webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/BottomHeaders.module.css?e3ba","webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.module.css?2769","UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.jsx","UI/Custom/Headers/BottomHeaders/BottomHeaders.jsx","webpack://good_management/./src/UI/Custom/SelectBorder/SelectBorder.module.css?11b5","UI/Custom/SelectBorder/SelectBorder.jsx","webpack://good_management/./src/UI/Custom/TextArea/TextArea.module.css?c32b","UI/Custom/TextArea/TextArea.jsx","webpack://good_management/./src/UI/Custom/WaveLetters.module.css?9fa3","UI/Custom/WaveLetters.jsx","webpack://good_management/./src/UI/app/ObjectivePage/Objective.module.css?42cc","UI/app/ObjectivePage/Objective.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"editText\":\"BottomHeaders_editText__6e9Ca\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ButtonAction_wrapper__YWbBU\"};","import React from \"react\";\r\nimport classes from \"./ButtonAction.module.css\";\r\nimport iconAdd from \"../../../../image/iconAdd.svg\";\r\nimport Blacksavetmp from \"../../../../image/Blacksavetmp.svg\";\r\nimport ButtonImage from \"@Custom/buttonImage/ButtonImage\";\r\nexport default function ButtonAction({ create, update, refUpdate, refCreate }) {\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      {create && (\r\n        <ButtonImage\r\n          refAction={refCreate}\r\n          name={\"создать\"}\r\n          icon={iconAdd}\r\n          onClick={create}\r\n        ></ButtonImage>\r\n      )}\r\n\r\n      {update && (\r\n        <ButtonImage\r\n          refAction={refUpdate}\r\n          name={\"обновить\"}\r\n          icon={Blacksavetmp}\r\n          onClick={update}\r\n        ></ButtonImage>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport classes from \"./BottomHeaders.module.css\"\r\nimport ButtonAction from './ButtonAction/ButtonAction'\r\n\r\nexport default function BottomHeaders({children, create, update,  refUpdate, refCreate}) {\r\n  return (\r\n    <div className={classes.editText}>\r\n        {children}\r\n        <ButtonAction create={create} update={update} refUpdate={refUpdate} refCreate={refCreate}></ButtonAction>\r\n    </div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"SelectBorder_item__fFqI+\",\"select\":\"SelectBorder_select__9Mkwg\",\"Активный\":\"SelectBorder_Активный__2n7E0\",\"Черновик\":\"SelectBorder_Черновик__+JQtL\",\"Завершено\":\"SelectBorder_Завершено__Y7edP\"};","import React from \"react\";\r\nimport classes from \"./SelectBorder.module.css\";\r\n\r\nexport default function SelectBorder({\r\n  value,\r\n  onChange,\r\n  array,\r\n  array1,\r\n  arrayItem,\r\n  prefix,\r\n  styleSelected\r\n}) {\r\n\r\n  return (\r\n    <div className={classes.item}>\r\n      <select\r\n        name=\"mySelect\"\r\n        value={value}\r\n        onChange={(e) => {\r\n          onChange(e.target.value);\r\n        }}\r\n        className={`${classes.select} ${classes[styleSelected]}`}\r\n      >\r\n        <option value=\"\" disabled>\r\n          Выберите стратегию\r\n        </option>\r\n\r\n        {array?.map((item) => (\r\n          <>\r\n            <option key={item.id} value={item.id} className={classes[item.state]}>\r\n              {prefix}\r\n              {item[arrayItem]}\r\n            </option>\r\n          </>\r\n        ))}\r\n\r\n        {array1?.map((item) => {\r\n          return (\r\n            <option key={item.id} value={item.id} className={classes[item.state]}>\r\n              {prefix}\r\n              {item[arrayItem]}\r\n            </option>\r\n          );\r\n        })}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"textArea\":\"TextArea_textArea__dawEa\",\"textColor\":\"TextArea_textColor__qu0hR\"};","import React from \"react\";\r\nimport classes from \"./TextArea.module.css\";\r\n\r\nexport default function TextArea({ value, onChange, readOnly }) {\r\n  return (\r\n    <textarea\r\n      className={`${classes.textArea} ${readOnly ? classes.textColor : \"\"}`}\r\n      value={value}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      disabled={readOnly}\r\n    ></textarea>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wave\":\"WaveLetters_wave__DfO0r\"};","import React from \"react\";\r\nimport classes from \"./WaveLetters.module.css\";\r\nexport default function WaveLetters({ letters }) {\r\n  const arrayLetters = letters.split(\"\");\r\n  return (\r\n    <div className={classes.wave}>\r\n      {arrayLetters?.map((item, index) => (\r\n        <span key={index} style={{ \"--i\": index + 1 }}>\r\n          {item === \" \" ? \"\\u00A0\" + \"\\u00A0\" : item}\r\n        </span>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Objective_dialog__myE3R\",\"header\":\"Objective_header__wJ61N\",\"fon\":\"Objective_fon__l11Aw\",\"pomoshnikSearch\":\"Objective_pomoshnikSearch__lcLlx\",\"pomoshnik\":\"Objective_pomoshnik__VzFUX\",\"iconBack\":\"Objective_iconBack__ldAVj\",\"search\":\"Objective_search__jXjNR\",\"spanPomoshnik\":\"Objective_spanPomoshnik__A-k-9\",\"editText\":\"Objective_editText__8GAOw\",\"one\":\"Objective_one__mUM-h\",\"two\":\"Objective_two__1QGAM\",\"three\":\"Objective_three__Ykz+s\",\"blockSelect\":\"Objective_blockSelect__aVtAZ\",\"option\":\"Objective_option__Uknfn\",\"date\":\"Objective_date__ErTS6\",\"image\":\"Objective_image__hQKJu\",\"main\":\"Objective_main__jp5BA\",\"editorContainer\":\"Objective_editorContainer__7-0hp\",\"deleteIcon\":\"Objective_deleteIcon__eq0Qq\",\"iconAdd\":\"Objective_iconAdd__P1GvJ\",\"iconSave\":\"Objective_iconSave__worYp\",\"Teaxtaera\":\"Objective_Teaxtaera__XJRvM\",\"add\":\"Objective_add__DZ9Oi\",\"nameButton\":\"Objective_nameButton__9saa3\",\"text\":\"Objective_text__JlA+3\",\"selectHeader\":\"Objective_selectHeader__JGsz1\",\"textSelectHeader\":\"Objective_textSelectHeader__IGAFn\",\"textSelectHeaderSpan\":\"Objective_textSelectHeaderSpan__StMxW\",\"active\":\"Objective_active__xqvHB\",\"activeTextSelectHeader\":\"Objective_activeTextSelectHeader__vHFxj\",\"select\":\"Objective_select__tLlsk\",\"activeSelect\":\"Objective_activeSelect__lrPHf\",\"completed\":\"Objective_completed__CdWW8\",\"draft\":\"Objective_draft__IGM9b\"};","import React, { useState, useEffect } from \"react\";\r\nimport classes from \"./Objective.module.css\";\r\nimport classNames from \"classnames\";\r\nimport HandlerMutation from \"@Custom/HandlerMutation.jsx\";\r\nimport HandlerQeury from \"@Custom/HandlerQeury.jsx\";\r\nimport WaveLetters from \"@Custom/WaveLetters.jsx\";\r\nimport TextArea from \"@Custom/TextArea/TextArea.jsx\";\r\nimport Headers from \"@Custom/Headers/Headers\";\r\nimport BottomHeaders from \"@Custom/Headers/BottomHeaders/BottomHeaders\";\r\nimport SelectBorder from \"@Custom/SelectBorder/SelectBorder\";\r\nimport { useObjectiveHook, useStrategyHook } from \"@hooks\";\r\n\r\nexport default function Objective() {\r\n  const [activeIndex, setActiveIndex] = useState(0);\r\n  const [selectedStrategyId, setSelectedStrategyId] = useState(\"\");\r\n\r\n  const [contentEditors, setContentEditors] = useState([]);\r\n  const [situationEditors, setSituationEditors] = useState([]);\r\n  const [rootCauseEditors, setRootCauseEditors] = useState([]);\r\n\r\n  const [stateStrategy, setStateStrategy] = useState(\"\");\r\n\r\n  const {\r\n    currentObjective,\r\n    isLoadingGetObjectiveId,\r\n    isErrorGetObjectiveId,\r\n    isFetchingGetObjectiveId,\r\n\r\n    updateObjective,\r\n    isLoadingUpdateObjectiveMutation,\r\n    isSuccessUpdateObjectiveMutation,\r\n    isErrorUpdateObjectiveMutation,\r\n    errorUpdateObjectiveMutation,\r\n    localIsResponseUpdateObjectiveMutation,\r\n  } = useObjectiveHook(selectedStrategyId);\r\n\r\n  const {\r\n    activeAndDraftStrategies,\r\n    archiveStrategies,\r\n    isLoadingStrategies,\r\n    isErrorStrategies,\r\n  } = useStrategyHook();\r\n\r\n  const saveUpdateObjective = async () => {\r\n    await updateObjective({\r\n      _id: currentObjective.id,\r\n      situation: situationEditors,\r\n      content: contentEditors,\r\n      rootCause: rootCauseEditors,\r\n    })\r\n      .unwrap()\r\n      .then(() => {})\r\n      .catch((error) => {\r\n        console.error(\"Error:\", JSON.stringify(error, null, 2));\r\n      });\r\n  };\r\n\r\n  const handleEditorChange = (index, newState, type) => {\r\n    switch (type) {\r\n      case \"content\":\r\n        setContentEditors((prevEditors) => {\r\n          const updated = [...prevEditors];\r\n          updated[index] = newState;\r\n          return updated;\r\n        });\r\n        break;\r\n      case \"situation\":\r\n        setSituationEditors((prevEditors) => {\r\n          const updated = [...prevEditors];\r\n          updated[index] = newState;\r\n          return updated;\r\n        });\r\n        break;\r\n      case \"rootCause\":\r\n        setRootCauseEditors((prevEditors) => {\r\n          const updated = [...prevEditors];\r\n          updated[index] = newState;\r\n          return updated;\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const changeStrategyId = (id) => {\r\n    setSelectedStrategyId(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(currentObjective.content)) {\r\n      setContentEditors(currentObjective.content);\r\n    }\r\n\r\n    if (Array.isArray(currentObjective.situation)) {\r\n      setSituationEditors(currentObjective.situation);\r\n    }\r\n\r\n    if (Array.isArray(currentObjective.rootCause)) {\r\n      setRootCauseEditors(currentObjective.rootCause);\r\n    }\r\n  }, [currentObjective]);\r\n\r\n  useEffect(() => {\r\n    const array = [...archiveStrategies, ...activeAndDraftStrategies];\r\n    const element = array.find((item) => item.id === selectedStrategyId);\r\n    setStateStrategy(element?.state);\r\n  }, [selectedStrategyId]);\r\n\r\n  return (\r\n    <div className={classes.dialog}>\r\n      <Headers name={\"Краткосрочная цель\"} speedGoal={\"speedGoal\"}>\r\n        <div className={classes.selectHeader}>\r\n          {[\"КРАТКОСРОЧАЯ ЦЕЛЬ\", \"СИТУАЦИЯ\", \"ПРИЧИНА\"].map((text, index) => (\r\n            <div\r\n              key={index}\r\n              className={classNames(\r\n                classes.textSelectHeader,\r\n                activeIndex === index && classes.activeTextSelectHeader\r\n              )}\r\n              onClick={() => setActiveIndex(index)}\r\n            >\r\n              <span\r\n                className={classNames(\r\n                  activeIndex === index\r\n                    ? classes.active\r\n                    : classes.textSelectHeaderSpan\r\n                )}\r\n              >\r\n                {text}\r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <BottomHeaders update={saveUpdateObjective}>\r\n          <SelectBorder\r\n            value={selectedStrategyId}\r\n            onChange={changeStrategyId}\r\n            array={activeAndDraftStrategies}\r\n            array1={archiveStrategies}\r\n            arrayItem={\"strategyNumber\"}\r\n            prefix={\"Стратегия №\"}\r\n            styleSelected={stateStrategy}\r\n          ></SelectBorder>\r\n        </BottomHeaders>\r\n      </Headers>\r\n\r\n      <div className={classes.main}>\r\n        {isErrorGetObjectiveId || isErrorStrategies ? (\r\n          <HandlerQeury Error={isErrorGetObjectiveId || isErrorStrategies} />\r\n        ) : isLoadingStrategies ||\r\n          isFetchingGetObjectiveId ||\r\n          isLoadingGetObjectiveId ? (\r\n          <HandlerQeury\r\n            Loading={isLoadingStrategies || isLoadingGetObjectiveId}\r\n            Fetching={isFetchingGetObjectiveId}\r\n          />\r\n        ) : (\r\n          <>\r\n            {currentObjective.id ? (\r\n              <>\r\n                {activeIndex === 0 && (\r\n                  <>\r\n                    {contentEditors.map((item, index) => (\r\n                      <TextArea\r\n                        key={index}\r\n                        value={item}\r\n                        onChange={(newState) =>\r\n                          handleEditorChange(index, newState, \"content\")\r\n                        }\r\n                        readOnly={stateStrategy === \"Завершено\"}\r\n                      ></TextArea>\r\n                    ))}\r\n                  </>\r\n                )}\r\n\r\n                {activeIndex === 1 && (\r\n                  <>\r\n                    {situationEditors.map((item, index) => (\r\n                      <TextArea\r\n                        key={index}\r\n                        value={item}\r\n                        onChange={(newState) =>\r\n                          handleEditorChange(index, newState, \"situation\")\r\n                        }\r\n                        readOnly={stateStrategy === \"Завершено\"}\r\n                      ></TextArea>\r\n                    ))}\r\n                  </>\r\n                )}\r\n\r\n                {activeIndex === 2 && (\r\n                  <>\r\n                    {rootCauseEditors.map((item, index) => (\r\n                      <TextArea\r\n                        key={index}\r\n                        value={item}\r\n                        onChange={(newState) =>\r\n                          handleEditorChange(index, newState, \"rootCause\")\r\n                        }\r\n                        readOnly={stateStrategy === \"Завершено\"}\r\n                      ></TextArea>\r\n                    ))}\r\n                  </>\r\n                )}\r\n\r\n                <HandlerMutation\r\n                  Loading={isLoadingUpdateObjectiveMutation}\r\n                  Error={\r\n                    isErrorUpdateObjectiveMutation &&\r\n                    localIsResponseUpdateObjectiveMutation\r\n                  }\r\n                  Success={\r\n                    isSuccessUpdateObjectiveMutation &&\r\n                    localIsResponseUpdateObjectiveMutation\r\n                  }\r\n                  textSuccess={\"Краткосрочная цель обновлена\"}\r\n                  textError={\r\n                    errorUpdateObjectiveMutation?.data?.errors?.[0]?.errors?.[0]\r\n                      ? errorUpdateObjectiveMutation.data.errors[0].errors[0]\r\n                      : errorUpdateObjectiveMutation?.data?.message\r\n                  }\r\n                />\r\n              </>\r\n            ) : (\r\n              <>\r\n                <WaveLetters\r\n                  letters={\"Выберите стратегию\"}\r\n                ></WaveLetters>\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["ButtonAction","_ref","create","update","refUpdate","refCreate","_jsxs","className","classes","wrapper","children","_jsx","ButtonImage","refAction","name","icon","iconAdd","onClick","Blacksavetmp","BottomHeaders","editText","SelectBorder","value","onChange","array","array1","arrayItem","prefix","styleSelected","item","e","target","concat","select","disabled","map","_Fragment","id","state","TextArea","readOnly","textArea","textColor","WaveLetters","letters","arrayLetters","split","wave","index","style","Objective","_errorUpdateObjective","_errorUpdateObjective2","_errorUpdateObjective3","_errorUpdateObjective4","_errorUpdateObjective5","activeIndex","setActiveIndex","useState","selectedStrategyId","setSelectedStrategyId","contentEditors","setContentEditors","situationEditors","setSituationEditors","rootCauseEditors","setRootCauseEditors","stateStrategy","setStateStrategy","currentObjective","isLoadingGetObjectiveId","isErrorGetObjectiveId","isFetchingGetObjectiveId","updateObjective","isLoadingUpdateObjectiveMutation","isSuccessUpdateObjectiveMutation","isErrorUpdateObjectiveMutation","errorUpdateObjectiveMutation","localIsResponseUpdateObjectiveMutation","useObjectiveHook","activeAndDraftStrategies","archiveStrategies","isLoadingStrategies","isErrorStrategies","useStrategyHook","handleEditorChange","newState","type","prevEditors","updated","useEffect","Array","isArray","content","situation","rootCause","element","find","dialog","Headers","speedGoal","selectHeader","text","classNames","textSelectHeader","activeTextSelectHeader","active","textSelectHeaderSpan","async","_id","unwrap","then","catch","error","console","JSON","stringify","main","HandlerQeury","Error","Loading","Fetching","HandlerMutation","Success","textSuccess","textError","data","errors","message"],"sourceRoot":""}