{"version":3,"file":"static/js/448.20bc7934.chunk.js","mappings":"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","sources":["UI/image/statisticsArrowLeft.svg","UI/image/statisticsArrowRight.svg","webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/BottomHeaders.module.css?e3ba","webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.module.css?2769","UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.jsx","UI/Custom/Headers/BottomHeaders/BottomHeaders.jsx","webpack://good_management/./src/UI/Custom/ModalWindow.module.css?7f9e","UI/Custom/ModalWindow.jsx","webpack://good_management/./src/UI/Custom/modalSelectRadio/ModalSelectRadio.module.css?504c","UI/Custom/modalSelectRadio/ModalSelectRadio.jsx","webpack://good_management/./src/UI/app/ControlPanel/ControlPanel.module.css?500d","webpack://good_management/./src/UI/app/ControlPanel/GraphicStatistics/modal/ModalStatistic.module.css?c4b0","UI/app/ControlPanel/GraphicStatistics/modal/ModalStatistic.jsx","webpack://good_management/./src/UI/app/ControlPanel/panelDragDrop/PanelDragDrop.module.css?ddcb","UI/app/ControlPanel/panelDragDrop/PanelDragDrop.jsx","webpack://good_management/./src/UI/app/ControlPanel/modalSetting/ModalSetting.module.css?471d","UI/app/ControlPanel/modalSetting/ModalSetting.jsx","webpack://good_management/./src/UI/app/ControlPanel/GraphicStatistics/card/CardStatistic.module.css?4a9e","UI/app/ControlPanel/GraphicStatistics/card/CardStatistic.jsx","UI/app/ControlPanel/GraphicStatistics/card/sortable/SortableCard.jsx","UI/app/ControlPanel/ControlPanel.jsx"],"sourcesContent":["var _desc, _defs, _path;\nconst _excluded = [\"title\", \"titleId\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\nimport * as React from \"react\";\nfunction SvgStatisticsArrowLeft(_ref, svgRef) {\n  let {\n      title,\n      titleId\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 11.669983,\n    height: 19.799805,\n    viewBox: \"0 0 11.67 19.7998\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"\\r\\n\\t\\t\\tCreated with Pixso.\\r\\n\\t\")), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null)), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M11.67 1.77L9.89 0L0 9.89L9.9 19.79L11.67 18.02L3.53 9.89L11.67 1.77Z\",\n    fill: \"#005475\",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgStatisticsArrowLeft);\nexport default __webpack_public_path__ + \"static/media/statisticsArrowLeft.cf19db7109d7a471f9a4757f06f848cb.svg\";\nexport { ForwardRef as ReactComponent };","var _desc, _defs, _path;\nconst _excluded = [\"title\", \"titleId\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\nimport * as React from \"react\";\nfunction SvgStatisticsArrowRight(_ref, svgRef) {\n  let {\n      title,\n      titleId\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 11.670044,\n    height: 19.799805,\n    viewBox: \"0 0 11.67 19.7998\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"\\r\\n\\t\\t\\tCreated with Pixso.\\r\\n\\t\")), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null)), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M0 18.02L1.78 19.79L11.67 9.89L1.77 0L0 1.77L8.13 9.89L0 18.02Z\",\n    fill: \"#005475\",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgStatisticsArrowRight);\nexport default __webpack_public_path__ + \"static/media/statisticsArrowRight.49741dd1d1342ed4af242f97a798956a.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"editText\":\"BottomHeaders_editText__6e9Ca\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ButtonAction_wrapper__YWbBU\"};","import React from \"react\";\r\nimport classes from \"./ButtonAction.module.css\";\r\nimport iconAdd from \"../../../../image/iconAdd.svg\";\r\nimport Blacksavetmp from \"../../../../image/Blacksavetmp.svg\";\r\nimport ButtonImage from \"@Custom/buttonImage/ButtonImage\";\r\nexport default function ButtonAction({ create, update, refUpdate, refCreate }) {\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      {create && (\r\n        <ButtonImage\r\n          refAction={refCreate}\r\n          name={\"создать\"}\r\n          icon={iconAdd}\r\n          onClick={create}\r\n        ></ButtonImage>\r\n      )}\r\n\r\n      {update && (\r\n        <ButtonImage\r\n          refAction={refUpdate}\r\n          name={\"обновить\"}\r\n          icon={Blacksavetmp}\r\n          onClick={update}\r\n        ></ButtonImage>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport classes from \"./BottomHeaders.module.css\"\r\nimport ButtonAction from './ButtonAction/ButtonAction'\r\n\r\nexport default function BottomHeaders({children, create, update,  refUpdate, refCreate}) {\r\n  return (\r\n    <div className={classes.editText}>\r\n        {children}\r\n        <ButtonAction create={create} update={update} refUpdate={refUpdate} refCreate={refCreate}></ButtonAction>\r\n    </div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDelete\":\"ModalWindow_modalDelete__6F2XA\",\"modalDeleteElement\":\"ModalWindow_modalDeleteElement__BWKSd\",\"modalRow1\":\"ModalWindow_modalRow1__lAjGg\",\"modalRow2\":\"ModalWindow_modalRow2__s2-a6\",\"btnYes\":\"ModalWindow_btnYes__ScZrA\",\"btnNo\":\"ModalWindow_btnNo__q5w-4\",\"textBtnYes\":\"ModalWindow_textBtnYes__nsbep\",\"textBtnNo\":\"ModalWindow_textBtnNo__3q10K\",\"text\":\"ModalWindow_text__LCc-R\",\"exitImage\":\"ModalWindow_exitImage__OFdfY\"};","import React from \"react\";\r\nimport classes from \"./ModalWindow.module.css\";\r\nimport exit from \"../image/exitModal.svg\";\r\n\r\nexport default function ModalWindow({ text, close, btnYes, btnNo, exitBtn }) {\r\n  return (\r\n    <div className={classes.modalDelete}>\r\n      <div className={classes.modalDeleteElement}>\r\n        <img\r\n          src={exit}\r\n          alt=\"exit\"\r\n          className={classes.exitImage}\r\n          onClick={() => close(false)}\r\n        />\r\n        <div className={classes.modalRow1}>\r\n          <span className={classes.text}>{text}</span>\r\n        </div>\r\n        {!exitBtn && (\r\n          <div className={classes.modalRow2}>\r\n            <button\r\n              className={`${classes.btnYes} ${classes.textBtnYes}`}\r\n              onClick={btnYes}\r\n            >\r\n              Да\r\n            </button>\r\n            <button\r\n              className={`${classes.btnNo} ${classes.textBtnNo}`}\r\n              onClick={btnNo}\r\n            >\r\n              Нет\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalSelectRadio_modal__nPGHn\",\"modalWindow\":\"ModalSelectRadio_modalWindow__dncJU\",\"header\":\"ModalSelectRadio_header__DW8xM\",\"item1\":\"ModalSelectRadio_item1__QmdXG\",\"item2\":\"ModalSelectRadio_item2__Hm1w9\",\"search\":\"ModalSelectRadio_search__uW77Q\",\"exit\":\"ModalSelectRadio_exit__BO5fc\",\"table\":\"ModalSelectRadio_table__nysW+\",\"row\":\"ModalSelectRadio_row__F5ykw\"};","import React from \"react\";\r\nimport classes from \"./ModalSelectRadio.module.css\";\r\nimport exitModal from \"@image/exitModal.svg\";\r\nimport Blacksavetmp from \"@image/Blacksavetmp.svg\";\r\nimport ButtonImage from \"@Custom/buttonImage/ButtonImage\";\r\n\r\nexport function ModalSelectRadio({\r\n  nameTable,\r\n  handleSearchValue,\r\n  handleSearchOnChange,\r\n  exit,\r\n  filterArray,\r\n  array,\r\n  arrayItem,\r\n  selectedItemID,\r\n  handleRadioChange,\r\n  save,\r\n}) {\r\n  return (\r\n    <div className={classes.modal}>\r\n      <div className={classes.modalWindow}>\r\n        <img\r\n          src={exitModal}\r\n          alt=\"exitModal\"\r\n          onClick={() => exit()}\r\n          className={classes.exit}\r\n        />\r\n\r\n        <div className={classes.header}>\r\n          <div className={classes.item1}>\r\n            <input\r\n              type=\"search\"\r\n              placeholder=\"Найти\"\r\n              value={handleSearchValue}\r\n              onChange={handleSearchOnChange}\r\n              className={classes.search}\r\n            />\r\n          </div>\r\n\r\n          {save && (\r\n            <div className={classes.item2}>\r\n              <ButtonImage\r\n                name={\"сохранить\"}\r\n                icon={Blacksavetmp}\r\n                onClick={save}\r\n              ></ButtonImage>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <table className={classes.table}>\r\n          <thead>\r\n            <tr>\r\n              <th>{nameTable}</th>\r\n            </tr>\r\n          </thead>\r\n\r\n          {filterArray.length > 0 ? (\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  {filterArray?.map((item) => (\r\n                    <div\r\n                      key={item.id}\r\n                      className={classes.row}\r\n                      onClick={() => handleRadioChange(item.id, item)}\r\n                    >\r\n                      <input\r\n                        type=\"radio\"\r\n                        checked={selectedItemID === item.id}\r\n                      />\r\n                      {item[arrayItem]}\r\n                    </div>\r\n                  ))}\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          ) : (\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  {array?.map((item) => (\r\n                    <div\r\n                      key={item.id}\r\n                      className={classes.row}\r\n                      onClick={() => handleRadioChange(item.id, item)}\r\n                    >\r\n                      <input\r\n                        type=\"radio\"\r\n                        checked={selectedItemID === item.id}\r\n                      />\r\n                      {item[arrayItem]}\r\n                    </div>\r\n                  ))}\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          )}\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"ControlPanel_dialog__-PRLx\",\"main\":\"ControlPanel_main__VeEeW\",\"droppableContainer\":\"ControlPanel_droppableContainer__9GSun\",\"graphics\":\"ControlPanel_graphics__jR+pi\",\"handler\":\"ControlPanel_handler__Nzq9E\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalStatistic_modal__xnYMU\",\"modalWindow\":\"ModalStatistic_modalWindow__zFlcx\",\"exit\":\"ModalStatistic_exit__3Kwga\",\"item_rowSVG\":\"ModalStatistic_item_rowSVG__zWOHp\",\"item_rowBtns\":\"ModalStatistic_item_rowBtns__fF9s5\",\"btn\":\"ModalStatistic_btn__pE0UU\",\"btn_active\":\"ModalStatistic_btn_active__Kqc-6\",\"blockArrrow\":\"ModalStatistic_blockArrrow__v9Ki-\",\"row_svg_arrow\":\"ModalStatistic_row_svg_arrow__F6xR0\"};","import React, { useEffect, useRef, useState } from \"react\";\r\nimport classes from \"./ModalStatistic.module.css\";\r\nimport * as d3 from \"d3\";\r\nimport getDateFormatSatatistic from \"@Custom/Function/getDateFormatStatistic\";\r\nimport exitModal from \"@image/exitModal.svg\";\r\nimport arrowLeft from \"@image/statisticsArrowLeft.svg\";\r\nimport arrowRight from \"@image/statisticsArrowRight.svg\";\r\n\r\nconst ModalStatistic = ({\r\n  data,\r\n  graphicTypeBD,\r\n  type,\r\n  name,\r\n  exit,\r\n  reportDay,\r\n}) => {\r\n  \r\n  const svgRef = useRef();\r\n  const [width, setWidth] = useState(850);\r\n  const [height, setHeight] = useState(640);\r\n  const [pointsForGraphic, setPointsForGraphic] = useState([]);\r\n  const [typeGraphic, setTypeGraphic] = useState(graphicTypeBD);\r\n  const [count, setCount] = useState(0);\r\n\r\n  const buttonTypes = [\r\n    {\r\n      type: \"13\",\r\n      value: \"13 недель\",\r\n    },\r\n    {\r\n      type: \"26\",\r\n      value: \"26 недель\",\r\n    },\r\n    {\r\n      type: \"52\",\r\n      value: \"52 недели\",\r\n    },\r\n    {\r\n      type: \"Ежедневный\",\r\n      value: \"Ежедневный\",\r\n    },\r\n    {\r\n      type: \"Ежемесячный\",\r\n      value: \"Ежемесячный\",\r\n    },\r\n    {\r\n      type: \"Ежегодовой\",\r\n      value: \"Ежегодовой\",\r\n    },\r\n  ];\r\n\r\n  const handleTypeGraphicButtonClick = (type) => {\r\n    setTypeGraphic(type);\r\n  };\r\n\r\n  // Высота графика в хависимотси от экрана\r\n  useEffect(() => {\r\n    const updateDimensions = () => {\r\n      if (window.innerHeight > 900) {\r\n        setHeight(640);\r\n      } else if (window.innerHeight > 500) {\r\n        setHeight(420);\r\n      }\r\n    };\r\n\r\n    updateDimensions();\r\n    window.addEventListener(\"resize\", updateDimensions);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", updateDimensions);\r\n    };\r\n  }, []);\r\n\r\n  // Изменение pointsForGraphic в зависимости от типа графика\r\n  useEffect(() => {\r\n    setCount(0); // обнуление кол-во нажатий при смене графика\r\n\r\n    if (typeGraphic === \"Ежедневный\") {\r\n      const dayNow = new Date();\r\n      const currentWeekday = dayNow.getDay(); // Текущий день недели (0 - Воскресенье, 1 - Понедельник и т.д.)\r\n\r\n      // Определяем начальную дату - ближайший предыдущий день `day`\r\n      const startDate = new Date(dayNow);\r\n      let dayDifference;\r\n\r\n      if (currentWeekday >= reportDay) {\r\n        dayDifference = currentWeekday - reportDay;\r\n      } else {\r\n        dayDifference = 7 - (reportDay - currentWeekday);\r\n      }\r\n\r\n      startDate.setDate(dayNow.getDate() - dayDifference);\r\n\r\n      // Вычисляем конечную дату (b = startDate + 7 дней)\r\n      const endDate = new Date(startDate);\r\n      endDate.setDate(startDate.getDate() + 7);\r\n\r\n      // Генерируем массив всех дат в диапазоне [startDate, endDate)\r\n      const allDates = [];\r\n      for (\r\n        let date = new Date(startDate);\r\n        date < endDate;\r\n        date.setDate(date.getDate() + 1)\r\n      ) {\r\n        allDates.push(new Date(date).toISOString().split(\"T\")[0]);\r\n      }\r\n\r\n      // Фильтруем данные и заполняем пропущенные даты\r\n      const filteredData = data\r\n        ?.filter((item) => {\r\n          // Проверяем, если valueDate существует и валиден\r\n          const itemDate = item?.valueDate ? new Date(item.valueDate) : null;\r\n\r\n          // Если itemDate не валидная, пропускаем элемент\r\n          if (isNaN(itemDate?.getTime())) {\r\n            return false; // Пропускаем невалидные даты\r\n          }\r\n\r\n          // Проверяем, если startDate и endDate валидные\r\n          const isValidStartDate =\r\n            startDate instanceof Date && !isNaN(startDate.getTime());\r\n          const isValidEndDate =\r\n            endDate instanceof Date && !isNaN(endDate.getTime());\r\n\r\n          if (!isValidStartDate || !isValidEndDate) {\r\n            return false; // Пропускаем, если startDate или endDate невалидны\r\n          }\r\n\r\n          const itemDateStr = itemDate.toISOString().split(\"T\")[0];\r\n          const startDateStr = startDate.toISOString().split(\"T\")[0];\r\n          const endDateStr = endDate.toISOString().split(\"T\")[0];\r\n\r\n          // Возвращаем результат фильтрации\r\n          return (\r\n            startDateStr <= itemDateStr &&\r\n            itemDateStr < endDateStr &&\r\n            item.isCorrelation !== true\r\n          );\r\n        })\r\n        ?.map((item) => ({\r\n          ...item,\r\n          valueDate: item.valueDate?.split(\"T\")[0], // Предполагаем, что valueDate - строка с датой\r\n        }));\r\n\r\n      const updatedPoints = [];\r\n      const _createdPoints = [];\r\n\r\n      allDates.forEach((date) => {\r\n        const existingPoint = filteredData.find(\r\n          (item) => item.valueDate === date\r\n        );\r\n\r\n        if (existingPoint) {\r\n          updatedPoints.push(existingPoint);\r\n        } else {\r\n          _createdPoints.push({\r\n            id: date,\r\n            valueDate: date,\r\n            value: \"\",\r\n            isCorrelation: false,\r\n          });\r\n        }\r\n      });\r\n\r\n      // Сортируем данные по убыванию даты\r\n      updatedPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n      _createdPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n      // Устанавливаем данные\r\n      setPointsForGraphic([...updatedPoints, ..._createdPoints]);\r\n    }\r\n\r\n    if (typeGraphic === \"Ежемесячный\") {\r\n      // Группируем данные по месяцам и суммируем `valueDate` за каждый месяц\r\n      const monthlyData = data.reduce((acc, item) => {\r\n        const itemDate = new Date(item.valueDate);\r\n        const monthKey = `${itemDate.getFullYear()}-${itemDate.getMonth() + 1}`; // Год-месяц как ключ\r\n        if (\r\n          !isNaN(itemDate) &&\r\n          new Date(new Date().setMonth(new Date().getMonth() - 13)) < itemDate\r\n        ) {\r\n          if (item?.isCorrelation === true) {\r\n            acc[monthKey] = {\r\n              id: item.id,\r\n              valueSum: item.value,\r\n              year: itemDate.getFullYear(),\r\n              month: itemDate.getMonth() + 1,\r\n              isCorrelation: true,\r\n            };\r\n          }\r\n\r\n          // Если месяца ещё нет в acc, создаем начальный объект с valueSum = 0\r\n          if (!acc[monthKey] || !acc[monthKey]?.isCorrelation) {\r\n            if (!acc[monthKey]) {\r\n              acc[monthKey] = {\r\n                valueSum: 0,\r\n                year: itemDate.getFullYear(),\r\n                month: itemDate.getMonth() + 1,\r\n                isCorrelation: false,\r\n              };\r\n            }\r\n            acc[monthKey].valueSum += item.value;\r\n          }\r\n        }\r\n        return acc;\r\n      }, {});\r\n\r\n      // Формируем новый массив, включающий `valueDate` и `date` (последний день месяца)\r\n      const updatedMonthlyPoints = [];\r\n\r\n      // Для каждого месяца от 14 месяцев назад до текущего добавляем данные\r\n      for (let i = 0; i < 13; i++) {\r\n        const monthDate = new Date();\r\n        monthDate.setMonth(monthDate.getMonth() - i);\r\n        const monthKey = `${monthDate.getFullYear()}-${\r\n          monthDate.getMonth() + 1\r\n        }`;\r\n\r\n        // Если данных нет для этого месяца, создаем запись с суммой 0\r\n        if (!monthlyData[monthKey]) {\r\n          monthlyData[monthKey] = {\r\n            valueSum: 0,\r\n            year: monthDate.getFullYear(),\r\n            month: monthDate.getMonth() + 1,\r\n            isCorrelation: false,\r\n          };\r\n        }\r\n\r\n        const lastDayOfMonth = new Date(\r\n          monthDate.getFullYear(),\r\n          monthDate.getMonth() + 1,\r\n          0\r\n        ); // Получаем последний день месяца\r\n        const year = lastDayOfMonth.getFullYear();\r\n        const monthValue = lastDayOfMonth.getMonth() + 1; // Месяцы начинаются с 0\r\n        const date = lastDayOfMonth.getDate(); // Дата\r\n\r\n        updatedMonthlyPoints.push({\r\n          id: monthlyData[monthKey]?.id || null, // Если id не найден, присваиваем null\r\n          valueDate: `${year}-${monthValue}-${date}`,\r\n          value: monthlyData[monthKey].valueSum, // Сумма за месяц\r\n          isCorrelation: monthlyData[monthKey].isCorrelation,\r\n        });\r\n      }\r\n\r\n      // Сортируем данные по дате, от последнего месяца к первому\r\n      updatedMonthlyPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n\r\n      setPointsForGraphic(updatedMonthlyPoints);\r\n    }\r\n\r\n    if (typeGraphic === \"Ежегодовой\") {\r\n      // Группируем данные по годам и суммируем `valueDate` за каждый год\r\n      const yearData = data.reduce((acc, item) => {\r\n        const itemDate = new Date(item.valueDate);\r\n        const yearKey = `${itemDate.getFullYear()}`;\r\n        // Проверяем, что дата корректна и меньше чем на 13 лет от текущего года\r\n        if (\r\n          !isNaN(itemDate) &&\r\n          new Date().getFullYear() - 12 < itemDate.getFullYear()\r\n        ) {\r\n          if (item?.isCorrelation === true) {\r\n            acc[yearKey] = {\r\n              id: item.id,\r\n              valueSum: item.value,\r\n              year: itemDate.getFullYear(),\r\n              isCorrelation: true,\r\n            };\r\n          }\r\n\r\n          // Если года еще нет в acc, создаем начальный объект с valueSum = 0\r\n          if (!acc[yearKey] || !acc[yearKey]?.isCorrelation) {\r\n            if (!acc[yearKey]) {\r\n              acc[yearKey] = {\r\n                valueSum: 0,\r\n                year: itemDate.getFullYear(),\r\n                isCorrelation: false,\r\n              };\r\n            }\r\n            acc[yearKey].valueSum += item.value;\r\n          }\r\n        }\r\n        return acc;\r\n      }, {});\r\n\r\n      // Формируем новый массив, включающий `valueDate` и `date` (первый день года)\r\n      const updatedYearPoints = [];\r\n\r\n      // Для каждого года от 13 лет назад до текущего добавляем данные\r\n      for (let i = 0; i < 12; i++) {\r\n        const yearDate = new Date();\r\n        yearDate.setFullYear(yearDate.getFullYear() - i);\r\n        const yearKey = `${yearDate.getFullYear()}`;\r\n\r\n        // Если данных нет для этого года, создаем запись с суммой 0\r\n        if (!yearData[yearKey]) {\r\n          yearData[yearKey] = {\r\n            valueSum: 0,\r\n            year: yearDate.getFullYear(),\r\n            isCorrelation: false,\r\n          };\r\n        }\r\n\r\n        updatedYearPoints.push({\r\n          id: yearData[yearKey]?.id || null, // Если id не найден, присваиваем null\r\n          valueDate: `${yearDate.getFullYear()}-01-01`,\r\n          value: yearData[yearKey].valueSum, // Сумма за год\r\n          isCorrelation: yearData[yearKey].isCorrelation,\r\n        });\r\n      }\r\n\r\n      // Сортируем данные по дате, от последнего года к первому\r\n      updatedYearPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n\r\n      setPointsForGraphic(updatedYearPoints);\r\n    }\r\n    if (typeGraphic === \"13\" || typeGraphic === \"26\" || typeGraphic === \"52\") {\r\n      const today = new Date();\r\n      const end = new Date(today);\r\n      const start = new Date();\r\n      start.setDate(today.getDate() - (Number(typeGraphic) + 1) * 7);\r\n\r\n      const selectedDayOfWeek = parseInt(reportDay);\r\n      if (isNaN(selectedDayOfWeek)) {\r\n        throw new Error(\"selectedDayOfWeek должен быть числом.\");\r\n      }\r\n\r\n      const result = [];\r\n      let currentDate = new Date(start);\r\n\r\n      // Перемещаем currentDate на первый выбранный день недели\r\n      while (currentDate.getDay() !== selectedDayOfWeek) {\r\n        console.log(\"11111111111111\");\r\n        currentDate.setDate(currentDate.getDate() + 1);\r\n      }\r\n\r\n      // Цикл по неделям\r\n      while (currentDate <= end) {\r\n        console.log(\"2222222222222222\");\r\n        const nextDate = new Date(currentDate);\r\n        nextDate.setDate(currentDate.getDate() + 7);\r\n\r\n        // Фильтруем и суммируем значения для текущей недели\r\n        const currentSum = data\r\n          .filter((item) => {\r\n            const itemDate = new Date(item.valueDate);\r\n            const isValid =\r\n              currentDate <= itemDate &&\r\n              itemDate < nextDate &&\r\n              item.isCorrelation !== true;\r\n\r\n            return isValid;\r\n          })\r\n          .reduce((sum, item) => sum + item.value, 0);\r\n\r\n        // Создаем новую дату на день позже\r\n        const valueDate = new Date(nextDate.getTime() + 24 * 60 * 60 * 1000);\r\n\r\n        // Проверяем, что valueDate не позже сегодняшней даты\r\n        if (valueDate <= today) {\r\n          result.push({\r\n            value: currentSum,\r\n            valueDate: valueDate.toISOString().split(\"T\")[0],\r\n          });\r\n        }\r\n\r\n        currentDate = nextDate; // Переходим к следующей неделе\r\n      }\r\n\r\n      setPointsForGraphic(\r\n        result.sort((a, b) => new Date(b.valueDate) - new Date(a.valueDate))\r\n      );\r\n    }\r\n  }, [typeGraphic]);\r\n\r\n  // Построение svg картинки\r\n  useEffect(() => {\r\n    pointsForGraphic.sort(\r\n      (a, b) => new Date(a.valueDate) - new Date(b.valueDate)\r\n    );\r\n\r\n    // const formatDate = d3.timeFormat(\"%d.%m.%y\");\r\n    // const parseDate = d3.timeParse(\"%Y-%m-%d\");\r\n\r\n    const margin = { top: 40, right: 20, bottom: 80, left: 50 };\r\n\r\n    const minValue = d3.min(pointsForGraphic, (d) => d.value);\r\n    const maxValue = d3.max(pointsForGraphic, (d) => d.value);\r\n\r\n    // Устанавливаем верхнюю границу оси Y с небольшим запасом\r\n    const upperLimit = maxValue * 1.1; // Увеличиваем максимальное значение на 10%\r\n\r\n    const x = d3\r\n      .scalePoint()\r\n      .domain(\r\n        pointsForGraphic.map((d) =>\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        )\r\n      )\r\n      .range([margin.left, width - margin.right])\r\n      .padding(0);\r\n\r\n    // Если type === \"Обратная\", то ось Y будет инвертирована, а верхний предел будет больше\r\n    const y =\r\n      type === \"Обратная\"\r\n        ? d3\r\n            .scaleLinear()\r\n            .domain([0, upperLimit]) // Начинаем с 0 для обратного типа\r\n            .nice()\r\n            .range([margin.top, height - margin.bottom])\r\n        : d3\r\n            .scaleLinear()\r\n            .domain([0, upperLimit]) // Начинаем с 0 для обычного типа\r\n            .nice()\r\n            .range([height - margin.bottom, margin.top]);\r\n\r\n    const line = d3\r\n      .line()\r\n      .x((d) =>\r\n        x(\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        )\r\n      )\r\n      .y((d) => y(d.value))\r\n      .defined((d) => d.value !== null);\r\n\r\n    d3.select(svgRef.current).selectAll(\"*\").remove();\r\n\r\n    const svg = d3\r\n      .select(svgRef.current)\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height);\r\n\r\n    const tickValues = pointsForGraphic.map((d) =>\r\n      d.valueDate === \"\" || d.valueDate === null\r\n        ? \"дата\"\r\n        : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n    );\r\n\r\n    // Получаем значения для горизонтальных линий сетки с использованием y.ticks()\r\n    const yTickValues = y.ticks(5); // Используем метод ticks() для точных значений\r\n\r\n    // Добавляем вертикальные линии сетки\r\n    svg\r\n      .selectAll(\".grid-vertical\")\r\n      .data(tickValues)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"class\", \"grid-vertical\")\r\n      .attr(\"x1\", (d) => x(d))\r\n      .attr(\"x2\", (d) => x(d))\r\n      .attr(\"y1\", margin.top)\r\n      .attr(\"y2\", height - margin.bottom)\r\n      .attr(\"stroke\", \"#4a4a4a\") // Темный цвет для сетки\r\n      .attr(\"stroke-width\", 1)\r\n      .attr(\"opacity\", 0.3);\r\n\r\n    // Добавляем горизонтальные линии сетки\r\n    svg\r\n      .selectAll(\".grid-horizontal\")\r\n      .data(yTickValues)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"class\", \"grid-horizontal\")\r\n      .attr(\"x1\", margin.left)\r\n      .attr(\"x2\", width - margin.right)\r\n      .attr(\"y1\", (d) => y(d))\r\n      .attr(\"y2\", (d) => y(d))\r\n      .attr(\"stroke\", \"#4a4a4a\") // Темный цвет для сетки\r\n      .attr(\"stroke-width\", 1)\r\n      .attr(\"opacity\", 0.3);\r\n\r\n    const xAxis = d3.axisBottom(x);\r\n\r\n    svg\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n      .call(xAxis)\r\n      .selectAll(\"text\")\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .attr(\"text-anchor\", \"end\")\r\n      .attr(\"dx\", \"-10px\")\r\n      .attr(\"dy\", \"-5px\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .style(\"font-size\", \"12px\");\r\n\r\n    svg\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},0)`)\r\n      .call(d3.axisLeft(y).ticks(5).tickFormat(d3.format(\".2s\"))); // Format Y axis\r\n\r\n    pointsForGraphic.forEach((d, i) => {\r\n      if (i > 0) {\r\n        const prevValue = pointsForGraphic[i - 1].value;\r\n        // Reverse the line color logic based on the 'type' prop\r\n        const color =\r\n          type === \"Обратная\"\r\n            ? d.value < prevValue\r\n              ? \"blue\"\r\n              : \"red\" // Reverse logic for line color\r\n            : d.value < prevValue\r\n            ? \"red\"\r\n            : \"blue\"; // Normal logic for line color\r\n\r\n        svg\r\n          .append(\"path\")\r\n          .datum([pointsForGraphic[i - 1], d])\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", color)\r\n          .attr(\"stroke-width\", 2)\r\n          .attr(\"d\", line);\r\n      }\r\n    });\r\n\r\n    const getColor = (value, index) => {\r\n      if (index > 0) {\r\n        const prevValue = pointsForGraphic[index - 1].value;\r\n        // Reverse the color logic for points as well\r\n        return type === \"Обратная\"\r\n          ? value < prevValue\r\n            ? \"blue\"\r\n            : \"red\" // Reverse logic for points\r\n          : value < prevValue\r\n          ? \"red\"\r\n          : \"blue\"; // Normal logic for points\r\n      } else {\r\n        return \"green\";\r\n      }\r\n    };\r\n\r\n    svg\r\n      .selectAll(\"circle\")\r\n      .data(pointsForGraphic)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"cx\", (d) =>\r\n        x(\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        )\r\n      )\r\n      .attr(\"cy\", (d) => y(d.value))\r\n      .attr(\"r\", 5)\r\n      .attr(\"fill\", (d, i) => getColor(d.value, i)) // Apply the reversed color logic here\r\n      .on(\"mouseover\", (event, d) => {\r\n        d3.select(event.currentTarget).attr(\"r\", 7).attr(\"fill\", \"orange\");\r\n\r\n        const tooltipX = x(\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        );\r\n        const tooltipY = y(d.value) - 15;\r\n\r\n        // Формируем текст для тултипа\r\n        const dateText = `Дата: ${\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        }`;\r\n        const valueText = `Значение: ${d.value}`;\r\n        const textWidth = Math.max(dateText.length, valueText.length) * 6; // Оценочная ширина в пикселях\r\n\r\n        // Ширина тултипа\r\n        const tooltipWidth = Math.max(120, textWidth + 20);\r\n        const tooltipHeight = 50;\r\n\r\n        // Проверка на выход за границы\r\n        const isTopOutOfBound = tooltipY - tooltipHeight < margin.top;\r\n        const isRightOutOfBound =\r\n          tooltipX + tooltipWidth / 2 > width - margin.right;\r\n        const isLeftOutOfBound = tooltipX - tooltipWidth / 2 < margin.left;\r\n\r\n        let adjustedX = tooltipX;\r\n        if (isRightOutOfBound)\r\n          adjustedX = width - margin.right - tooltipWidth / 2;\r\n        else if (isLeftOutOfBound) adjustedX = margin.left + tooltipWidth / 2;\r\n\r\n        const adjustedY = isTopOutOfBound ? tooltipY + tooltipHeight : tooltipY;\r\n\r\n        // Получаем цвет точки\r\n        const pointColor = getColor(d.value, pointsForGraphic.indexOf(d));\r\n\r\n        const tooltipGroup = svg\r\n          .append(\"g\")\r\n          .attr(\"id\", \"tooltip\")\r\n          .attr(\"transform\", `translate(${adjustedX}, ${adjustedY})`);\r\n\r\n        tooltipGroup\r\n          .append(\"rect\")\r\n          .attr(\"x\", -tooltipWidth / 2)\r\n          .attr(\"y\", isTopOutOfBound ? 0 : -tooltipHeight)\r\n          .attr(\"width\", tooltipWidth)\r\n          .attr(\"height\", tooltipHeight)\r\n          .attr(\"fill\", pointColor) // Используем цвет точки для фона тултипа\r\n          .attr(\"rx\", 4)\r\n          .attr(\"ry\", 4);\r\n\r\n        tooltipGroup\r\n          .append(\"text\")\r\n          .attr(\"text-anchor\", \"middle\")\r\n          .attr(\"y\", isTopOutOfBound ? 15 : -30)\r\n          .style(\"font-size\", \"11px\")\r\n          .style(\"fill\", \"white\")\r\n          .style(\"font-family\", \"Montserrat, sans-serif\")\r\n          .text(dateText);\r\n\r\n        tooltipGroup\r\n          .append(\"text\")\r\n          .attr(\"text-anchor\", \"middle\")\r\n          .attr(\"y\", isTopOutOfBound ? 35 : -10)\r\n          .style(\"font-size\", \"11px\")\r\n          .style(\"fill\", \"white\")\r\n          .style(\"font-family\", \"Montserrat, sans-serif\")\r\n          .text(valueText);\r\n      })\r\n      .on(\"mouseout\", (event) => {\r\n        const d = d3.select(event.currentTarget).datum();\r\n        const index = pointsForGraphic.indexOf(d);\r\n        d3.select(event.currentTarget)\r\n          .attr(\"r\", 5)\r\n          .attr(\"fill\", getColor(d.value, index)); // Apply the reversed color logic here\r\n        svg.select(\"#tooltip\").remove();\r\n      });\r\n  }, [pointsForGraphic]);\r\n\r\n  // Для стрелок на графике\r\n  const handleArrowLeftClick = () => {\r\n    setCount((prevCount) => prevCount + 1);\r\n  };\r\n\r\n  const handleArrowRightClick = () => {\r\n    setCount((prevCount) => prevCount - 1);\r\n  };\r\n\r\n  const updateStatisticsData = () => {\r\n    setPointsForGraphic([]);\r\n\r\n    if (!data.length) return;\r\n\r\n    if (typeGraphic === \"Ежедневный\") {\r\n      const dayNow = new Date();\r\n      const currentWeekday = dayNow.getDay(); // Текущий день недели (0 - Воскресенье, 1 - Понедельник и т.д.)\r\n\r\n      // Определяем начальную дату - ближайший предыдущий день `day`, не более 7 дней назад\r\n      const startDate = new Date(dayNow);\r\n      let dayDifference;\r\n\r\n      if (currentWeekday >= reportDay) {\r\n        dayDifference = currentWeekday - reportDay;\r\n      } else {\r\n        dayDifference = 7 - (reportDay - currentWeekday);\r\n      }\r\n\r\n      startDate.setDate(dayNow.getDate() - dayDifference);\r\n\r\n      // Ограничиваем начальную дату максимум 7 днями назад от текущего дня\r\n      const maxStartDate = new Date(dayNow);\r\n      maxStartDate.setDate(dayNow.getDate() - 7);\r\n\r\n      if (startDate < maxStartDate) {\r\n        startDate.setTime(maxStartDate.getTime());\r\n      }\r\n\r\n      // Создаем массив всех дат за последние 7 дней\r\n      const last7Days = [];\r\n      for (let i = count; i < 7 + count; i++) {\r\n        const date = new Date(dayNow);\r\n        date.setDate(dayNow.getDate() - i);\r\n        last7Days.push(date.toISOString().split(\"T\")[0]);\r\n      }\r\n\r\n      // Группируем данные по дате и фильтруем\r\n      const dataMap = data.reduce((acc, item) => {\r\n        const itemDate = item.valueDate.split(\"T\")[0];\r\n        acc[itemDate] = {\r\n          ...item,\r\n          valueDate: itemDate,\r\n        };\r\n        return acc;\r\n      }, {});\r\n\r\n      // Создаем массив данных для последних 7 дней, добавляем нулевые значения, если данные отсутствуют\r\n      const updatedPoints = last7Days.map((date) => {\r\n        if (dataMap[date] && dataMap[date].isCorrelation !== true) {\r\n          return dataMap[date];\r\n        } else {\r\n          return {\r\n            id: date,\r\n            valueDate: date,\r\n            value: \"\", // Заполняем нулевым значением, если данных за день нет\r\n            isCorrelation: false,\r\n          };\r\n        }\r\n      });\r\n\r\n      const crPoints = updatedPoints.filter((item) => item.value === \"\");\r\n      const _updatedPoints = updatedPoints.filter((item) => item.value !== \"\");\r\n\r\n      setPointsForGraphic([..._updatedPoints, ...crPoints]);\r\n    }\r\n\r\n    if (typeGraphic === \"Ежемесячный\") {\r\n      // Группируем данные по месяцам и суммируем `valueDate` за каждый месяц\r\n      const monthlyData = data.reduce((acc, item) => {\r\n        const itemDate = new Date(item.valueDate);\r\n        const monthKey = `${itemDate.getFullYear()}-${itemDate.getMonth() + 1}`; // Год-месяц как ключ\r\n        if (\r\n          !isNaN(itemDate) &&\r\n          new Date(new Date().setMonth(new Date().getMonth() - 14 + count)) <\r\n            itemDate\r\n        ) {\r\n          if (item?.isCorrelation === true) {\r\n            acc[monthKey] = {\r\n              id: item.id,\r\n              valueSum: item.value,\r\n              year: itemDate.getFullYear(),\r\n              month: itemDate.getMonth() + 1,\r\n              isCorrelation: true,\r\n            };\r\n          }\r\n\r\n          // Если месяца ещё нет в acc, создаем начальный объект с valueSum = 0\r\n          if (!acc[monthKey] || !acc[monthKey]?.isCorrelation) {\r\n            if (!acc[monthKey]) {\r\n              acc[monthKey] = {\r\n                valueSum: 0,\r\n                year: itemDate.getFullYear(),\r\n                month: itemDate.getMonth() + 1,\r\n                isCorrelation: false,\r\n              };\r\n            }\r\n            acc[monthKey].valueSum += item.value;\r\n          }\r\n        }\r\n        return acc;\r\n      }, {});\r\n\r\n      // Формируем новый массив, включающий `valueDate` и `date` (последний день месяца)\r\n      const updatedMonthlyPoints = [];\r\n\r\n      // Для каждого месяца от 14 месяцев назад до текущего добавляем данные\r\n      for (let i = count; i < 13 + count; i++) {\r\n        const monthDate = new Date();\r\n        monthDate.setMonth(monthDate.getMonth() - i);\r\n        const monthKey = `${monthDate.getFullYear()}-${\r\n          monthDate.getMonth() + 1\r\n        }`;\r\n\r\n        // Если данных нет для этого месяца, создаем запись с суммой 0\r\n        if (!monthlyData[monthKey]) {\r\n          monthlyData[monthKey] = {\r\n            valueSum: 0,\r\n            year: monthDate.getFullYear(),\r\n            month: monthDate.getMonth() + 1,\r\n            isCorrelation: false,\r\n          };\r\n        }\r\n\r\n        const lastDayOfMonth = new Date(\r\n          monthDate.getFullYear(),\r\n          monthDate.getMonth() + 1,\r\n          0\r\n        ); // Получаем последний день месяца\r\n        const year = lastDayOfMonth.getFullYear();\r\n        const monthValue = lastDayOfMonth.getMonth() + 1; // Месяцы начинаются с 0\r\n        const date = lastDayOfMonth.getDate(); // Дата\r\n\r\n        updatedMonthlyPoints.push({\r\n          id: monthlyData[monthKey]?.id || null, // Если id не найден, присваиваем null\r\n          valueDate: `${year}-${monthValue}-${date}`, // Форматирование в 'год-месяц-день'\r\n          value: monthlyData[monthKey].valueSum, // Сумма за месяц\r\n          isCorrelation: monthlyData[monthKey].isCorrelation,\r\n        });\r\n      }\r\n\r\n      // Сортируем данные по дате, от последнего месяца к первому\r\n      updatedMonthlyPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n\r\n      setPointsForGraphic(updatedMonthlyPoints);\r\n    }\r\n\r\n    if (typeGraphic === \"Ежегодовой\") {\r\n      // Группируем данные по годам и суммируем `valueDate` за каждый год\r\n      const yearData = data.reduce((acc, item) => {\r\n        const itemDate = new Date(item.valueDate);\r\n        const yearKey = `${itemDate.getFullYear()}`;\r\n        // Проверяем, что дата корректна и меньше чем на 13 лет от текущего года\r\n        if (\r\n          !isNaN(itemDate) &&\r\n          new Date().getFullYear() - 12 < itemDate.getFullYear()\r\n        ) {\r\n          if (item?.isCorrelation === true) {\r\n            acc[yearKey] = {\r\n              id: item.id,\r\n              valueSum: item.value,\r\n              year: itemDate.getFullYear(),\r\n              isCorrelation: true,\r\n            };\r\n          }\r\n\r\n          // Если года еще нет в acc, создаем начальный объект с valueSum = 0\r\n          if (!acc[yearKey] || !acc[yearKey]?.isCorrelation) {\r\n            if (!acc[yearKey]) {\r\n              acc[yearKey] = {\r\n                valueSum: 0,\r\n                year: itemDate.getFullYear(),\r\n                isCorrelation: false,\r\n              };\r\n            }\r\n            acc[yearKey].valueSum += item.value;\r\n          }\r\n        }\r\n        return acc;\r\n      }, {});\r\n\r\n      // Формируем новый массив, включающий `valueDate` и `date` (первый день года)\r\n      const updatedYearPoints = [];\r\n\r\n      // Для каждого года от 13 лет назад до текущего добавляем данные\r\n      for (let i = count; i < 12 + count; i++) {\r\n        const yearDate = new Date();\r\n        yearDate.setFullYear(yearDate.getFullYear() - i);\r\n        const yearKey = `${yearDate.getFullYear()}`;\r\n\r\n        // Если данных нет для этого года, создаем запись с суммой 0\r\n        if (!yearData[yearKey]) {\r\n          yearData[yearKey] = {\r\n            valueSum: 0,\r\n            year: yearDate.getFullYear(),\r\n            isCorrelation: false,\r\n          };\r\n        }\r\n\r\n        updatedYearPoints.push({\r\n          id: yearData[yearKey]?.id || null, // Если id не найден, присваиваем null\r\n          valueDate: `${yearDate.getFullYear()}-01-01`,\r\n          value: yearData[yearKey].valueSum, // Сумма за год\r\n          isCorrelation: yearData[yearKey].isCorrelation,\r\n        });\r\n      }\r\n\r\n      // Сортируем данные по дате, от последнего года к первому\r\n      updatedYearPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n\r\n      setPointsForGraphic(updatedYearPoints);\r\n    }\r\n    if (typeGraphic === \"13\" || typeGraphic === \"26\" || typeGraphic === \"52\") {\r\n      const today = new Date();\r\n      today.setDate(today.getDate() - count * 7);\r\n      const end = new Date(today);\r\n\r\n      const start = new Date(end);\r\n      start.setDate(end.getDate() - (Number(typeGraphic) + 1) * 7);\r\n\r\n      const selectedDayOfWeek = parseInt(reportDay);\r\n      const result = [];\r\n\r\n      let currentDate = new Date(start);\r\n      let currentSum = 0;\r\n\r\n      // Перемещаем currentDate на первый выбранный день недели\r\n      while (currentDate.getDay() !== selectedDayOfWeek) {\r\n        currentDate.setDate(currentDate.getDate() + 1);\r\n      }\r\n\r\n      // Цикл по неделям\r\n      while (currentDate <= end) {\r\n        const nextDate = new Date(currentDate);\r\n        nextDate.setDate(currentDate.getDate() + 7);\r\n\r\n        // Фильтруем и суммируем значения для текущей недели\r\n        currentSum = data\r\n          .filter((item) => {\r\n            const itemDate = new Date(item.valueDate);\r\n            return (\r\n              currentDate <= itemDate &&\r\n              itemDate < nextDate &&\r\n              item.isCorrelation !== true\r\n            );\r\n          })\r\n          .reduce((sum, item) => sum + item.value, 0);\r\n\r\n        // Создаем новую дату на день позже\r\n        const valueDate = new Date(nextDate.getTime() + 24 * 60 * 60 * 1000);\r\n\r\n        // Проверяем, что valueDate не позже сегодняшней даты\r\n        if (valueDate <= today) {\r\n          result.push({\r\n            value: currentSum,\r\n            valueDate: valueDate.toISOString().split(\"T\")[0],\r\n          });\r\n        }\r\n\r\n        currentDate = nextDate; // Переходим к следующей неделе\r\n      }\r\n\r\n      setPointsForGraphic(\r\n        result.sort((a, b) => new Date(b.valueDate) - new Date(a.valueDate))\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateStatisticsData();\r\n  }, [count]);\r\n\r\n\r\n  \r\n  return (\r\n    <div className={classes.modal}>\r\n      <div className={classes.modalWindow}>\r\n        <img\r\n          src={exitModal}\r\n          alt=\"exitModal\"\r\n          onClick={() => exit()}\r\n          className={classes.exit}\r\n        />\r\n\r\n        <div className={classes.item_rowSVG}>\r\n          <span>{name}</span>\r\n\r\n          <div className={classes.row_svg_arrow}>\r\n            <svg ref={svgRef}></svg>\r\n            <div className={classes.blockArrrow}>\r\n              <div className={classes.statisticsArrow}>\r\n                <img\r\n                  src={arrowLeft}\r\n                  alt=\"arrowLeft\"\r\n                  onClick={handleArrowLeftClick}\r\n                />\r\n              </div>\r\n              <div className={classes.statisticsArrow}>\r\n                <img\r\n                  src={arrowRight}\r\n                  alt=\"arrowRight\"\r\n                  onClick={handleArrowRightClick}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={classes.item_rowBtns}>\r\n          {buttonTypes.map((item) => (\r\n            <button\r\n              key={type}\r\n              className={`${classes.btn} ${\r\n                typeGraphic === item.type ? classes.btn_active : \"\"\r\n              }`}\r\n              onClick={() => handleTypeGraphicButtonClick(item.type)}\r\n            >\r\n              {item.value}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalStatistic;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"PanelDragDrop_block__cXsLG\",\"name\":\"PanelDragDrop_name__a5nrj\",\"button\":\"PanelDragDrop_button__sN3aR\",\"active\":\"PanelDragDrop_active__0Obwj\"};","import React from \"react\";\r\nimport classes from \"./PanelDragDrop.module.css\";\r\nimport setting from \"@image/setting.svg\";\r\nimport exitModal from \"@image/exitModal.svg\";\r\n\r\nexport default function PanelDragDrop({ name, openSetting, onClick, deletePanel, isActive }) {\r\n  return (\r\n    <div data-tour=\"controlPanel\"  className={`${classes.block} ${isActive ? classes.active : \"\"}`} onClick = {onClick}>\r\n      <div className={classes.name}>\r\n        <span>{name}</span>\r\n      </div>\r\n      <div className={classes.button}>\r\n        <img data-tour=\"setting-controlPanel\" src={setting} alt=\"setting\" onClick={openSetting} />\r\n        <img data-tour=\"delete-controlPanel\" src={exitModal} alt=\"exitModal\" onClick={deletePanel} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalSetting_modal__EUtYN\",\"modalWindow\":\"ModalSetting_modalWindow__FLkN4\",\"exit\":\"ModalSetting_exit__ajeLI\",\"wrapper\":\"ModalSetting_wrapper__bieWa\",\"header\":\"ModalSetting_header__qghfj\",\"save\":\"ModalSetting_save__6u4Da\",\"blockSelect\":\"ModalSetting_blockSelect__F9Lou\"};","import React, { useState, useEffect } from \"react\";\r\nimport classes from \"./ModalSetting.module.css\";\r\nimport exitModal from \"@image/exitModal.svg\";\r\nimport Blacksavetmp from \"@image/Blacksavetmp.svg\";\r\nimport Input from \"@Custom/Input/Input\";\r\nimport Select from \"@Custom/Select/Select\";\r\nimport ButtonImage from \"@Custom/buttonImage/ButtonImage\";\r\nimport TableCheckBox from \"@Custom/tableCheckBox/TableCheckBox\";\r\nimport {useStatisticsHook} from \"@hooks\";\r\n\r\nexport default function ModalSetting({\r\n  exit,\r\n  currentControlPanel,\r\n  updateControlPanel,\r\n  statisticsIdsInPanel,\r\n}) {\r\n  const panelTypes = [\r\n    { id: \"Личная\", type: \"Личная\" },\r\n    { id: \"Глобальная\", type: \"Глобальная\" },\r\n  ];\r\n\r\n  const graphicTypes = [\r\n    { id: \"Ежедневный\", value: \"Ежедневный\", view: \"Ежедневный\" },\r\n    { id: \"Ежемесячный\", value: \"Ежемесячный\", view: \"Ежемесячный\" },\r\n    { id: \"Ежегодовой\", value: \"Ежегодовой\", view: \"Ежегодовой\" },\r\n    { id: \"13\", value: \"13\", view: \"13 недель\" },\r\n    { id: \"26\", value: \"26\", view: \"26 недель\" },\r\n    { id: \"52\", value: \"52\", view: \"52 недели\" },\r\n  ];\r\n\r\n  const [oldPanelName, setOldPanelName] = useState(\"\");\r\n  const [panelName, setPanelName] = useState(\"\");\r\n  const [panelType, setPanelType] = useState(\"\");\r\n  const [graphType, setGraphType] = useState(\"\");\r\n  const [statisticsChecked, setStatisticsChecked] = useState([]);\r\n\r\n  const {\r\n    statistics,\r\n    isLoadingGetStatistics,\r\n    isFetchingGetStatistics,\r\n    isErrorGetStatistics,\r\n  } = useStatisticsHook({ statisticData: false });\r\n\r\n  const saveUpdateControlPanel = async () => {\r\n    const Data = {};\r\n\r\n    Data.statisticIds = statisticsChecked;\r\n\r\n    if (oldPanelName !== panelName) {\r\n      Data.panelName = panelName;\r\n    }\r\n    if (currentControlPanel.panelType !== panelType) {\r\n      Data.panelType = panelType;\r\n    }\r\n    if (currentControlPanel.graphType !== graphType) {\r\n      Data.graphType = graphType;\r\n    }\r\n    await updateControlPanel({\r\n      ...Data,\r\n      id: currentControlPanel.id,\r\n    })\r\n      .unwrap()\r\n      .then(()=> {\r\n        exit();\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Ошибка:\", JSON.stringify(error, null, 2));\r\n      });\r\n  };\r\n\r\n  const handleChecboxChange = (id) => {\r\n    setStatisticsChecked((prev) => {\r\n      if (prev.includes(id)) {\r\n        return prev.filter((item) => item !== id);\r\n      } else {\r\n        return [...prev, id];\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentControlPanel) {\r\n      setPanelName(\r\n        currentControlPanel.isNameChanged ? currentControlPanel.panelName : `${currentControlPanel.panelName} ${currentControlPanel.controlPanelNumber}`\r\n      );\r\n      setOldPanelName(\r\n        currentControlPanel.isNameChanged ? currentControlPanel.panelName : `${currentControlPanel.panelName} ${currentControlPanel.controlPanelNumber}`\r\n      );\r\n      setPanelType(currentControlPanel.panelType);\r\n      setGraphType(currentControlPanel.graphType);\r\n    }\r\n    if (statisticsIdsInPanel) {\r\n      setStatisticsChecked(statisticsIdsInPanel);\r\n    }\r\n  }, [currentControlPanel, statisticsIdsInPanel]);\r\n\r\n  return (\r\n    <div className={classes.modal}>\r\n      <div className={classes.modalWindow}>\r\n        <img\r\n          src={exitModal}\r\n          alt=\"exitModal\"\r\n          onClick={exit}\r\n          className={classes.exit}\r\n        />\r\n        <div className={classes.wrapper}>\r\n          <div className={classes.header}>\r\n            <div className={classes.save}>\r\n              <ButtonImage\r\n                name={\"сохранить\"}\r\n                icon={Blacksavetmp}\r\n                onClick={saveUpdateControlPanel}\r\n              ></ButtonImage>\r\n            </div>\r\n            <Input\r\n              name={\"Название панели\"}\r\n              value={`${panelName}`}\r\n              onChange={setPanelName}\r\n            ></Input>\r\n            <div className={classes.blockSelect}>\r\n              <Select\r\n                name={\"Тип панели\"}\r\n                value={panelType}\r\n                onChange={setPanelType}\r\n                array={panelTypes}\r\n                arrayItem={\"type\"}\r\n              ></Select>\r\n              <Select\r\n                name={\"Тип графиков\"}\r\n                value={graphType}\r\n                onChange={setGraphType}\r\n                array={graphicTypes}\r\n                arrayItem={\"view\"}\r\n              ></Select>\r\n            </div>\r\n          </div>\r\n\r\n          <TableCheckBox\r\n            nameTable={\"Прикрепленные статистики\"}\r\n            array={statistics}\r\n            arrayItem={\"name\"}\r\n            arrayCheked={statisticsChecked}\r\n            handleChecboxChange={handleChecboxChange}\r\n          ></TableCheckBox>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"graphic\":\"CardStatistic_graphic__Yss59\"};","import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport classes from \"./CardStatistic.module.css\";\r\nimport getDateFormatSatatistic from \"@Custom/Function/getDateFormatStatistic\";\r\n\r\nexport default function CardStatistic({\r\n  name,\r\n  data,\r\n  typeGraphic,\r\n  type,\r\n  reportDay,\r\n  // Для модального окна\r\n  setOpenModalStatistic,\r\n  setModalStatisticName,\r\n  setModalStatisticDatas,\r\n}) {\r\n  const svgRef = useRef();\r\n\r\n  const [width, setWidth] = useState(300);\r\n  const [height, setHeight] = useState(340);\r\n\r\n  const [pointsForGraphic, setPointsForGraphic] = useState([]);\r\n\r\n  // Для клика по карточке\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const handlePointerDown = (event) => {\r\n    setIsDragging(false); // Сбрасываем флаг перетаскивания\r\n  };\r\n\r\n  const handlePointerMove = () => {\r\n    setIsDragging(true); // Устанавливаем флаг перетаскивания, если есть движение\r\n  };\r\n\r\n  const handlePointerUp = () => {\r\n    if (!isDragging) {\r\n      // Если не было движения, считаем это кликом\r\n      setOpenModalStatistic(true);\r\n      setModalStatisticName(name);\r\n      setModalStatisticDatas(data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (typeGraphic === \"Ежедневный\") {\r\n      const dayNow = new Date();\r\n      const currentWeekday = dayNow.getDay(); // Текущий день недели (0 - Воскресенье, 1 - Понедельник и т.д.)\r\n\r\n      // Определяем начальную дату - ближайший предыдущий день `day`, не более 7 дней назад\r\n      const startDate = new Date(dayNow);\r\n      let dayDifference;\r\n\r\n      if (currentWeekday >= reportDay) {\r\n        dayDifference = currentWeekday - reportDay;\r\n      } else {\r\n        dayDifference = 7 - (reportDay - currentWeekday);\r\n      }\r\n\r\n      startDate.setDate(dayNow.getDate() - dayDifference);\r\n\r\n      // Ограничиваем начальную дату максимум 7 днями назад от текущего дня\r\n      const maxStartDate = new Date(dayNow);\r\n      maxStartDate.setDate(dayNow.getDate() - 7);\r\n\r\n      if (startDate < maxStartDate) {\r\n        startDate.setTime(maxStartDate.getTime());\r\n      }\r\n\r\n      // Создаем массив всех дат за последние 7 дней\r\n      const last7Days = [];\r\n      for (let i = 0; i < 7 ; i++) {\r\n        const date = new Date(dayNow);\r\n        date.setDate(dayNow.getDate() - i);\r\n        last7Days.push(date.toISOString().split(\"T\")[0]);\r\n      }\r\n\r\n      // Группируем данные по дате и фильтруем\r\n      const dataMap = data.reduce((acc, item) => {\r\n        const itemDate = item.valueDate.split(\"T\")[0];\r\n        acc[itemDate] = {\r\n          ...item,\r\n          valueDate: itemDate,\r\n        };\r\n        return acc;\r\n      }, {});\r\n\r\n      // Создаем массив данных для последних 7 дней, добавляем нулевые значения, если данные отсутствуют\r\n      const updatedPoints = last7Days.map((date) => {\r\n        if (dataMap[date] && dataMap[date].isCorrelation !== true) {\r\n          return dataMap[date];\r\n        } else {\r\n          return {\r\n            id: date,\r\n            valueDate: date,\r\n            value: \"\", // Заполняем нулевым значением, если данных за день нет\r\n            isCorrelation: false,\r\n          };\r\n        }\r\n      });\r\n\r\n      const crPoints = updatedPoints.filter((item) => item.value === \"\");\r\n      const _updatedPoints = updatedPoints.filter((item) => item.value !== \"\");\r\n\r\n      setPointsForGraphic([..._updatedPoints, ...crPoints]);\r\n    }\r\n\r\n\r\n    if (typeGraphic === \"Ежемесячный\") {\r\n      // Группируем данные по месяцам и суммируем `valueDate` за каждый месяц\r\n      const monthlyData = data.reduce((acc, item) => {\r\n        const itemDate = new Date(item.valueDate);\r\n        const monthKey = `${itemDate.getFullYear()}-${itemDate.getMonth() + 1}`; // Год-месяц как ключ\r\n        if (\r\n          !isNaN(itemDate) &&\r\n          new Date(new Date().setMonth(new Date().getMonth() - 13)) < itemDate\r\n        ) {\r\n          if (item?.isCorrelation === true) {\r\n            acc[monthKey] = {\r\n              id: item.id,\r\n              valueSum: item.value,\r\n              year: itemDate.getFullYear(),\r\n              month: itemDate.getMonth() + 1,\r\n              isCorrelation: true,\r\n            };\r\n          }\r\n\r\n          // Если месяца ещё нет в acc, создаем начальный объект с valueSum = 0\r\n          if (!acc[monthKey] || !acc[monthKey]?.isCorrelation) {\r\n            if (!acc[monthKey]) {\r\n              acc[monthKey] = {\r\n                valueSum: 0,\r\n                year: itemDate.getFullYear(),\r\n                month: itemDate.getMonth() + 1,\r\n                isCorrelation: false,\r\n              };\r\n            }\r\n            acc[monthKey].valueSum += item.value;\r\n          }\r\n        }\r\n        return acc;\r\n      }, {});\r\n\r\n      // Формируем новый массив, включающий `valueDate` и `date` (последний день месяца)\r\n      const updatedMonthlyPoints = [];\r\n\r\n      // Для каждого месяца от 14 месяцев назад до текущего добавляем данные\r\n      for (let i = 0; i < 13; i++) {\r\n        const monthDate = new Date();\r\n        monthDate.setMonth(monthDate.getMonth() - i);\r\n        const monthKey = `${monthDate.getFullYear()}-${\r\n          monthDate.getMonth() + 1\r\n        }`;\r\n\r\n        // Если данных нет для этого месяца, создаем запись с суммой 0\r\n        if (!monthlyData[monthKey]) {\r\n          monthlyData[monthKey] = {\r\n            valueSum: 0,\r\n            year: monthDate.getFullYear(),\r\n            month: monthDate.getMonth() + 1,\r\n            isCorrelation: false,\r\n          };\r\n        }\r\n\r\n        const lastDayOfMonth = new Date(\r\n          monthDate.getFullYear(),\r\n          monthDate.getMonth() + 1,\r\n          0\r\n        ); // Получаем последний день месяца\r\n        const year = lastDayOfMonth.getFullYear();\r\n        const monthValue = lastDayOfMonth.getMonth() + 1; // Месяцы начинаются с 0\r\n        const date = lastDayOfMonth.getDate(); // Дата\r\n\r\n        updatedMonthlyPoints.push({\r\n          id: monthlyData[monthKey]?.id || null, // Если id не найден, присваиваем null\r\n          valueDate: `${year}-${monthValue}-${date}`,\r\n          value: monthlyData[monthKey].valueSum, // Сумма за месяц\r\n          isCorrelation: monthlyData[monthKey].isCorrelation,\r\n        });\r\n      }\r\n\r\n      // Сортируем данные по дате, от последнего месяца к первому\r\n      updatedMonthlyPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n\r\n      setPointsForGraphic(updatedMonthlyPoints);\r\n    }\r\n\r\n    if (typeGraphic === \"Ежегодовой\") {\r\n      // Группируем данные по годам и суммируем `valueDate` за каждый год\r\n      const yearData = data.reduce((acc, item) => {\r\n        const itemDate = new Date(item.valueDate);\r\n        const yearKey = `${itemDate.getFullYear()}`;\r\n        // Проверяем, что дата корректна и меньше чем на 13 лет от текущего года\r\n        if (\r\n          !isNaN(itemDate) &&\r\n          new Date().getFullYear() - 12 < itemDate.getFullYear()\r\n        ) {\r\n          if (item?.isCorrelation === true) {\r\n            acc[yearKey] = {\r\n              id: item.id,\r\n              valueSum: item.value,\r\n              year: itemDate.getFullYear(),\r\n              isCorrelation: true,\r\n            };\r\n          }\r\n\r\n          // Если года еще нет в acc, создаем начальный объект с valueSum = 0\r\n          if (!acc[yearKey] || !acc[yearKey]?.isCorrelation) {\r\n            if (!acc[yearKey]) {\r\n              acc[yearKey] = {\r\n                valueSum: 0,\r\n                year: itemDate.getFullYear(),\r\n                isCorrelation: false,\r\n              };\r\n            }\r\n            acc[yearKey].valueSum += item.value;\r\n          }\r\n        }\r\n        return acc;\r\n      }, {});\r\n\r\n      // Формируем новый массив, включающий `valueDate` и `date` (первый день года)\r\n      const updatedYearPoints = [];\r\n\r\n      // Для каждого года от 13 лет назад до текущего добавляем данные\r\n      for (let i = 0; i < 12; i++) {\r\n        const yearDate = new Date();\r\n        yearDate.setFullYear(yearDate.getFullYear() - i);\r\n        const yearKey = `${yearDate.getFullYear()}`;\r\n\r\n        // Если данных нет для этого года, создаем запись с суммой 0\r\n        if (!yearData[yearKey]) {\r\n          yearData[yearKey] = {\r\n            valueSum: 0,\r\n            year: yearDate.getFullYear(),\r\n            isCorrelation: false,\r\n          };\r\n        }\r\n\r\n        updatedYearPoints.push({\r\n          id: yearData[yearKey]?.id || null, // Если id не найден, присваиваем null\r\n          valueDate: `${yearDate.getFullYear()}-01-01`,\r\n          value: yearData[yearKey].valueSum, // Сумма за год\r\n          isCorrelation: yearData[yearKey].isCorrelation,\r\n        });\r\n      }\r\n\r\n      // Сортируем данные по дате, от последнего года к первому\r\n      updatedYearPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n\r\n      setPointsForGraphic(updatedYearPoints);\r\n    }\r\n    if (typeGraphic === \"13\" || typeGraphic === \"26\" || typeGraphic === \"52\") {\r\n      const today = new Date();\r\n      const end = new Date(today);\r\n      const start = new Date();\r\n      start.setDate(today.getDate() - (Number(typeGraphic) + 1) * 7);\r\n\r\n      const selectedDayOfWeek = parseInt(reportDay);\r\n      if (isNaN(selectedDayOfWeek)) {\r\n        throw new Error(\"selectedDayOfWeek должен быть числом.\");\r\n      }\r\n\r\n      const result = [];\r\n      let currentDate = new Date(start);\r\n\r\n      // Перемещаем currentDate на первый выбранный день недели\r\n      while (currentDate.getDay() !== selectedDayOfWeek) {\r\n        currentDate.setDate(currentDate.getDate() + 1);\r\n      }\r\n\r\n      // Цикл по неделям\r\n      while (currentDate <= end) {\r\n        const nextDate = new Date(currentDate);\r\n        nextDate.setDate(currentDate.getDate() + 7);\r\n\r\n        // Фильтруем и суммируем значения для текущей недели\r\n        const currentSum = data\r\n          .filter((item) => {\r\n            const itemDate = new Date(item.valueDate);\r\n            const isValid =\r\n              currentDate <= itemDate &&\r\n              itemDate < nextDate &&\r\n              item.isCorrelation !== true;\r\n\r\n            return isValid;\r\n          })\r\n          .reduce((sum, item) => sum + item.value, 0);\r\n\r\n        // Создаем новую дату на день позже\r\n        const valueDate = new Date(nextDate.getTime() + 24 * 60 * 60 * 1000);\r\n\r\n        // Проверяем, что valueDate не позже сегодняшней даты\r\n        if (valueDate <= today) {\r\n          result.push({\r\n            value: currentSum,\r\n            valueDate: valueDate.toISOString().split(\"T\")[0],\r\n          });\r\n        }\r\n\r\n        currentDate = nextDate; // Переходим к следующей неделе\r\n      }\r\n\r\n      setPointsForGraphic(\r\n        result.sort((a, b) => new Date(b.valueDate) - new Date(a.valueDate))\r\n      );\r\n    }\r\n  }, [data, typeGraphic]);\r\n\r\n  useEffect(() => {\r\n    pointsForGraphic?.sort(\r\n      (a, b) => new Date(a.valueDate) - new Date(b.valueDate)\r\n    );\r\n\r\n    const margin = { top: 20, right: 20, bottom: 40, left: 20 };\r\n\r\n    const minValue = d3.min(pointsForGraphic, (d) => d.value);\r\n    const maxValue = d3.max(pointsForGraphic, (d) => d.value);\r\n\r\n    // Устанавливаем верхнюю границу оси Y с небольшим запасом\r\n    const upperLimit = maxValue * 1.1; // Увеличиваем максимальное значение на 10%\r\n\r\n    const x = d3\r\n      .scalePoint()\r\n      .domain(\r\n        pointsForGraphic.map((d) =>\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        )\r\n      )\r\n      .range([margin.left, width - margin.right])\r\n      .padding(0);\r\n\r\n    // Если type === \"Обратная\", то ось Y будет инвертирована, а верхний предел будет больше\r\n    const y =\r\n      type === \"Обратная\"\r\n        ? d3\r\n            .scaleLinear()\r\n            .domain([0, upperLimit]) // Начинаем с 0 для обратного типа\r\n            .nice()\r\n            .range([margin.top, height - margin.bottom])\r\n        : d3\r\n            .scaleLinear()\r\n            .domain([0, upperLimit]) // Начинаем с 0 для обычного типа\r\n            .nice()\r\n            .range([height - margin.bottom, margin.top]);\r\n\r\n    const line = d3\r\n      .line()\r\n      .x((d) =>\r\n        x(\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        )\r\n      )\r\n      .y((d) => y(d.value))\r\n      .defined((d) => d.value !== null);\r\n\r\n    d3.select(svgRef.current).selectAll(\"*\").remove();\r\n\r\n    const svg = d3\r\n      .select(svgRef.current)\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height);\r\n\r\n    const tickValues = pointsForGraphic.map((d) =>\r\n      d.valueDate === \"\" || d.valueDate === null\r\n        ? \"дата\"\r\n        : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n    );\r\n\r\n    // Получаем значения для горизонтальных линий сетки с использованием y.ticks()\r\n    const yTickValues = y.ticks(5); // Используем метод ticks() для точных значений\r\n\r\n    // Добавляем вертикальные линии сетки\r\n    svg\r\n      .selectAll(\".grid-vertical\")\r\n      .data(tickValues)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"class\", \"grid-vertical\")\r\n      .attr(\"x1\", (d) => x(d))\r\n      .attr(\"x2\", (d) => x(d))\r\n      .attr(\"y1\", margin.top)\r\n      .attr(\"y2\", height - margin.bottom)\r\n      .attr(\"stroke\", \"#4a4a4a\") // Темный цвет для сетки\r\n      .attr(\"stroke-width\", 1)\r\n      .attr(\"opacity\", 0.3);\r\n\r\n    // Добавляем горизонтальные линии сетки\r\n    svg\r\n      .selectAll(\".grid-horizontal\")\r\n      .data(yTickValues)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"class\", \"grid-horizontal\")\r\n      .attr(\"x1\", margin.left)\r\n      .attr(\"x2\", width - margin.right)\r\n      .attr(\"y1\", (d) => y(d))\r\n      .attr(\"y2\", (d) => y(d))\r\n      .attr(\"stroke\", \"#4a4a4a\") // Темный цвет для сетки\r\n      .attr(\"stroke-width\", 1)\r\n      .attr(\"opacity\", 0.3);\r\n\r\n    const xAxis = d3\r\n      .axisBottom(x)\r\n      .tickFormat(() => \"\")\r\n      .tickSize(0);\r\n\r\n    svg\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n      .call(xAxis)\r\n      .selectAll(\"text\")\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .attr(\"text-anchor\", \"end\")\r\n      .attr(\"dx\", \"-10px\")\r\n      .attr(\"dy\", \"-5px\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .style(\"font-size\", \"12px\");\r\n\r\n    const yAxis = d3\r\n      .axisLeft(y)\r\n      .tickFormat(() => \"\")\r\n      .tickSize(0);\r\n\r\n    svg\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},0)`)\r\n      .call(yAxis);\r\n\r\n    pointsForGraphic.forEach((d, i) => {\r\n      if (i > 0) {\r\n        const prevValue = pointsForGraphic[i - 1].value;\r\n        // Reverse the line color logic based on the 'type' prop\r\n        const color =\r\n          type === \"Обратная\"\r\n            ? d.value < prevValue\r\n              ? \"blue\"\r\n              : \"red\" // Reverse logic for line color\r\n            : d.value < prevValue\r\n            ? \"red\"\r\n            : \"blue\"; // Normal logic for line color\r\n\r\n        svg\r\n          .append(\"path\")\r\n          .datum([pointsForGraphic[i - 1], d])\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", color)\r\n          .attr(\"stroke-width\", 2)\r\n          .attr(\"d\", line);\r\n      }\r\n    });\r\n\r\n    const getColor = (value, index) => {\r\n      if (index > 0) {\r\n        const prevValue = pointsForGraphic[index - 1].value;\r\n        // Reverse the color logic for points as well\r\n        return type === \"Обратная\"\r\n          ? value < prevValue\r\n            ? \"blue\"\r\n            : \"red\" // Reverse logic for points\r\n          : value < prevValue\r\n          ? \"red\"\r\n          : \"blue\"; // Normal logic for points\r\n      } else {\r\n        return \"blue\";\r\n      }\r\n    };\r\n\r\n    svg\r\n      .selectAll(\"circle\")\r\n      .data(pointsForGraphic)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"cx\", (d) =>\r\n        x(\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        )\r\n      )\r\n      .attr(\"cy\", (d) => y(d.value))\r\n      .attr(\"r\", 5)\r\n      .attr(\"fill\", (d, i) => getColor(d.value, i)) // Apply the reversed color logic here\r\n      .on(\"mouseover\", (event, d) => {\r\n        d3.select(event.currentTarget).attr(\"r\", 7).attr(\"fill\", \"orange\");\r\n\r\n        const tooltipX = x(\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        );\r\n        const tooltipY = y(d.value) - 15;\r\n\r\n        // Формируем текст для тултипа\r\n        const dateText = `Дата: ${\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        }`;\r\n        const valueText = `Значение: ${d.value}`;\r\n        const textWidth = Math.max(dateText.length, valueText.length) * 6; // Оценочная ширина в пикселях\r\n\r\n        // Ширина тултипа\r\n        const tooltipWidth = Math.max(120, textWidth + 20);\r\n        const tooltipHeight = 50;\r\n\r\n        // Проверка на выход за границы\r\n        const isTopOutOfBound = tooltipY - tooltipHeight < margin.top;\r\n        const isRightOutOfBound =\r\n          tooltipX + tooltipWidth / 2 > width - margin.right;\r\n        const isLeftOutOfBound = tooltipX - tooltipWidth / 2 < margin.left;\r\n\r\n        let adjustedX = tooltipX;\r\n        if (isRightOutOfBound)\r\n          adjustedX = width - margin.right - tooltipWidth / 2;\r\n        else if (isLeftOutOfBound) adjustedX = margin.left + tooltipWidth / 2;\r\n\r\n        const adjustedY = isTopOutOfBound ? tooltipY + tooltipHeight : tooltipY;\r\n\r\n        // Получаем цвет точки\r\n        const pointColor = getColor(d.value, pointsForGraphic.indexOf(d));\r\n\r\n        const tooltipGroup = svg\r\n          .append(\"g\")\r\n          .attr(\"id\", \"tooltip\")\r\n          .attr(\"transform\", `translate(${adjustedX}, ${adjustedY})`);\r\n\r\n        tooltipGroup\r\n          .append(\"rect\")\r\n          .attr(\"x\", -tooltipWidth / 2)\r\n          .attr(\"y\", isTopOutOfBound ? 0 : -tooltipHeight)\r\n          .attr(\"width\", tooltipWidth)\r\n          .attr(\"height\", tooltipHeight)\r\n          .attr(\"fill\", pointColor) // Используем цвет точки для фона тултипа\r\n          .attr(\"rx\", 4)\r\n          .attr(\"ry\", 4);\r\n\r\n        tooltipGroup\r\n          .append(\"text\")\r\n          .attr(\"text-anchor\", \"middle\")\r\n          .attr(\"y\", isTopOutOfBound ? 15 : -30)\r\n          .style(\"font-size\", \"11px\")\r\n          .style(\"fill\", \"white\")\r\n          .style(\"font-family\", \"Montserrat, sans-serif\")\r\n          .text(dateText);\r\n\r\n        tooltipGroup\r\n          .append(\"text\")\r\n          .attr(\"text-anchor\", \"middle\")\r\n          .attr(\"y\", isTopOutOfBound ? 35 : -10)\r\n          .style(\"font-size\", \"11px\")\r\n          .style(\"fill\", \"white\")\r\n          .style(\"font-family\", \"Montserrat, sans-serif\")\r\n          .text(valueText);\r\n      })\r\n      .on(\"mouseout\", (event) => {\r\n        const d = d3.select(event.currentTarget).datum();\r\n        const index = pointsForGraphic.indexOf(d);\r\n        d3.select(event.currentTarget)\r\n          .attr(\"r\", 5)\r\n          .attr(\"fill\", getColor(d.value, index)); // Apply the reversed color logic here\r\n        svg.select(\"#tooltip\").remove();\r\n      });\r\n  }, [pointsForGraphic]);\r\n\r\n  return (\r\n    <div\r\n      data-tour=\"cardStatistics\"\r\n      className={classes.graphic}\r\n      onPointerDown={handlePointerDown}\r\n      onPointerMove={handlePointerMove}\r\n      onPointerUp={handlePointerUp}\r\n    >\r\n      <span>{name}</span>\r\n      <svg ref={svgRef}></svg>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport CardStatistic from \"../CardStatistic\";\r\n\r\nexport default function SortableCard({\r\n    id,\r\n    item,\r\n    type,\r\n    typeGraphic,\r\n    reportDay,\r\n    setOpenModalStatistic,\r\n    setModalStatisticName,\r\n    setModalStatisticDatas,\r\n  }) {\r\n  const { attributes, listeners, setNodeRef, transform, transition } =\r\n    useSortable({ id });\r\n\r\n  const style = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n  };\r\n  return (\r\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\r\n      <CardStatistic\r\n        name={item.name}\r\n        data={[...item.statisticDatas]}\r\n        type={type}\r\n        typeGraphic={typeGraphic}\r\n        reportDay={reportDay}\r\n        setOpenModalStatistic={setOpenModalStatistic}\r\n        setModalStatisticName={setModalStatisticName}\r\n        setModalStatisticDatas={setModalStatisticDatas}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport classes from \"./ControlPanel.module.css\";\r\nimport Headers from \"@Custom/Headers/Headers\";\r\nimport BottomHeaders from \"@Custom/Headers/BottomHeaders/BottomHeaders\";\r\n\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { useControlPanel } from \"@hooks\";\r\nimport { usePostsHook } from \"@hooks\";\r\nimport { ModalSelectRadio } from \"@Custom/modalSelectRadio/ModalSelectRadio\";\r\nimport { useModalSelectRadio } from \"@hooks\";\r\nimport ModalWindow from \"@Custom/ModalWindow\";\r\nimport HandlerMutation from \"@Custom/HandlerMutation.jsx\";\r\nimport HandlerQeury from \"@Custom/HandlerQeury.jsx\";\r\n\r\nimport ModalStatistic from \"./GraphicStatistics/modal/ModalStatistic\";\r\nimport PanelDragDrop from \"./panelDragDrop/PanelDragDrop\";\r\nimport ModalSetting from \"./modalSetting/ModalSetting\";\r\nimport SortableCard from \"./GraphicStatistics/card/sortable/SortableCard\";\r\n\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n  SortableContext,\r\n  arrayMove,\r\n  sortableKeyboardCoordinates,\r\n  rectSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport {\r\n  saveToIndexedDB,\r\n  deleteFromIndexedDB,\r\n  loadFromIndexedDB,\r\n} from \"@utils/src/index.js\";\r\nimport usePanelToStatisticsHook from \"@hooks/usePanelToStatisticsHook\";\r\nimport { debounce, isEqual } from \"lodash\";\r\n\r\nimport { ConfigProvider, Tour } from \"antd\";\r\nimport ruRU from \"antd/locale/ru_RU\";\r\n\r\nexport default function ControlPanel() {\r\n  const [openModalSetting, setOpenModalSetting] = useState(false);\r\n  const [openModalCreate, setOpenModalCreate] = useState(false);\r\n  const [openModalDelete, setOpenModalDelete] = useState(false);\r\n\r\n  const [selectedControlPanelId, setSelectedControlPanelId] = useState();\r\n  const [arrayAllControlPanel, setArrayAllControlPanel] = useState([]);\r\n\r\n  const [cards, setCards] = useState([]);\r\n\r\n  // Для модального окна статистики\r\n  const [openModalStatistic, setOpenModalStatistic] = useState(false);\r\n  const [modalStatisticName, setModalStatisticName] = useState(\"\");\r\n  const [modalStatisticDatas, setModalStatisticDatas] = useState([]);\r\n\r\n  const refCreate = useRef(null);\r\n  const [openHint, setOpenHint] = useState(false);\r\n\r\n  const steps = [\r\n    {\r\n      title: \"Создать\",\r\n      description: \"Нажмите для создания панели управления\",\r\n      target: () => refCreate.current,\r\n    },\r\n    {\r\n      title: \"Панель управления\",\r\n      description: \"Нажмите для показа содержимого (зажмите и поменяйте порядок панелей управлений)\",\r\n      target: () => document.querySelector('[data-tour=\"controlPanel\"]'),\r\n      disabled: !document.querySelector('[data-tour=\"controlPanel\"]'),\r\n    },\r\n    {\r\n      title: \"Настройки\",\r\n      description: \"Нажмите и отредактируйте панель управления\",\r\n      target: () => document.querySelector('[data-tour=\"setting-controlPanel\"]'),\r\n      disabled: !document.querySelector('[data-tour=\"setting-controlPanel\"]'),\r\n    },\r\n    {\r\n      title: \"Удалить\",\r\n      description: \"Нажмите и удалите панель управления\",\r\n      target: () => document.querySelector('[data-tour=\"delete-controlPanel\"]'),\r\n      disabled: !document.querySelector('[data-tour=\"delete-controlPanel\"]'),\r\n    },\r\n    {\r\n      title: \"Карточка статистики\",\r\n      description: \"Нажмите для показа подробной статистики (зажмите и поменяйте порядок статистик)\",\r\n      target: () => document.querySelector('[data-tour=\"cardStatistics\"]'),\r\n      disabled: !document.querySelector('[data-tour=\"cardStatistics\"]'),\r\n    },\r\n  ].filter((step) => {\r\n    if (step.target.toString().includes(\"querySelector\")) {\r\n      return !step.disabled;\r\n    }\r\n    return true;\r\n  });\r\n\r\n  const {\r\n    reduxSelectedOrganizationId,\r\n    reduxSelectedOrganizationReportDay,\r\n\r\n    // Получение всех панелей по организации\r\n    allControlPanel,\r\n    isLoadingGetAllControlPanel,\r\n    isFetchingGetAllControlPanel,\r\n    isErrorGetAllControlPanel,\r\n\r\n    // Получение панели по id\r\n    currentControlPanel,\r\n    statisticsIdsInPanel,\r\n    statisticsPoints,\r\n    isLoadingGetontrolPanelId,\r\n    isFetchingGetontrolPanelId,\r\n    isErrorGetontrolPanelId,\r\n\r\n    // Создание панели\r\n    postControlPanel,\r\n    isLoadingPostControlPanelMutation,\r\n    isSuccessPostControlPanelMutation,\r\n    isErrorPostControlPanelMutation,\r\n    ErrorPostControlPanel,\r\n    localIsResponsePostControlPanelMutation,\r\n\r\n    //  Обновление\r\n    updateControlPanel,\r\n    isLoadingUpdateControlPanelMutation,\r\n    isSuccessUpdateControlPanelMutation,\r\n    isErrorUpdateControlPanelMutation,\r\n    ErrorUpdateControlPanel,\r\n    localIsResponseUpdateControlPanelMutation,\r\n\r\n    // Удаление статистики\r\n    deleteControlPanel,\r\n    isLoadingDeleteControlPanelMutation,\r\n    isSuccessDeleteControlPanelMutation,\r\n    isErrorDeleteControlPanelMutation,\r\n    ErrorDeleteControlPanel,\r\n    localIsResponseDeleteControlPanelMutation,\r\n  } = useControlPanel({ selectedControlPanelId });\r\n\r\n  const { allPosts, isLoadingGetPosts, isErrorGetPosts } = usePostsHook();\r\n\r\n  const {\r\n    selectedID: selectedPostIdForCreated,\r\n    selectedName,\r\n\r\n    handleRadioChange,\r\n    handleInputChangeModalSearch,\r\n\r\n    filterArraySearchModal,\r\n    inputSearchModal,\r\n  } = useModalSelectRadio({ array: allPosts, arrayItem: \"postName\" });\r\n\r\n  const getControlPanelId = (id) => {\r\n    saveToIndexedDB(\r\n      reduxSelectedOrganizationId,\r\n      arrayAllControlPanel.map(({ id, orderNumber, panelName }) => ({\r\n        id,\r\n        orderNumber,\r\n        panelName,\r\n      })),\r\n      id\r\n    );\r\n    console.log(\"getControlPanelId\");\r\n    setSelectedControlPanelId(id);\r\n  };\r\n\r\n  const openCreate = () => {\r\n    setOpenModalCreate(true);\r\n  };\r\n  const createControlPanel = async () => {\r\n    await postControlPanel({\r\n      orderNumber: allControlPanel.length == 0 ? 1 : allControlPanel.length + 1,\r\n      panelName: `${selectedName} №`,\r\n      organizationId: reduxSelectedOrganizationId,\r\n      postId: selectedPostIdForCreated,\r\n    })\r\n      .unwrap()\r\n      .then(() => {\r\n        setOpenModalCreate(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Ошибка:\", JSON.stringify(error, null, 2));\r\n      });\r\n  };\r\n  const removeControlPanel = async () => {\r\n    try {\r\n      // Удаляем панель управления через API\r\n      await deleteControlPanel({\r\n        controlPanelId: selectedControlPanelId,\r\n      }).unwrap();\r\n\r\n      setSelectedControlPanelId();\r\n      // Закрываем модальное окно\r\n      setOpenModalDelete(false);\r\n\r\n      // Удаляем панель управления из IndexedDB\r\n      deleteFromIndexedDB(reduxSelectedOrganizationId, selectedControlPanelId)\r\n        .then(() => {\r\n          console.log(\r\n            `Панель управления с id ${selectedControlPanelId} успешно удалена из IndexedDB.`\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Ошибка при удалении из IndexedDB:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.error(\r\n        \"Ошибка при удалении панели управления:\",\r\n        JSON.stringify(error, null, 2)\r\n      );\r\n    }\r\n  };\r\n\r\n  const onDragEnd_ControlPanel = async (result) => {\r\n    const { source, destination } = result;\r\n\r\n    // Если элемент не перемещен в допустимую область, ничего не делаем\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    // Создаем новый массив состояний\r\n    const updatedState = Array.from(arrayAllControlPanel);\r\n\r\n    // Перемещаем элемент\r\n    const [movedItem] = updatedState.splice(source.index, 1);\r\n    updatedState.splice(destination.index, 0, movedItem);\r\n\r\n    // Обновляем порядковые номера\r\n    const updatedArray = updatedState.map((item, index) => ({\r\n      ...item,\r\n      orderNumber: index + 1,\r\n    }));\r\n\r\n    // Обновляем состояние\r\n    setArrayAllControlPanel(updatedArray);\r\n\r\n    try {\r\n      // Сохраняем массив в IndexedDB\r\n      await saveToIndexedDB(\r\n        reduxSelectedOrganizationId,\r\n        updatedArray.map(({ id, orderNumber, panelName }) => ({\r\n          id,\r\n          orderNumber,\r\n          panelName,\r\n        }))\r\n      );\r\n\r\n      console.log(\"Данные успешно сохранены в IndexedDB\");\r\n    } catch (error) {\r\n      console.error(\"Ошибка при сохранении данных в IndexedDB:\", error);\r\n    }\r\n  };\r\n\r\n  const btnYes = () => {\r\n    removeControlPanel();\r\n  };\r\n\r\n  const btnNo = () => {\r\n    setOpenModalDelete(false);\r\n  };\r\n\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter: sortableKeyboardCoordinates,\r\n    })\r\n  );\r\n\r\n  const {\r\n    updatePanelToStatisticsUpdateOrderNumbers,\r\n    isLoadingPanelToStatisticsUpdateOrderNumbersMutation,\r\n    isSuccessPanelToStatisticsUpdateOrderNumbersMutation,\r\n    isErrorPanelToStatisticsUpdateOrderNumbersMutation,\r\n    ErrorPanelToStatisticsUpdateOrderNumbersMutation,\r\n    resetPanelToStatisticsUpdateOrderNumbersMutation,\r\n    localIsResponsePanelToStatisticsUpdateOrderNumbersMutation,\r\n  } = usePanelToStatisticsHook();\r\n\r\n  const debouncedUpdate = useCallback(\r\n    debounce((updatedStatistics) => {\r\n      updatePanelToStatisticsUpdateOrderNumbers(updatedStatistics);\r\n    }, 5000),\r\n    []\r\n  );\r\n\r\n  const handleDragEnd_CardStatstic = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active.id !== over.id) {\r\n      setCards((items) => {\r\n        const oldIndex = items.findIndex((item) => item.id === active.id);\r\n        const newIndex = items.findIndex((item) => item.id === over.id);\r\n\r\n        const newItems = arrayMove(items, oldIndex, newIndex);\r\n\r\n        const updatedStatistics = newItems.map((item, index) => ({\r\n          _id: item.panelToStatisticsId,\r\n          orderStatisticNumber: index + 1,\r\n        }));\r\n\r\n        debouncedUpdate(updatedStatistics);\r\n\r\n        return newItems;\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(allControlPanel).length > 0) {\r\n      loadFromIndexedDB(reduxSelectedOrganizationId, (data) => {\r\n        if (data.length > 0) {\r\n          setArrayAllControlPanel(() => {\r\n            return allControlPanel\r\n              .map((panel) => {\r\n                const matchingData = data.find((item) => item.id === panel.id);\r\n                if (matchingData) {\r\n                  return {\r\n                    ...panel,\r\n                    orderNumber: matchingData.orderNumber,\r\n                    isActive: matchingData.isActive,\r\n                  };\r\n                }\r\n                return panel;\r\n              })\r\n              .sort((a, b) => a.orderNumber - b.orderNumber);\r\n          });\r\n        } else {\r\n          setArrayAllControlPanel(allControlPanel);\r\n        }\r\n      });\r\n    } else {\r\n      setArrayAllControlPanel(allControlPanel);\r\n    }\r\n  }, [allControlPanel]);\r\n\r\n  // Сброс cards при изменении reduxSelectedOrganizationId\r\n  useEffect(() => {\r\n    setCards([]);\r\n  }, [reduxSelectedOrganizationId]);\r\n\r\n  // Обновление cards при изменении statisticsPoints\r\n  useEffect(() => {\r\n    if (statisticsPoints && !isEqual(statisticsPoints, cards)) {\r\n      setCards(statisticsPoints);\r\n    }\r\n  }, [statisticsPoints]);\r\n\r\n  return (\r\n    <div className={classes.dialog}>\r\n      <Headers name={\"панель управления\"} funcActiveHint={() => setOpenHint(true)}>\r\n        <BottomHeaders create={openCreate}  refCreate={refCreate} ></BottomHeaders>\r\n      </Headers>\r\n\r\n\r\n      <ConfigProvider locale={ruRU}>\r\n        <Tour\r\n          open={openHint}\r\n          onClose={() => setOpenHint(false)}\r\n          steps={steps}\r\n        />\r\n      </ConfigProvider>\r\n\r\n      <div className={classes.main}>\r\n        <DragDropContext onDragEnd={onDragEnd_ControlPanel}>\r\n          <Droppable droppableId=\"panelList\" direction=\"horizontal\">\r\n            {(provided) => (\r\n              <div\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n                className={classes.droppableContainer}\r\n              >\r\n                {arrayAllControlPanel?.map((item, index) => (\r\n                  <Draggable\r\n                    key={index}\r\n                    draggableId={`item-${index}`}\r\n                    index={index}\r\n                  >\r\n                    {(provided) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                      >\r\n                        <PanelDragDrop\r\n                          isActive={currentControlPanel.id === item.id}\r\n                          openSetting={() => setOpenModalSetting(true)}\r\n                          name={\r\n                            item.isNameChanged\r\n                              ? item.panelName\r\n                              : `${item.panelName} ${item.controlPanelNumber}`\r\n                          }\r\n                          onClick={() => getControlPanelId(item.id)}\r\n                          deletePanel={() => setOpenModalDelete(true)}\r\n                        ></PanelDragDrop>\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n\r\n        {cards.length > 0 && (\r\n          <DndContext\r\n            sensors={sensors}\r\n            collisionDetection={closestCenter}\r\n            onDragEnd={handleDragEnd_CardStatstic}\r\n          >\r\n            <SortableContext items={cards} strategy={rectSortingStrategy}>\r\n              <div className={classes.graphics}>\r\n                {cards.map((item) => (\r\n                  <SortableCard\r\n                    key={item.id}\r\n                    id={item.id}\r\n                    item={item}\r\n                    type={\"Прямая\"}\r\n                    typeGraphic={currentControlPanel.graphType}\r\n                    reportDay={reduxSelectedOrganizationReportDay}\r\n                    setOpenModalStatistic={setOpenModalStatistic}\r\n                    setModalStatisticName={setModalStatisticName}\r\n                    setModalStatisticDatas={setModalStatisticDatas}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </SortableContext>\r\n          </DndContext>\r\n        )}\r\n\r\n        {!isErrorGetontrolPanelId &&\r\n          !isLoadingGetontrolPanelId &&\r\n          !isFetchingGetontrolPanelId &&\r\n          openModalSetting && (\r\n            <ModalSetting\r\n              exit={() => setOpenModalSetting(false)}\r\n              updateControlPanel={updateControlPanel}\r\n              currentControlPanel={currentControlPanel}\r\n              statisticsIdsInPanel={statisticsIdsInPanel}\r\n            ></ModalSetting>\r\n          )}\r\n        {!isErrorGetontrolPanelId &&\r\n          !isLoadingGetontrolPanelId &&\r\n          !isFetchingGetontrolPanelId &&\r\n          openModalDelete && (\r\n            <ModalWindow\r\n              text={`Вы точно хотите удалить панель управления ${\r\n                currentControlPanel.isNameChanged\r\n                  ? currentControlPanel.panelName\r\n                  : `${currentControlPanel.panelName} ${currentControlPanel.controlPanelNumber}`\r\n              }`}\r\n              close={setOpenModalDelete}\r\n              btnYes={btnYes}\r\n              btnNo={btnNo}\r\n            ></ModalWindow>\r\n          )}\r\n        {openModalCreate && (\r\n          <ModalSelectRadio\r\n            nameTable={\"Название поста\"}\r\n            handleSearchValue={inputSearchModal}\r\n            handleSearchOnChange={handleInputChangeModalSearch}\r\n            handleRadioChange={handleRadioChange}\r\n            exit={() => {\r\n              setOpenModalCreate(false);\r\n            }}\r\n            filterArray={filterArraySearchModal}\r\n            array={allPosts}\r\n            arrayItem={\"postName\"}\r\n            selectedItemID={selectedPostIdForCreated}\r\n            save={createControlPanel}\r\n          ></ModalSelectRadio>\r\n        )}\r\n        {openModalStatistic && (\r\n          <ModalStatistic\r\n            data={modalStatisticDatas}\r\n            name={modalStatisticName}\r\n            graphicTypeBD={currentControlPanel.graphType}\r\n            type={\"Прямая\"}\r\n            exit={() => setOpenModalStatistic(false)}\r\n            reportDay={reduxSelectedOrganizationReportDay}\r\n          ></ModalStatistic>\r\n        )}\r\n\r\n        <div className={classes.handler}>\r\n          <HandlerQeury\r\n            Loading={isLoadingGetAllControlPanel}\r\n            Fetching={isFetchingGetAllControlPanel}\r\n            Error={isErrorGetAllControlPanel}\r\n          ></HandlerQeury>\r\n\r\n          <HandlerQeury\r\n            Loading={isLoadingGetontrolPanelId}\r\n            Fetching={isFetchingGetontrolPanelId}\r\n            Error={isErrorGetontrolPanelId}\r\n          ></HandlerQeury>\r\n\r\n          <HandlerMutation\r\n            Loading={isLoadingPostControlPanelMutation}\r\n            Error={\r\n              isErrorPostControlPanelMutation &&\r\n              localIsResponsePostControlPanelMutation\r\n            }\r\n            Success={\r\n              isSuccessPostControlPanelMutation &&\r\n              localIsResponsePostControlPanelMutation\r\n            }\r\n            textSuccess={`Панель управления успешно создана.`}\r\n            textError={\r\n              ErrorPostControlPanel?.data?.errors?.[0]?.errors?.[0]\r\n                ? ErrorPostControlPanel.data.errors[0].errors[0]\r\n                : ErrorPostControlPanel?.data?.message\r\n            }\r\n          ></HandlerMutation>\r\n\r\n          <HandlerMutation\r\n            Loading={isLoadingUpdateControlPanelMutation}\r\n            Error={\r\n              isErrorUpdateControlPanelMutation &&\r\n              localIsResponseUpdateControlPanelMutation\r\n            }\r\n            Success={\r\n              isSuccessUpdateControlPanelMutation &&\r\n              localIsResponseUpdateControlPanelMutation\r\n            }\r\n            textSuccess={`Панель управления обновлена.`}\r\n            textError={\r\n              ErrorUpdateControlPanel?.data?.errors?.[0]?.errors?.[0]\r\n                ? ErrorUpdateControlPanel.data.errors[0].errors[0]\r\n                : ErrorUpdateControlPanel?.data?.message\r\n            }\r\n          ></HandlerMutation>\r\n\r\n          <HandlerMutation\r\n            Loading={isLoadingDeleteControlPanelMutation}\r\n            Error={\r\n              isErrorDeleteControlPanelMutation &&\r\n              localIsResponseDeleteControlPanelMutation\r\n            }\r\n            Success={\r\n              isSuccessDeleteControlPanelMutation &&\r\n              localIsResponseDeleteControlPanelMutation\r\n            }\r\n            textSuccess={\"Панель управления удалена\"}\r\n            textError={\r\n              ErrorDeleteControlPanel?.data?.errors?.[0]?.errors?.[0]\r\n                ? ErrorDeleteControlPanel.data.errors[0].errors[0]\r\n                : ErrorDeleteControlPanel?.data?.message\r\n            }\r\n          ></HandlerMutation>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["ButtonAction","_ref","create","update","refUpdate","refCreate","_jsxs","className","classes","wrapper","children","_jsx","ButtonImage","refAction","name","icon","iconAdd","onClick","Blacksavetmp","BottomHeaders","editText","ModalWindow","text","close","btnYes","btnNo","exitBtn","modalDelete","modalDeleteElement","src","exit","alt","exitImage","modalRow1","modalRow2","concat","textBtnYes","textBtnNo","ModalSelectRadio","nameTable","handleSearchValue","handleSearchOnChange","filterArray","array","arrayItem","selectedItemID","handleRadioChange","save","modal","modalWindow","exitModal","header","item1","type","placeholder","value","onChange","search","item2","table","length","map","item","row","id","checked","data","graphicTypeBD","reportDay","svgRef","useRef","width","setWidth","useState","height","setHeight","pointsForGraphic","setPointsForGraphic","typeGraphic","setTypeGraphic","count","setCount","useEffect","updateDimensions","window","innerHeight","addEventListener","removeEventListener","_data$filter","dayNow","Date","currentWeekday","getDay","startDate","dayDifference","setDate","getDate","endDate","allDates","date","push","toISOString","split","filteredData","filter","itemDate","valueDate","isNaN","getTime","isValidStartDate","isValidEndDate","itemDateStr","startDateStr","endDateStr","isCorrelation","_item$valueDate","_objectSpread","updatedPoints","_createdPoints","forEach","existingPoint","find","sort","a","b","monthlyData","reduce","acc","monthKey","getFullYear","getMonth","_acc$monthKey","setMonth","valueSum","year","month","updatedMonthlyPoints","i","_monthlyData$monthKey","monthDate","lastDayOfMonth","monthValue","yearData","yearKey","_acc$yearKey","updatedYearPoints","_yearData$yearKey","yearDate","setFullYear","today","end","start","Number","selectedDayOfWeek","parseInt","Error","result","currentDate","console","log","nextDate","currentSum","sum","margin","upperLimit","d3","d","x","domain","getDateFormatSatatistic","range","padding","y","nice","line","defined","current","selectAll","remove","svg","attr","tickValues","yTickValues","ticks","enter","append","xAxis","call","style","tickFormat","prevValue","color","datum","getColor","index","on","event","currentTarget","tooltipX","tooltipY","dateText","valueText","textWidth","Math","max","tooltipWidth","isTopOutOfBound","adjustedX","adjustedY","pointColor","indexOf","tooltipGroup","select","updateStatisticsData","maxStartDate","setTime","last7Days","dataMap","crPoints","_updatedPoints","_acc$monthKey2","_monthlyData$monthKey2","_acc$yearKey2","_yearData$yearKey2","item_rowSVG","row_svg_arrow","ref","blockArrrow","statisticsArrow","arrowLeft","handleArrowLeftClick","prevCount","arrowRight","handleArrowRightClick","item_rowBtns","btn","btn_active","handleTypeGraphicButtonClick","PanelDragDrop","openSetting","deletePanel","isActive","block","active","button","setting","ModalSetting","currentControlPanel","updateControlPanel","statisticsIdsInPanel","oldPanelName","setOldPanelName","panelName","setPanelName","panelType","setPanelType","graphType","setGraphType","statisticsChecked","setStatisticsChecked","statistics","isLoadingGetStatistics","isFetchingGetStatistics","isErrorGetStatistics","useStatisticsHook","statisticData","isNameChanged","controlPanelNumber","async","Data","statisticIds","unwrap","then","catch","error","JSON","stringify","Input","blockSelect","Select","view","TableCheckBox","arrayCheked","handleChecboxChange","prev","includes","CardStatistic","setOpenModalStatistic","setModalStatisticName","setModalStatisticDatas","isDragging","setIsDragging","tickSize","yAxis","graphic","onPointerDown","onPointerMove","handlePointerMove","onPointerUp","handlePointerUp","SortableCard","attributes","listeners","setNodeRef","transform","transition","useSortable","CSS","Transform","toString","statisticDatas","ControlPanel","_ErrorPostControlPane","_ErrorPostControlPane2","_ErrorPostControlPane3","_ErrorPostControlPane4","_ErrorPostControlPane5","_ErrorUpdateControlPa","_ErrorUpdateControlPa2","_ErrorUpdateControlPa3","_ErrorUpdateControlPa4","_ErrorUpdateControlPa5","_ErrorDeleteControlPa","_ErrorDeleteControlPa2","_ErrorDeleteControlPa3","_ErrorDeleteControlPa4","_ErrorDeleteControlPa5","openModalSetting","setOpenModalSetting","openModalCreate","setOpenModalCreate","openModalDelete","setOpenModalDelete","selectedControlPanelId","setSelectedControlPanelId","arrayAllControlPanel","setArrayAllControlPanel","cards","setCards","openModalStatistic","modalStatisticName","modalStatisticDatas","openHint","setOpenHint","steps","title","description","target","document","querySelector","disabled","step","reduxSelectedOrganizationId","reduxSelectedOrganizationReportDay","allControlPanel","isLoadingGetAllControlPanel","isFetchingGetAllControlPanel","isErrorGetAllControlPanel","statisticsPoints","isLoadingGetontrolPanelId","isFetchingGetontrolPanelId","isErrorGetontrolPanelId","postControlPanel","isLoadingPostControlPanelMutation","isSuccessPostControlPanelMutation","isErrorPostControlPanelMutation","ErrorPostControlPanel","localIsResponsePostControlPanelMutation","isLoadingUpdateControlPanelMutation","isSuccessUpdateControlPanelMutation","isErrorUpdateControlPanelMutation","ErrorUpdateControlPanel","localIsResponseUpdateControlPanelMutation","deleteControlPanel","isLoadingDeleteControlPanelMutation","isSuccessDeleteControlPanelMutation","isErrorDeleteControlPanelMutation","ErrorDeleteControlPanel","localIsResponseDeleteControlPanelMutation","useControlPanel","allPosts","isLoadingGetPosts","isErrorGetPosts","usePostsHook","selectedID","selectedPostIdForCreated","selectedName","handleInputChangeModalSearch","filterArraySearchModal","inputSearchModal","useModalSelectRadio","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","updatePanelToStatisticsUpdateOrderNumbers","isLoadingPanelToStatisticsUpdateOrderNumbersMutation","isSuccessPanelToStatisticsUpdateOrderNumbersMutation","isErrorPanelToStatisticsUpdateOrderNumbersMutation","ErrorPanelToStatisticsUpdateOrderNumbersMutation","resetPanelToStatisticsUpdateOrderNumbersMutation","localIsResponsePanelToStatisticsUpdateOrderNumbersMutation","usePanelToStatisticsHook","debouncedUpdate","useCallback","debounce","updatedStatistics","Object","keys","loadFromIndexedDB","panel","matchingData","orderNumber","isEqual","dialog","Headers","funcActiveHint","openCreate","ConfigProvider","locale","ruRU","Tour","open","onClose","main","DragDropContext","onDragEnd","source","destination","updatedState","Array","from","movedItem","splice","updatedArray","saveToIndexedDB","_ref2","Droppable","droppableId","direction","provided","droppableProps","innerRef","droppableContainer","Draggable","draggableId","draggableProps","dragHandleProps","getControlPanelId","DndContext","collisionDetection","closestCenter","over","items","oldIndex","findIndex","newIndex","newItems","arrayMove","_id","panelToStatisticsId","orderStatisticNumber","SortableContext","strategy","rectSortingStrategy","graphics","controlPanelId","deleteFromIndexedDB","removeControlPanel","organizationId","postId","ModalStatistic","handler","HandlerQeury","Loading","Fetching","HandlerMutation","Success","textSuccess","textError","errors","message"],"sourceRoot":""}