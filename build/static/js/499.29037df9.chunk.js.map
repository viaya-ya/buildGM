{"version":3,"file":"static/js/499.29037df9.chunk.js","mappings":"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","sources":["UI/image/statisticsArrowLeft.svg","UI/image/statisticsArrowRight.svg","UI/image/subbarSearch.svg","webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/BottomHeaders.module.css?e3ba","webpack://good_management/./src/UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.module.css?2769","UI/Custom/Headers/BottomHeaders/ButtonAction/ButtonAction.jsx","UI/Custom/Headers/BottomHeaders/BottomHeaders.jsx","webpack://good_management/./src/UI/Custom/Lupa/Lupa.module.css?5dc2","UI/Custom/Lupa/Lupa.jsx","webpack://good_management/./src/UI/Custom/WaveLetters.module.css?9fa3","UI/Custom/WaveLetters.jsx","webpack://good_management/./src/UI/Custom/modalSelectRadio/ModalSelectRadio.module.css?504c","UI/Custom/modalSelectRadio/ModalSelectRadio.jsx","webpack://good_management/./src/UI/app/StatisticsPage/Statistic.module.css?929f","webpack://good_management/./src/UI/Custom/Graphic.module.css?4933","UI/Custom/Graphic.jsx","UI/image/trash.svg","UI/app/StatisticsPage/Statistic.jsx"],"sourcesContent":["var _desc, _defs, _path;\nconst _excluded = [\"title\", \"titleId\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\nimport * as React from \"react\";\nfunction SvgStatisticsArrowLeft(_ref, svgRef) {\n  let {\n      title,\n      titleId\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 11.669983,\n    height: 19.799805,\n    viewBox: \"0 0 11.67 19.7998\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"\\r\\n\\t\\t\\tCreated with Pixso.\\r\\n\\t\")), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null)), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M11.67 1.77L9.89 0L0 9.89L9.9 19.79L11.67 18.02L3.53 9.89L11.67 1.77Z\",\n    fill: \"#005475\",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgStatisticsArrowLeft);\nexport default __webpack_public_path__ + \"static/media/statisticsArrowLeft.cf19db7109d7a471f9a4757f06f848cb.svg\";\nexport { ForwardRef as ReactComponent };","var _desc, _defs, _path;\nconst _excluded = [\"title\", \"titleId\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\nimport * as React from \"react\";\nfunction SvgStatisticsArrowRight(_ref, svgRef) {\n  let {\n      title,\n      titleId\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 11.670044,\n    height: 19.799805,\n    viewBox: \"0 0 11.67 19.7998\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"\\r\\n\\t\\t\\tCreated with Pixso.\\r\\n\\t\")), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null)), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M0 18.02L1.78 19.79L11.67 9.89L1.77 0L0 1.77L8.13 9.89L0 18.02Z\",\n    fill: \"#005475\",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgStatisticsArrowRight);\nexport default __webpack_public_path__ + \"static/media/statisticsArrowRight.49741dd1d1342ed4af242f97a798956a.svg\";\nexport { ForwardRef as ReactComponent };","var _desc, _defs, _rect, _g;\nconst _excluded = [\"title\", \"titleId\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\nimport * as React from \"react\";\nfunction SvgSubbarSearch(_ref, svgRef) {\n  let {\n      title,\n      titleId\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 20,\n    height: 20,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"\\r\\n\\t\\t\\tCreated with Pixso.\\r\\n\\t\")), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip8_4774\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"subbar / search\",\n    width: 16,\n    height: 16,\n    fill: \"white\",\n    fillOpacity: 0\n  })))), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"subbar / search\",\n    width: 16,\n    height: 16,\n    fill: \"#FFFFFF\",\n    fillOpacity: 0\n  })), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip8_4774)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M10.33 9.33L9.8 9.33L9.61 9.15C10.41 8.21 10.83 6.94 10.6 5.59C10.29 3.73 8.74 2.26 6.87 2.03C4.05 1.68 1.68 4.05 2.03 6.87C2.25 8.74 3.73 10.29 5.59 10.6C6.94 10.83 8.21 10.41 9.15 9.61L9.33 9.8L9.33 10.33L12.16 13.16C12.43 13.43 12.88 13.43 13.15 13.16C13.43 12.89 13.43 12.44 13.15 12.17L10.33 9.33ZM6.33 9.33C4.67 9.33 3.33 7.99 3.33 6.33C3.33 4.67 4.67 3.33 6.33 3.33C7.99 3.33 9.33 4.67 9.33 6.33C9.33 7.99 7.99 9.33 6.33 9.33Z\",\n    fill: \"#3A3A3A\",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSubbarSearch);\nexport default __webpack_public_path__ + \"static/media/subbarSearch.df8e3ae4a1f8534780d8d7a0a7a27549.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"editText\":\"BottomHeaders_editText__6e9Ca\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ButtonAction_wrapper__YWbBU\"};","import React from \"react\";\r\nimport classes from \"./ButtonAction.module.css\";\r\nimport iconAdd from \"../../../../image/iconAdd.svg\";\r\nimport Blacksavetmp from \"../../../../image/Blacksavetmp.svg\";\r\nimport ButtonImage from \"@Custom/buttonImage/ButtonImage\";\r\nexport default function ButtonAction({ create, update, refUpdate, refCreate }) {\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      {create && (\r\n        <ButtonImage\r\n          refAction={refCreate}\r\n          name={\"создать\"}\r\n          icon={iconAdd}\r\n          onClick={create}\r\n        ></ButtonImage>\r\n      )}\r\n\r\n      {update && (\r\n        <ButtonImage\r\n          refAction={refUpdate}\r\n          name={\"обновить\"}\r\n          icon={Blacksavetmp}\r\n          onClick={update}\r\n        ></ButtonImage>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport classes from \"./BottomHeaders.module.css\"\r\nimport ButtonAction from './ButtonAction/ButtonAction'\r\n\r\nexport default function BottomHeaders({children, create, update,  refUpdate, refCreate}) {\r\n  return (\r\n    <div className={classes.editText}>\r\n        {children}\r\n        <ButtonAction create={create} update={update} refUpdate={refUpdate} refCreate={refCreate}></ButtonAction>\r\n    </div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"ul\":\"Lupa_ul__sGB5h\",\"li\":\"Lupa_li__U20di\",\"activeText\":\"Lupa_activeText__HbVV8\",\"completedText\":\"Lupa_completedText__vmrPv\"};","import React, { useRef, useEffect } from \"react\";\r\nimport classes from \"./Lupa.module.css\";\r\nimport subbarSearch from \"../../image/subbarSearch.svg\";\r\n\r\nexport default function Lupa({\r\n  setIsOpenSearch,\r\n  isOpenSearch,\r\n  select,\r\n\r\n  projects,\r\n  archivesProjects,\r\n  projectsWithProgram,\r\n  archivesProjectsWithProgram,\r\n\r\n  programs,\r\n  archivesPrograms,\r\n\r\n  array,\r\n  arrayItem,\r\n  positionBottomStyle,\r\n\r\n  refLupa,\r\n}) {\r\n  const selectRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (selectRef.current && !selectRef.current.contains(event.target)) {\r\n        setIsOpenSearch(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [setIsOpenSearch, refLupa]);\r\n\r\n  return (\r\n    <div ref={selectRef}>\r\n      <img\r\n        ref={refLupa}\r\n        src={subbarSearch}\r\n        alt=\"subbarSearch\"\r\n        onClick={() => {\r\n          setIsOpenSearch(true);\r\n        }}\r\n      />\r\n      {isOpenSearch && (\r\n        <ul\r\n          className={classes.ul}\r\n          style={{\r\n            bottom: positionBottomStyle,\r\n          }}\r\n        >\r\n          {projects?.length !== 0 && projects && (\r\n            <li value=\"Активные\" disabled className={classes.activeText}>\r\n              Активные\r\n            </li>\r\n          )}\r\n\r\n          {projects?.map((item) => {\r\n            return (\r\n              <li\r\n                key={item.id}\r\n                value={item.id}\r\n                onClick={() => {\r\n                  select(item.id);\r\n                  setIsOpenSearch(false);\r\n                }}\r\n                className={classes.li}\r\n              >\r\n                {item.projectName}\r\n              </li>\r\n            );\r\n          })}\r\n\r\n          {archivesProjects?.length !== 0 && archivesProjects && (\r\n            <li value=\"Завершенные\" disabled className={classes.completedText}>\r\n              Завершенные\r\n            </li>\r\n          )}\r\n\r\n          {archivesProjects?.map((item) => {\r\n            return (\r\n              <li\r\n                key={item.id}\r\n                value={item.id}\r\n                className={classes.li}\r\n                onClick={() => {\r\n                  select(item.id);\r\n                  setIsOpenSearch(false);\r\n                }}\r\n              >\r\n                {item.projectName}\r\n              </li>\r\n            );\r\n          })}\r\n\r\n          {projectsWithProgram?.length !== 0 && projectsWithProgram && (\r\n            <li\r\n              value=\"Проекты с программами\"\r\n              disabled\r\n              className={classes.activeText}\r\n            >\r\n              Проекты с программами\r\n            </li>\r\n          )}\r\n\r\n          {projectsWithProgram?.map((item) => {\r\n            return (\r\n              <li\r\n                key={item.id}\r\n                value={item.id}\r\n                onClick={() => {\r\n                  select(item.id);\r\n                  setIsOpenSearch(false);\r\n                }}\r\n                className={classes.li}\r\n              >\r\n                {item.projectName}\r\n              </li>\r\n            );\r\n          })}\r\n\r\n          {archivesProjectsWithProgram?.length !== 0 &&\r\n            archivesProjectsWithProgram && (\r\n              <li\r\n                value=\"Архивные проекты с программами\"\r\n                disabled\r\n                className={classes.completedText}\r\n              >\r\n                Архивные проекты с программами\r\n              </li>\r\n            )}\r\n\r\n          {archivesProjectsWithProgram?.map((item) => {\r\n            return (\r\n              <li\r\n                key={item.id}\r\n                value={item.id}\r\n                onClick={() => {\r\n                  select(item.id);\r\n                  setIsOpenSearch(false);\r\n                }}\r\n                className={classes.li}\r\n              >\r\n                {item.projectName}\r\n              </li>\r\n            );\r\n          })}\r\n\r\n          {programs?.length !== 0 && programs && (\r\n            <li value=\"Активные\" disabled className={classes.activeText}>\r\n              Активные\r\n            </li>\r\n          )}\r\n\r\n          {programs?.map((item) => {\r\n            return (\r\n              <li\r\n                key={item.id}\r\n                value={item.id}\r\n                onClick={() => {\r\n                  select(item.id);\r\n                  setIsOpenSearch(false);\r\n                }}\r\n                className={classes.li}\r\n              >\r\n                {item.projectName}\r\n              </li>\r\n            );\r\n          })}\r\n\r\n          {archivesPrograms?.length !== 0 && archivesPrograms && (\r\n            <li value=\"Завершенные\" disabled className={classes.completedText}>\r\n              Завершенные\r\n            </li>\r\n          )}\r\n\r\n          {archivesPrograms?.map((item) => {\r\n            return (\r\n              <li\r\n                key={item.id}\r\n                value={item.id}\r\n                onClick={() => {\r\n                  select(item.id);\r\n                  setIsOpenSearch(false);\r\n                }}\r\n                className={classes.li}\r\n              >\r\n                {item.projectName}\r\n              </li>\r\n            );\r\n          })}\r\n\r\n          {array?.map((item) => {\r\n            return (\r\n              <li\r\n                key={item.id}\r\n                value={item.id}\r\n                onClick={() => {\r\n                  select(item.id);\r\n                  setIsOpenSearch(false);\r\n                }}\r\n                className={classes.li}\r\n              >\r\n                {item[arrayItem]}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wave\":\"WaveLetters_wave__DfO0r\"};","import React from \"react\";\r\nimport classes from \"./WaveLetters.module.css\";\r\nexport default function WaveLetters({ letters }) {\r\n  const arrayLetters = letters.split(\"\");\r\n  return (\r\n    <div className={classes.wave}>\r\n      {arrayLetters?.map((item, index) => (\r\n        <span key={index} style={{ \"--i\": index + 1 }}>\r\n          {item === \" \" ? \"\\u00A0\" + \"\\u00A0\" : item}\r\n        </span>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalSelectRadio_modal__nPGHn\",\"modalWindow\":\"ModalSelectRadio_modalWindow__dncJU\",\"header\":\"ModalSelectRadio_header__DW8xM\",\"item1\":\"ModalSelectRadio_item1__QmdXG\",\"item2\":\"ModalSelectRadio_item2__Hm1w9\",\"search\":\"ModalSelectRadio_search__uW77Q\",\"exit\":\"ModalSelectRadio_exit__BO5fc\",\"table\":\"ModalSelectRadio_table__nysW+\",\"row\":\"ModalSelectRadio_row__F5ykw\"};","import React from \"react\";\r\nimport classes from \"./ModalSelectRadio.module.css\";\r\nimport exitModal from \"@image/exitModal.svg\";\r\nimport Blacksavetmp from \"@image/Blacksavetmp.svg\";\r\nimport ButtonImage from \"@Custom/buttonImage/ButtonImage\";\r\n\r\nexport function ModalSelectRadio({\r\n  nameTable,\r\n  handleSearchValue,\r\n  handleSearchOnChange,\r\n  exit,\r\n  filterArray,\r\n  array,\r\n  arrayItem,\r\n  selectedItemID,\r\n  handleRadioChange,\r\n  save,\r\n}) {\r\n  return (\r\n    <div className={classes.modal}>\r\n      <div className={classes.modalWindow}>\r\n        <img\r\n          src={exitModal}\r\n          alt=\"exitModal\"\r\n          onClick={() => exit()}\r\n          className={classes.exit}\r\n        />\r\n\r\n        <div className={classes.header}>\r\n          <div className={classes.item1}>\r\n            <input\r\n              type=\"search\"\r\n              placeholder=\"Найти\"\r\n              value={handleSearchValue}\r\n              onChange={handleSearchOnChange}\r\n              className={classes.search}\r\n            />\r\n          </div>\r\n\r\n          {save && (\r\n            <div className={classes.item2}>\r\n              <ButtonImage\r\n                name={\"сохранить\"}\r\n                icon={Blacksavetmp}\r\n                onClick={save}\r\n              ></ButtonImage>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <table className={classes.table}>\r\n          <thead>\r\n            <tr>\r\n              <th>{nameTable}</th>\r\n            </tr>\r\n          </thead>\r\n\r\n          {filterArray.length > 0 ? (\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  {filterArray?.map((item) => (\r\n                    <div\r\n                      key={item.id}\r\n                      className={classes.row}\r\n                      onClick={() => handleRadioChange(item.id, item)}\r\n                    >\r\n                      <input\r\n                        type=\"radio\"\r\n                        checked={selectedItemID === item.id}\r\n                      />\r\n                      {item[arrayItem]}\r\n                    </div>\r\n                  ))}\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          ) : (\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  {array?.map((item) => (\r\n                    <div\r\n                      key={item.id}\r\n                      className={classes.row}\r\n                      onClick={() => handleRadioChange(item.id, item)}\r\n                    >\r\n                      <input\r\n                        type=\"radio\"\r\n                        checked={selectedItemID === item.id}\r\n                      />\r\n                      {item[arrayItem]}\r\n                    </div>\r\n                  ))}\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          )}\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Statistic_dialog__3p+k8\",\"header\":\"Statistic_header__0WBqQ\",\"fon\":\"Statistic_fon__mp9n-\",\"pomoshnikSearch\":\"Statistic_pomoshnikSearch__IhkrT\",\"pomoshnik\":\"Statistic_pomoshnik__ZBjC4\",\"iconBack\":\"Statistic_iconBack__VbWfZ\",\"search\":\"Statistic_search__weHXa\",\"spanPomoshnik\":\"Statistic_spanPomoshnik__KAOqo\",\"editText\":\"Statistic_editText__Dtgwn\",\"five\":\"Statistic_five__CDpWW\",\"iconAdd\":\"Statistic_iconAdd__4xSsk\",\"iconSave\":\"Statistic_iconSave__bMPKX\",\"image\":\"Statistic_image__dPi6v\",\"main\":\"Statistic_main__pZlqy\",\"blockArrrow\":\"Statistic_blockArrrow__qUTV6\",\"block1\":\"Statistic_block1__scdNa\",\"block2\":\"Statistic_block2__3zM2N\",\"block3\":\"Statistic_block3__VdrNQ\",\"row2\":\"Statistic_row2__-odcq\",\"row1\":\"Statistic_row1__9Nf40\",\"element\":\"Statistic_element__qlp8v\",\"addPoint\":\"Statistic_addPoint__karc2\",\"deletePoint\":\"Statistic_deletePoint__Ang7u\",\"points\":\"Statistic_points__bOSU9\",\"item\":\"Statistic_item__pHjN+\",\"date\":\"Statistic_date__dwGjg\",\"number\":\"Statistic_number__i35Ys\",\"textGrey\":\"Statistic_textGrey__90esK\",\"modal\":\"Statistic_modal__ikwme\",\"modalTable\":\"Statistic_modalTable__UcLkD\",\"exitImage\":\"Statistic_exitImage__TxXI9\",\"row\":\"Statistic_row__U0c21\",\"tableHeader\":\"Statistic_tableHeader__iJ0kQ\",\"iconSaveModal\":\"Statistic_iconSaveModal__0awh+\",\"itemHover\":\"Statistic_itemHover__voA1X\",\"active\":\"Statistic_active__7c46C\",\"itemName\":\"Statistic_itemName__zMvcK\",\"select\":\"Statistic_select__M7kmi\",\"div\":\"Statistic_div__H35ux\",\"modalDelete\":\"Statistic_modalDelete__z3BIT\",\"modalDeleteElement\":\"Statistic_modalDeleteElement__CstRH\",\"modalRow1\":\"Statistic_modalRow1__ZM8m3\",\"modalRow2\":\"Statistic_modalRow2__Qflc4\",\"btnYes\":\"Statistic_btnYes__W8j3Y\",\"btnNo\":\"Statistic_btnNo__bF80T\",\"textBtnYes\":\"Statistic_textBtnYes__Wnb2Q\",\"textBtnNo\":\"Statistic_textBtnNo__YD+t8\",\"text\":\"Statistic_text__6U1vl\",\"textMontserrat\":\"Statistic_textMontserrat__1bMe3\",\"tableHeading\":\"Statistic_tableHeading__L76cf\",\"tableHintWrapper\":\"Statistic_tableHintWrapper__6Ups9\"};","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"Graphic_block__UHEyR\",\"row1\":\"Graphic_row1__wSzYr\"};","import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport classes from \"./Graphic.module.css\";\r\nimport getDateFormatSatatistic from \"../Custom/Function/getDateFormatStatistic\";\r\n\r\nconst Graphic = ({\r\n  colorFirstPoint,\r\n  data,\r\n  name,\r\n  setName,\r\n  typeGraphic,\r\n  type,\r\n}) => {\r\n  const svgRef = useRef();\r\n  const [nameStatistics, setNameStatistics] = useState(name);\r\n\r\n  const [width, setWidth] = useState(880);\r\n  const [height, setHeight] = useState(600);\r\n\r\n  useEffect(() => {\r\n    setNameStatistics(name);\r\n  }, [name]);\r\n\r\n  useEffect(() => {\r\n    setName(nameStatistics);\r\n  }, [nameStatistics]);\r\n\r\n  // Обновляем ширину и высоту в зависимости от типа графика\r\n  useEffect(() => {\r\n    const updateDimensions = () => {\r\n      let newWidth, newHeight;\r\n\r\n      if (typeGraphic === \"26\" || !typeGraphic) {\r\n        if (window.innerWidth > 1400) {\r\n          newWidth = 900;\r\n          newHeight = 600;\r\n        } else if (window.innerWidth > 800) {\r\n          newWidth = 700;\r\n          newHeight = 400;\r\n        }\r\n      } else {\r\n        if (typeGraphic === \"52\") {\r\n          if (window.innerWidth > 1400) {\r\n            newWidth = 1200;\r\n            newHeight = 600;\r\n          } else if (window.innerWidth > 800) {\r\n            newWidth = 880;\r\n            newHeight = 400;\r\n          }\r\n        } else {\r\n          if (window.innerWidth > 1400) {\r\n            newWidth = 500;\r\n            newHeight = 600;\r\n          } else if (window.innerWidth > 800) {\r\n            newWidth = 400;\r\n            newHeight = 400;\r\n          }\r\n        }\r\n      }\r\n      setWidth(newWidth);\r\n      setHeight(newHeight);\r\n    };\r\n\r\n    // Устанавливаем начальные значения и добавляем слушатель события resize\r\n    updateDimensions();\r\n    window.addEventListener(\"resize\", updateDimensions);\r\n\r\n    // Удаляем слушатель при размонтировании компонента\r\n    return () => window.removeEventListener(\"resize\", updateDimensions);\r\n  }, [typeGraphic]);\r\n\r\n  useEffect(() => {\r\n    data.sort((a, b) => new Date(a.valueDate) - new Date(b.valueDate));\r\n\r\n    // const formatDate = d3.timeFormat(\"%d.%m.%y\");\r\n    // const parseDate = d3.timeParse(\"%Y-%m-%d\");\r\n\r\n    const margin = { top: 40, right: 30, bottom: 80, left: 50 };\r\n\r\n    const minValue = d3.min(data, (d) => d.value);\r\n    const maxValue = d3.max(data, (d) => d.value);\r\n\r\n    // Устанавливаем верхнюю границу оси Y с небольшим запасом\r\n    const upperLimit = maxValue * 1.1; // Увеличиваем максимальное значение на 10%\r\n\r\n    const x = d3\r\n      .scalePoint()\r\n      .domain(\r\n        data.map((d) =>\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        )\r\n      )\r\n      .range([margin.left, width - margin.right])\r\n      .padding(0);\r\n\r\n    // Если type === \"Обратная\", то ось Y будет инвертирована, а верхний предел будет больше\r\n    const y =\r\n      type === \"Обратная\"\r\n        ? d3\r\n            .scaleLinear()\r\n            .domain([0, upperLimit]) // Начинаем с 0 для обратного типа\r\n            .nice()\r\n            .range([margin.top, height - margin.bottom])\r\n        : d3\r\n            .scaleLinear()\r\n            .domain([0, upperLimit]) // Начинаем с 0 для обычного типа\r\n            .nice()\r\n            .range([height - margin.bottom, margin.top]);\r\n\r\n    const line = d3\r\n      .line()\r\n      .x((d) =>\r\n        x(\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        )\r\n      )\r\n      .y((d) => y(d.value))\r\n      .defined((d) => d.value !== null);\r\n\r\n    d3.select(svgRef.current).selectAll(\"*\").remove();\r\n\r\n    const svg = d3\r\n      .select(svgRef.current)\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height);\r\n\r\n    const tickValues = data.map((d) =>\r\n      d.valueDate === \"\" || d.valueDate === null\r\n        ? \"дата\"\r\n        : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n    );\r\n\r\n    // Получаем значения для горизонтальных линий сетки с использованием y.ticks()\r\n    const yTickValues = y.ticks(5); // Используем метод ticks() для точных значений\r\n\r\n    // Добавляем вертикальные линии сетки\r\n    svg\r\n      .selectAll(\".grid-vertical\")\r\n      .data(tickValues)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"class\", \"grid-vertical\")\r\n      .attr(\"x1\", (d) => x(d))\r\n      .attr(\"x2\", (d) => x(d))\r\n      .attr(\"y1\", margin.top)\r\n      .attr(\"y2\", height - margin.bottom)\r\n      .attr(\"stroke\", \"#4a4a4a\") // Темный цвет для сетки\r\n      .attr(\"stroke-width\", 1)\r\n      .attr(\"opacity\", 0.3);\r\n\r\n    // Добавляем горизонтальные линии сетки\r\n    svg\r\n      .selectAll(\".grid-horizontal\")\r\n      .data(yTickValues)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"class\", \"grid-horizontal\")\r\n      .attr(\"x1\", margin.left)\r\n      .attr(\"x2\", width - margin.right)\r\n      .attr(\"y1\", (d) => y(d))\r\n      .attr(\"y2\", (d) => y(d))\r\n      .attr(\"stroke\", \"#4a4a4a\") // Темный цвет для сетки\r\n      .attr(\"stroke-width\", 1)\r\n      .attr(\"opacity\", 0.3);\r\n\r\n    const xAxis = d3.axisBottom(x);\r\n\r\n    svg\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n      .call(xAxis)\r\n      .selectAll(\"text\")\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .attr(\"text-anchor\", \"end\")\r\n      .attr(\"dx\", \"-10px\")\r\n      .attr(\"dy\", \"-5px\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .style(\"font-size\", \"12px\");\r\n\r\n    svg\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},0)`)\r\n      .call(d3.axisLeft(y).ticks(5).tickFormat(d3.format(\".2s\"))); // Format Y axis\r\n\r\n    data.forEach((d, i) => {\r\n      if (i > 0) {\r\n        const prevValue = data[i - 1].value;\r\n        // Reverse the line color logic based on the 'type' prop\r\n        const color =\r\n          type === \"Обратная\"\r\n            ? d.value < prevValue\r\n              ? \"blue\"\r\n              : \"red\" // Reverse logic for line color\r\n            : d.value < prevValue\r\n            ? \"red\"\r\n            : \"blue\"; // Normal logic for line color\r\n\r\n        svg\r\n          .append(\"path\")\r\n          .datum([data[i - 1], d])\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", color)\r\n          .attr(\"stroke-width\", 2)\r\n          .attr(\"d\", line);\r\n      }\r\n    });\r\n\r\n    const getColor = (value, index) => {\r\n      if (index === 0) {\r\n        if (colorFirstPoint === undefined || colorFirstPoint === null)\r\n          return \"blue\";\r\n        const colorPoint = value >= colorFirstPoint ? \"blue\" : \"red\";\r\n        return colorPoint;\r\n      }\r\n      if (index > 0) {\r\n        const prevValue = data[index - 1].value;\r\n        // Reverse the color logic for points as well\r\n        return type === \"Обратная\"\r\n          ? value < prevValue\r\n            ? \"blue\"\r\n            : \"red\" // Reverse logic for points\r\n          : value < prevValue\r\n          ? \"red\"\r\n          : \"blue\"; // Normal logic for points\r\n      } else {\r\n        return \"blue\";\r\n      }\r\n    };\r\n\r\n    svg\r\n      .selectAll(\"circle\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"cx\", (d) =>\r\n        x(\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        )\r\n      )\r\n      .attr(\"cy\", (d) => y(d.value))\r\n      .attr(\"r\", 5)\r\n      .attr(\"fill\", (d, i) => getColor(d.value, i)) // Apply the reversed color logic here\r\n      .on(\"mouseover\", (event, d) => {\r\n        d3.select(event.currentTarget).attr(\"r\", 7).attr(\"fill\", \"orange\");\r\n\r\n        const tooltipX = x(\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        );\r\n        const tooltipY = y(d.value) - 15;\r\n\r\n        // Формируем текст для тултипа\r\n        const dateText = `Дата: ${\r\n          d.valueDate === \"\" || d.valueDate === null\r\n            ? \"дата\"\r\n            : getDateFormatSatatistic(d.valueDate, typeGraphic)\r\n        }`;\r\n        const valueText = `Значение: ${d.value}`;\r\n        const textWidth = Math.max(dateText.length, valueText.length) * 6; // Оценочная ширина в пикселях\r\n\r\n        // Ширина тултипа\r\n        const tooltipWidth = Math.max(120, textWidth + 20);\r\n        const tooltipHeight = 50;\r\n\r\n        // Проверка на выход за границы\r\n        const isTopOutOfBound = tooltipY - tooltipHeight < margin.top;\r\n        const isRightOutOfBound =\r\n          tooltipX + tooltipWidth / 2 > width - margin.right;\r\n        const isLeftOutOfBound = tooltipX - tooltipWidth / 2 < margin.left;\r\n\r\n        let adjustedX = tooltipX;\r\n        if (isRightOutOfBound)\r\n          adjustedX = width - margin.right - tooltipWidth / 2;\r\n        else if (isLeftOutOfBound) adjustedX = margin.left + tooltipWidth / 2;\r\n\r\n        const adjustedY = isTopOutOfBound ? tooltipY + tooltipHeight : tooltipY;\r\n\r\n        // Получаем цвет точки\r\n        const pointColor = getColor(d.value, data.indexOf(d));\r\n\r\n        const tooltipGroup = svg\r\n          .append(\"g\")\r\n          .attr(\"id\", \"tooltip\")\r\n          .attr(\"transform\", `translate(${adjustedX}, ${adjustedY})`);\r\n\r\n        tooltipGroup\r\n          .append(\"rect\")\r\n          .attr(\"x\", -tooltipWidth / 2)\r\n          .attr(\"y\", isTopOutOfBound ? 0 : -tooltipHeight)\r\n          .attr(\"width\", tooltipWidth)\r\n          .attr(\"height\", tooltipHeight)\r\n          .attr(\"fill\", pointColor) // Используем цвет точки для фона тултипа\r\n          .attr(\"rx\", 4)\r\n          .attr(\"ry\", 4);\r\n\r\n        tooltipGroup\r\n          .append(\"text\")\r\n          .attr(\"text-anchor\", \"middle\")\r\n          .attr(\"y\", isTopOutOfBound ? 15 : -30)\r\n          .style(\"font-size\", \"11px\")\r\n          .style(\"fill\", \"white\")\r\n          .style(\"font-family\", \"Montserrat, sans-serif\")\r\n          .text(dateText);\r\n\r\n        tooltipGroup\r\n          .append(\"text\")\r\n          .attr(\"text-anchor\", \"middle\")\r\n          .attr(\"y\", isTopOutOfBound ? 35 : -10)\r\n          .style(\"font-size\", \"11px\")\r\n          .style(\"fill\", \"white\")\r\n          .style(\"font-family\", \"Montserrat, sans-serif\")\r\n          .text(valueText);\r\n      })\r\n      .on(\"mouseout\", (event) => {\r\n        const d = d3.select(event.currentTarget).datum();\r\n        const index = data.indexOf(d);\r\n        d3.select(event.currentTarget)\r\n          .attr(\"r\", 5)\r\n          .attr(\"fill\", getColor(d.value, index)); // Apply the reversed color logic here\r\n        svg.select(\"#tooltip\").remove();\r\n      });\r\n  }, [colorFirstPoint, data, width, height, type]);\r\n\r\n  return (\r\n    <div className={classes.block}>\r\n      <input\r\n        type=\"text\"\r\n        value={nameStatistics}\r\n        onChange={(e) => setNameStatistics(e.target.value)}\r\n        className={classes.row1}\r\n      />\r\n      <svg ref={svgRef} className={classes.row2}></svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graphic;\r\n","var _desc, _defs, _rect, _g;\nconst _excluded = [\"title\", \"titleId\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\nimport * as React from \"react\";\nfunction SvgTrash(_ref, svgRef) {\n  let {\n      title,\n      titleId\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"\\r\\n\\t\\t\\tCreated with Pixso.\\r\\n\\t\")), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip3_1213\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"icon / delete\",\n    width: 24,\n    height: 24,\n    fill: \"white\",\n    fillOpacity: 0\n  })))), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"icon / delete\",\n    width: 24,\n    height: 24,\n    fill: \"#FFFFFF\",\n    fillOpacity: 0\n  })), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip3_1213)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M9 3L9 4L4 4L4 6L5 6L5 19C5 19.53 5.21 20.03 5.58 20.41C5.96 20.78 6.46 21 7 21L17 21C17.53 21 18.03 20.78 18.41 20.41C18.78 20.03 19 19.53 19 19L19 6L20 6L20 4L15 4L15 3L9 3ZM7 6L17 6L17 19L7 19L7 6ZM9 8L9 17L11 17L11 8L9 8ZM13 8L13 17L15 17L15 8L13 8Z\",\n    fill: \"currentColor\",\n    fillOpacity: 1,\n    fillRule: \"evenodd\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgTrash);\nexport default __webpack_public_path__ + \"static/media/trash.e43fc72493c601ddd54c3b32aba5840c.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect, useRef } from \"react\";\r\nimport classes from \"./Statistic.module.css\";\r\n\r\nimport Graphic from \"@Custom/Graphic.jsx\";\r\nimport Blacksavetmp from \"@image/Blacksavetmp.svg\";\r\nimport statisticsArrowLeft from \"@image/statisticsArrowLeft.svg\";\r\nimport statisticsArrowRight from \"@image/statisticsArrowRight.svg\";\r\nimport trash from \"@image/trash.svg\";\r\nimport addBlock from \"@image/iconAdd.svg\";\r\nimport hint from \"@image/hint.svg\";\r\nimport HandlerMutation from \"@Custom/HandlerMutation.jsx\";\r\nimport HandlerQeury from \"@Custom/HandlerQeury.jsx\";\r\nimport exit from \"@image/exitModal.svg\";\r\nimport WaveLetters from \"@Custom/WaveLetters.jsx\";\r\nimport getDateFormatSatatistic from \"@Custom/Function/getDateFormatStatistic.js\";\r\nimport Headers from \"@Custom/Headers/Headers\";\r\nimport BottomHeaders from \"@Custom/Headers/BottomHeaders/BottomHeaders\";\r\nimport Select from \"@Custom/Select/Select\";\r\nimport Input from \"@Custom/Input/Input\";\r\nimport Lupa from \"@Custom/Lupa/Lupa\";\r\nimport { ModalSelectRadio } from \"@Custom/modalSelectRadio/ModalSelectRadio\";\r\nimport { useModalSelectRadio } from \"@hooks\";\r\nimport { useStatisticsHook } from \"@hooks\";\r\nimport { usePostsHook } from \"@hooks\";\r\nimport { useOrganizationHook } from \"@hooks\";\r\n\r\nimport _ from \"lodash\";\r\n\r\nimport { ConfigProvider, Tour } from \"antd\";\r\nimport ruRU from \"antd/locale/ru_RU\";\r\n\r\nexport default function Statistic() {\r\n  const [colorFirstPoint, setColorFirstPoint] = useState();\r\n  // Организация\r\n  const {\r\n    reduxSelectedOrganizationId,\r\n    reduxSelectedOrganizationReportDay,\r\n\r\n    currentOrganization,\r\n    isLoadingOrganizationId,\r\n    isFetchingOrganizationId,\r\n\r\n    updateOrganization,\r\n    isLoadingUpdateOrganizationMutation,\r\n    isSuccessUpdateOrganizationMutation,\r\n    isErrorUpdateOrganizationMutation,\r\n    ErrorOrganization,\r\n    localIsResponseUpdateOrganizationMutation,\r\n  } = useOrganizationHook();\r\n\r\n  const [openModalForCreated, setOpenModalForCreated] = useState(false);\r\n\r\n  const [isOpenSearch, setIsOpenSearch] = useState(false);\r\n\r\n  const [statisticId, setStatisticId] = useState(\"\");\r\n\r\n  const [name, setName] = useState();\r\n  const [type, setType] = useState();\r\n  const [postId, setPostId] = useState();\r\n\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  const [receivedPoints, setReceivedPoints] = useState([]);\r\n  const [oldReceivedPoints, setOldReceivedPoints] = useState([]);\r\n  const [createPoints, setCreatePoints] = useState([]);\r\n\r\n  const [reportDay, setReportDay] = useState(\r\n    reduxSelectedOrganizationReportDay\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (\r\n      reduxSelectedOrganizationReportDay !== undefined &&\r\n      reduxSelectedOrganizationReportDay !== null\r\n    ) {\r\n      setReportDay(reduxSelectedOrganizationReportDay);\r\n    }\r\n  }, [reduxSelectedOrganizationReportDay]);\r\n\r\n  const [typeGraphic, setTypeGraphic] = useState(\"Ежедневный\");\r\n  const [disabledPoints, setDisabledPoints] = useState(false);\r\n\r\n  const [arrayPoints, setArrayPoints] = useState([]);\r\n  const [showPoints, setShowPoints] = useState([]);\r\n\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [activeIndex, setActiveIndex] = useState(null);\r\n  const [count, setCount] = useState(0);\r\n\r\n  const [openModalReportDay, setOpenModalReportDay] = useState(false);\r\n  const [showReportDay, setShowReportDay] = useState();\r\n  const [showReportDayComes, setShowReportDayComes] = useState();\r\n\r\n  const [showCorrelationPoint, setShowCorrelationPoint] = useState([]);\r\n\r\n  const refDay = useRef(null);\r\n  const refName = useRef(null);\r\n  const refArrowLeft = useRef(null);\r\n  const refArrowRight = useRef(null);\r\n  const refLupa = useRef(null);\r\n  const refType = useRef(null);\r\n  const refPost = useRef(null);\r\n  const refTypeGraphic = useRef(null);\r\n  const refDescription = useRef(null);\r\n  const refCreate = useRef(null);\r\n  const refUpdate = useRef(null);\r\n  const refAddPoint = useRef(null);\r\n  const refDeletePoint = useRef(null);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const steps = [\r\n    {\r\n      title: \"Отчетный день\",\r\n      description:\r\n        \"Выберите и поменяйте отчетный день (Отчетный день поменяется у всей организации)\",\r\n      target: () => refDay.current, // Добавляем проверку\r\n    },\r\n\r\n    {\r\n      title: \"Создать\",\r\n      description: \"Нажмите для создания статистики\",\r\n      target: () => refCreate.current,\r\n    },\r\n    {\r\n      title: \"Сохранить\",\r\n      description: \"Нажмите для сохранения статистики\",\r\n      target: () => refUpdate.current,\r\n    },\r\n\r\n    {\r\n      title: \"Назад\",\r\n      description: \"Нажмите для смещения графика назад\",\r\n      target: () => refArrowLeft.current,\r\n      disabled: !statisticId,\r\n    },\r\n    {\r\n      title: \"Вперед\",\r\n      description: \"Нажмите для смещения графика вперед\",\r\n      target: () => refArrowRight.current,\r\n      disabled: !statisticId,\r\n    },\r\n\r\n    {\r\n      title: \"Создание точки\",\r\n      description: \"Нажмите для добавления точки на график\",\r\n      target: () => refAddPoint.current,\r\n      disabled: !statisticId,\r\n    },\r\n    {\r\n      title: \"Удаление точки\",\r\n      description: \"Нажмите для удаления только что созданной точки\",\r\n      target: () => refDeletePoint.current,\r\n      disabled: !statisticId,\r\n    },\r\n\r\n    {\r\n      title: \"Название статистики\",\r\n      description: \"Здесь можно поменять название выбранной статистики\",\r\n      target: () => refName.current, // Добавляем проверку\r\n    },\r\n    {\r\n      title: \"Выбрать статистику\",\r\n      description: \"Нажмите и выберите пост\",\r\n      target: () => refLupa.current, // Добавляем проверку\r\n    },\r\n    {\r\n      title: \"Тип статистики\",\r\n      description: \"Здесь можно поменять тип статистики\",\r\n      target: () => (statisticId ? refType.current : null), // Добавляем проверку\r\n      disabled: !statisticId,\r\n    },\r\n    {\r\n      title: \"Пост\",\r\n      description: \"Здесь можно поменять пост у статистики\",\r\n      target: () => (statisticId ? refPost.current : null), // Добавляем проверку\r\n      disabled: !statisticId,\r\n    },\r\n    {\r\n      title: \"График\",\r\n      description: \"Здесь можно поменять тип отображаемого графика\",\r\n      target: () => (statisticId ? refTypeGraphic.current : null), // Добавляем проверку\r\n      disabled: !statisticId,\r\n    },\r\n    {\r\n      title: \"Описание\",\r\n      description: \"Описание графика\",\r\n      target: () => (statisticId ? refDescription.current : null), // Добавляем проверку\r\n      disabled: !statisticId,\r\n    },\r\n  ].filter((step) => !step.disabled);\r\n\r\n  const {\r\n    statistics,\r\n    isLoadingGetStatistics,\r\n    isFetchingGetStatistics,\r\n    isErrorGetStatistics,\r\n\r\n    currentStatistic,\r\n    statisticDatas,\r\n    isLoadingGetStatisticId,\r\n    isErrorGetStatisticId,\r\n    isFetchingGetStatisticId,\r\n\r\n    updateStatistics,\r\n    isLoadingUpdateStatisticMutation,\r\n    isSuccessUpdateStatisticMutation,\r\n    isErrorUpdateStatisticMutation,\r\n    ErrorUpdateStatisticMutation,\r\n    localIsResponseUpdateStatisticsMutation,\r\n\r\n    postStatistics,\r\n    isLoadingPostStatisticMutation,\r\n    isSuccessPostStatisticMutation,\r\n    isErrorPostStatisticMutation,\r\n    ErrorPostStatisticMutation,\r\n    localIsResponsePostStatisticsMutation,\r\n  } = useStatisticsHook({\r\n    statisticData: true,\r\n    statisticId: statisticId,\r\n  });\r\n\r\n  // Получение постов\r\n  const { allPosts, isLoadingGetPosts, isErrorGetPosts } = usePostsHook();\r\n\r\n  // Создание статистики\r\n  const {\r\n    selectedID: selectedPostIdForCreated,\r\n\r\n    handleRadioChange,\r\n    handleInputChangeModalSearch,\r\n\r\n    filterArraySearchModal,\r\n    inputSearchModal,\r\n  } = useModalSelectRadio({ array: allPosts, arrayItem: \"postName\" });\r\n\r\n  const functionOpenModalForCreated = () => {\r\n    setOpenModalForCreated(true);\r\n  };\r\n\r\n  const createStatistics = async () => {\r\n    await postStatistics({\r\n      name: \"Статистика\",\r\n      postId: selectedPostIdForCreated,\r\n    })\r\n      .unwrap()\r\n      .then((result) => {\r\n        setStatisticId(result.id);\r\n        setOpenModalForCreated(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Ошибка:\", JSON.stringify(error, null, 2)); // выводим детализированную ошибку\r\n      });\r\n  };\r\n\r\n  // Все для начальной страницы\r\n  const addPoint = () => {\r\n    setCreatePoints((prevState) => [\r\n      { valueDate: \"\", value: 0, id: new Date() },\r\n      ...prevState,\r\n    ]);\r\n  };\r\n\r\n  const deletePoint = () => {\r\n    setCreatePoints((prevState) => prevState.slice(0, -1));\r\n  };\r\n\r\n  const onChangePoints = (nameArrray, value, type, index, id) => {\r\n    if (nameArrray === \"received\") {\r\n      const updatedPoints = [...receivedPoints];\r\n      if (type === \"value\") {\r\n        updatedPoints[index][type] = Number(value);\r\n      } else {\r\n        updatedPoints[index][type] = value;\r\n      }\r\n      setReceivedPoints(updatedPoints);\r\n    } else {\r\n      setCreatePoints((prevState) => {\r\n        const updatedPoints = prevState.map((item) => {\r\n          if (item.id === id) {\r\n            return type === \"value\"\r\n              ? { ...item, value: Number(value) }\r\n              : { ...item, valueDate: value };\r\n          }\r\n          return item;\r\n        });\r\n\r\n        updatedPoints.sort(\r\n          (a, b) => Date.parse(b.valueDate) - Date.parse(a.valueDate)\r\n        );\r\n        return updatedPoints;\r\n      });\r\n    }\r\n  };\r\n\r\n  function compareArrays(oldArray, newArray) {\r\n    const changes = [];\r\n    newArray.forEach((newItem) => {\r\n      const oldItem = oldArray.find((item) => item.id === newItem.id);\r\n\r\n      if (oldItem) {\r\n        const itemChanges = {};\r\n\r\n        [\"value\", \"valueDate\"].forEach((key) => {\r\n          if (newItem[key] !== oldItem[key]) {\r\n            if (key == \"valueDate\") {\r\n              itemChanges[key] = new Date(newItem[key]);\r\n            } else {\r\n              itemChanges[key] = newItem[key];\r\n            }\r\n          }\r\n        });\r\n\r\n        if (Object.keys(itemChanges).length > 0) {\r\n          changes.push({ _id: newItem.id, ...itemChanges });\r\n        }\r\n      }\r\n    });\r\n\r\n    return changes;\r\n  }\r\n\r\n  const saveUpdateStatistics = async () => {\r\n    const Data = {};\r\n\r\n    if (Object.keys(currentStatistic).length == 0) return;\r\n\r\n    if (type !== currentStatistic?.type) {\r\n      Data.type = type;\r\n    }\r\n    if (name !== currentStatistic?.name) {\r\n      Data.name = name;\r\n    }\r\n    if (postId !== currentStatistic?.post?.id) {\r\n      Data.postId = postId;\r\n    }\r\n    if (description !== currentStatistic?.description) {\r\n      Data.description = description;\r\n    }\r\n    if (createPoints.length > 0) {\r\n      const array = createPoints.filter((item) => item.value !== \"\");\r\n      if (array.length > 0) {\r\n        const formatDate = array.map((item) => {\r\n          return {\r\n            value: item.value,\r\n            valueDate: new Date(item.valueDate),\r\n          };\r\n        });\r\n        Data.statisticDataCreateDtos = formatDate;\r\n      }\r\n    }\r\n    if (receivedPoints.length > 0) {\r\n      const array = compareArrays(oldReceivedPoints, receivedPoints);\r\n      if (array.length > 0) {\r\n        Data.statisticDataUpdateDtos = [];\r\n        Data.statisticDataUpdateDtos.push(...array);\r\n      }\r\n    }\r\n    if (Object.keys(Data).length > 0) {\r\n      await updateStatistics({\r\n        statisticId,\r\n        _id: statisticId,\r\n        ...Data,\r\n      })\r\n        .unwrap()\r\n        .then(() => {\r\n          if (Data.name) {\r\n            // refetch();\r\n          }\r\n\r\n          setOpenModalReportDay(false);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Ошибка:\", JSON.stringify(error, null, 2)); // выводим детализированную ошибку\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (typeGraphic !== \"Ежедневный\") {\r\n      setDisabledPoints(true);\r\n    } else {\r\n      setDisabledPoints(false);\r\n    }\r\n  }, [typeGraphic]);\r\n\r\n  useEffect(() => {\r\n    if (currentStatistic?.name) {\r\n      setName(currentStatistic.name);\r\n    }\r\n\r\n    if (currentStatistic?.type) {\r\n      setType(currentStatistic.type);\r\n    }\r\n\r\n    if (currentStatistic?.description) {\r\n      setDescription(currentStatistic.description);\r\n    }\r\n\r\n    if (currentStatistic?.post?.id) {\r\n      setPostId(currentStatistic.post.id);\r\n    }\r\n  }, [currentStatistic.id]);\r\n\r\n  const countMonthsForGraphicYear = () => {\r\n    const monthlyData = statisticDatas.reduce((acc, item) => {\r\n      const itemDate = new Date(item.valueDate);\r\n      const monthKey = `${itemDate.getFullYear()}-${itemDate.getMonth() + 1}`; // Год-месяц как ключ\r\n      if (\r\n        !isNaN(itemDate) &&\r\n        item?.correlationType !== \"Год\" &&\r\n        new Date(\r\n          new Date().setFullYear(new Date().getFullYear() - 12 + count)\r\n        ) < itemDate\r\n      ) {\r\n        if (item?.correlationType === \"Месяц\") {\r\n          acc[monthKey] = {\r\n            id: item.id,\r\n            valueSum: item.value,\r\n            year: itemDate.getFullYear(),\r\n            month: itemDate.getMonth() + 1,\r\n            correlationType: \"Месяц\",\r\n          };\r\n        }\r\n\r\n        if (!acc[monthKey]) {\r\n          acc[monthKey] = {\r\n            valueSum: 0,\r\n            year: itemDate.getFullYear(),\r\n            month: itemDate.getMonth() + 1,\r\n          };\r\n        }\r\n\r\n        if (!acc[monthKey]?.correlationType) {\r\n          acc[monthKey].valueSum += item.value;\r\n        }\r\n      }\r\n      return acc;\r\n    }, {});\r\n\r\n    const monthlyArray = Object.keys(monthlyData).map((monthKey) => {\r\n      const { id, valueSum, year, month, correlationType } =\r\n        monthlyData[monthKey];\r\n\r\n      const lastDayOfMonth = new Date(year, month, 0);\r\n      const date = lastDayOfMonth.getDate();\r\n\r\n      return {\r\n        id: id || null,\r\n        valueDate: `${year}-${month}-${date}`,\r\n        value: valueSum,\r\n        correlationType: correlationType,\r\n      };\r\n    });\r\n\r\n    return monthlyArray;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!statisticDatas.length) return;\r\n\r\n    setReceivedPoints([]);\r\n    setCreatePoints([]);\r\n    setOldReceivedPoints([]);\r\n    setArrayPoints([]);\r\n    setShowPoints([]);\r\n    setCount(0);\r\n    setShowCorrelationPoint([]);\r\n\r\n    if (typeGraphic === \"Ежедневный\") {\r\n      const dayNow = new Date();\r\n\r\n      const currentWeekday = dayNow.getDay(); // Текущий день недели (0 - Воскресенье, 1 - Понедельник и т.д.)\r\n\r\n      // Определяем начальную дату - ближайший предыдущий день `day`\r\n      const startDate = new Date(dayNow);\r\n      let dayDifference;\r\n\r\n      if (currentWeekday >= reportDay) {\r\n        dayDifference = currentWeekday - reportDay;\r\n      } else {\r\n        dayDifference = 7 - (reportDay - currentWeekday);\r\n      }\r\n\r\n      startDate.setDate(dayNow.getDate() - dayDifference);\r\n\r\n      // Вычисляем конечную дату (b = startDate + 7 дней)\r\n      const endDate = new Date(startDate);\r\n      endDate.setDate(startDate.getDate() + 7);\r\n\r\n      // Генерируем массив всех дат в диапазоне [startDate, endDate)\r\n      const allDates = [];\r\n      for (\r\n        let date = new Date(startDate);\r\n        date < endDate;\r\n        date.setDate(date.getDate() + 1)\r\n      ) {\r\n        allDates.push(new Date(date).toISOString().split(\"T\")[0]);\r\n      }\r\n\r\n      // Фильтруем данные и заполняем пропущенные даты\r\n      const filteredData = statisticDatas\r\n        ?.filter((item) => {\r\n          // Проверяем, если valueDate существует и валиден\r\n          const itemDate = item?.valueDate ? new Date(item.valueDate) : null;\r\n\r\n          // Если itemDate не валидная, пропускаем элемент\r\n          if (isNaN(itemDate?.getTime())) {\r\n            return false; // Пропускаем невалидные даты\r\n          }\r\n\r\n          // Проверяем, если startDate и endDate валидные\r\n          const isValidStartDate =\r\n            startDate instanceof Date && !isNaN(startDate.getTime());\r\n          const isValidEndDate =\r\n            endDate instanceof Date && !isNaN(endDate.getTime());\r\n\r\n          if (!isValidStartDate || !isValidEndDate) {\r\n            return false; // Пропускаем, если startDate или endDate невалидны\r\n          }\r\n\r\n          const itemDateStr = itemDate.toISOString().split(\"T\")[0];\r\n          const startDateStr = startDate.toISOString().split(\"T\")[0];\r\n          const endDateStr = endDate.toISOString().split(\"T\")[0];\r\n\r\n          // Возвращаем результат фильтрации\r\n          return (\r\n            startDateStr <= itemDateStr &&\r\n            itemDateStr < endDateStr &&\r\n            item.correlationType === null\r\n          );\r\n        })\r\n        ?.map((item) => ({\r\n          ...item,\r\n          valueDate: item.valueDate?.split(\"T\")[0], // Предполагаем, что valueDate - строка с датой\r\n        }));\r\n\r\n      const updatedPoints = [];\r\n      const _updatedPoints = [];\r\n      const _createdPoints = [];\r\n\r\n      allDates.forEach((date) => {\r\n        const existingPoint = filteredData.find(\r\n          (item) => item.valueDate === date\r\n        );\r\n\r\n        if (existingPoint) {\r\n          updatedPoints.push(existingPoint);\r\n          _updatedPoints.push({ ...existingPoint });\r\n        } else {\r\n          _createdPoints.push({\r\n            id: date,\r\n            valueDate: date,\r\n            value: \"\",\r\n          });\r\n        }\r\n      });\r\n\r\n      // Сортируем данные по убыванию даты\r\n      updatedPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n      _updatedPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n      _createdPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n\r\n      // Устанавливаем данные\r\n      setOldReceivedPoints(_updatedPoints);\r\n      setReceivedPoints(updatedPoints);\r\n      setCreatePoints(_createdPoints);\r\n\r\n      functionForColorFirstPoint(startDate);\r\n    }\r\n\r\n    if (typeGraphic === \"Ежемесячный\") {\r\n      const arrayPointsCorrelationTypeisMonth = statisticDatas.filter(\r\n        (item) => item.correlationType === \"Месяц\"\r\n      );\r\n      setShowCorrelationPoint(arrayPointsCorrelationTypeisMonth);\r\n\r\n      // Группируем данные по месяцам и суммируем `valueDate` за каждый месяц\r\n      const monthlyData = statisticDatas.reduce((acc, item) => {\r\n        const itemDate = new Date(item.valueDate);\r\n        const monthKey = `${itemDate.getFullYear()}-${itemDate.getMonth() + 1}`; // Год-месяц как ключ\r\n        if (\r\n          !isNaN(itemDate) &&\r\n          item?.correlationType !== \"Год\" &&\r\n          new Date(new Date().setMonth(new Date().getMonth() - 13)) < itemDate\r\n        ) {\r\n          if (item?.correlationType === \"Месяц\") {\r\n            acc[monthKey] = {\r\n              id: item.id,\r\n              valueSum: item.value,\r\n              year: itemDate.getFullYear(),\r\n              month: itemDate.getMonth() + 1,\r\n              correlationType: \"Месяц\",\r\n            };\r\n          }\r\n\r\n          if (!acc[monthKey]) {\r\n            acc[monthKey] = {\r\n              valueSum: 0,\r\n              year: itemDate.getFullYear(),\r\n              month: itemDate.getMonth() + 1,\r\n            };\r\n          }\r\n\r\n          if (!acc[monthKey]?.correlationType) {\r\n            acc[monthKey].valueSum += item.value;\r\n          }\r\n        }\r\n        return acc;\r\n      }, {});\r\n\r\n      // Формируем новый массив, включающий `valueDate` и `date` (последний день месяца)\r\n      const updatedMonthlyPoints = [];\r\n\r\n      // Для каждого месяца от 14 месяцев назад до текущего добавляем данные\r\n      for (let i = 0; i < 13; i++) {\r\n        const monthDate = new Date();\r\n        monthDate.setMonth(monthDate.getMonth() - i);\r\n        const monthKey = `${monthDate.getFullYear()}-${\r\n          monthDate.getMonth() + 1\r\n        }`;\r\n\r\n        // Если данных нет для этого месяца, создаем запись с суммой 0\r\n        if (!monthlyData[monthKey]) {\r\n          monthlyData[monthKey] = {\r\n            valueSum: 0,\r\n            year: monthDate.getFullYear(),\r\n            month: monthDate.getMonth() + 1,\r\n          };\r\n        }\r\n\r\n        const lastDayOfMonth = new Date(\r\n          monthDate.getFullYear(),\r\n          monthDate.getMonth() + 1,\r\n          0\r\n        ); // Получаем последний день месяца\r\n        const year = lastDayOfMonth.getFullYear();\r\n        const monthValue = lastDayOfMonth.getMonth() + 1; // Месяцы начинаются с 0\r\n        const date = lastDayOfMonth.getDate(); // Дата\r\n\r\n        updatedMonthlyPoints.push({\r\n          id: monthlyData[monthKey]?.id || null, // Если id не найден, присваиваем null\r\n          valueDate: `${year}-${monthValue}-${date}`,\r\n          value: monthlyData[monthKey].valueSum, // Сумма за месяц\r\n          ...(monthlyData[monthKey].correlationType\r\n            ? { correlationType: monthlyData[monthKey].correlationType }\r\n            : {}),\r\n        });\r\n      }\r\n\r\n      // Сортируем данные по дате, от последнего месяца к первому\r\n      updatedMonthlyPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n\r\n      setReceivedPoints(updatedMonthlyPoints);\r\n\r\n      functionForColorFirstPoint();\r\n    }\r\n\r\n    if (typeGraphic === \"Ежегодовой\") {\r\n      const arrayPointsCorrelationTypeisYear = statisticDatas.filter(\r\n        (item) => item.correlationType === \"Год\"\r\n      );\r\n      setShowCorrelationPoint(arrayPointsCorrelationTypeisYear);\r\n\r\n      const dataMonth = countMonthsForGraphicYear();\r\n      const dataWithCorrelationTypeYear = statisticDatas?.filter(\r\n        (item) =>\r\n          item.correlationType === \"Год\" &&\r\n          new Date().getFullYear() - 12 < new Date(item.valueDate).getFullYear()\r\n      );\r\n\r\n      const prepareData = dataMonth.reduce((acc, month) => {\r\n        const date = new Date(month.valueDate);\r\n        const yearKey = `${date.getFullYear()}`;\r\n\r\n        const elementWithSameYear = dataWithCorrelationTypeYear.find(\r\n          (el) => new Date(el.valueDate).getFullYear() === date.getFullYear()\r\n        );\r\n\r\n        if (elementWithSameYear && !acc[yearKey]) {\r\n          acc[yearKey] = {\r\n            id: month.id,\r\n            valueSum: elementWithSameYear.value,\r\n            correlationType: elementWithSameYear.correlationType,\r\n          };\r\n          return acc;\r\n        }\r\n\r\n        if (!acc[yearKey]) {\r\n          // Если года ещё нет в объекте, создаём новую запись\r\n          acc[yearKey] = {\r\n            valueSum: 0,\r\n            year: date.getFullYear(),\r\n          };\r\n        }\r\n\r\n        // Если у года нет свойства correlationType, добавляем значение к valueSum\r\n        if (!acc[yearKey]?.correlationType) {\r\n          acc[yearKey].valueSum += month.value;\r\n        }\r\n\r\n        return acc;\r\n      }, {});\r\n\r\n      const objectdataWithCorrelationTypeYear =\r\n        dataWithCorrelationTypeYear.reduce((acc, item) => {\r\n          const itemDate = new Date(item.valueDate);\r\n          const yearKey = `${itemDate.getFullYear()}`;\r\n          if (\r\n            new Date(new Date().setFullYear(new Date().getFullYear() - 12)) <\r\n            itemDate\r\n          ) {\r\n            if (!acc[yearKey]) {\r\n              acc[yearKey] = {\r\n                id: item.id,\r\n                valueSum: item.value,\r\n                correlationType: item.correlationType,\r\n              };\r\n            }\r\n          }\r\n\r\n          return acc;\r\n        }, {});\r\n\r\n      const prepareObjectData = _.merge(\r\n        {},\r\n        prepareData,\r\n        objectdataWithCorrelationTypeYear\r\n      );\r\n\r\n      const updatedYearPoints = [];\r\n\r\n      // Для каждого года от 13 лет назад до текущего добавляем данные\r\n      for (let i = 0; i < 12; i++) {\r\n        const yearDate = new Date();\r\n        yearDate.setFullYear(yearDate.getFullYear() - i);\r\n        const yearKey = `${yearDate.getFullYear()}`;\r\n\r\n        if (!prepareObjectData[yearKey]) {\r\n          prepareObjectData[yearKey] = {\r\n            valueSum: 0,\r\n            year: yearDate.getFullYear(),\r\n          };\r\n        }\r\n\r\n        updatedYearPoints.push({\r\n          id: prepareObjectData[yearKey]?.id || null,\r\n          valueDate: `${yearDate.getFullYear()}-01-01`,\r\n          value: prepareObjectData[yearKey].valueSum,\r\n          ...(prepareObjectData[yearKey].correlationType\r\n            ? { correlationType: prepareObjectData[yearKey].correlationType }\r\n            : {}),\r\n        });\r\n      }\r\n      updatedYearPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n      setReceivedPoints(updatedYearPoints);\r\n      functionForColorFirstPoint();\r\n    }\r\n\r\n    if (typeGraphic === \"13\" || typeGraphic === \"26\" || typeGraphic === \"52\") {\r\n      const today = new Date();\r\n      const end = new Date(today);\r\n      const start = new Date();\r\n      start.setDate(today.getDate() - (Number(typeGraphic) + 1) * 7);\r\n\r\n      const selectedDayOfWeek = parseInt(reportDay);\r\n      if (isNaN(selectedDayOfWeek)) {\r\n        throw new Error(\"selectedDayOfWeek должен быть числом.\");\r\n      }\r\n\r\n      const result = [];\r\n      let currentDate = new Date(start);\r\n\r\n      // Перемещаем currentDate на первый выбранный день недели\r\n      while (currentDate.getDay() !== selectedDayOfWeek) {\r\n        currentDate.setDate(currentDate.getDate() + 1);\r\n      }\r\n\r\n      // Цикл по неделям\r\n      while (currentDate <= end) {\r\n        const nextDate = new Date(currentDate);\r\n        nextDate.setDate(currentDate.getDate() + 7);\r\n\r\n        // Фильтруем и суммируем значения для текущей недели\r\n        const currentSum = statisticDatas\r\n          .filter((item) => {\r\n            const itemDate = new Date(item.valueDate);\r\n            const isValid =\r\n              currentDate <= itemDate &&\r\n              itemDate < nextDate &&\r\n              item.correlationType === null;\r\n\r\n            if (isValid) {\r\n              setArrayPoints((prevState) => [...prevState, item]);\r\n            }\r\n            return isValid;\r\n          })\r\n          .reduce((sum, item) => sum + item.value, 0);\r\n\r\n        // Создаем новую дату на день позже\r\n        const valueDate = new Date(nextDate.getTime() + 24 * 60 * 60 * 1000);\r\n\r\n        // Проверяем, что valueDate не позже сегодняшней даты\r\n        if (valueDate <= today) {\r\n          setArrayPoints((prevState) =>\r\n            prevState.map((item) =>\r\n              item.myID\r\n                ? { ...item }\r\n                : { ...item, myID: valueDate.toISOString().split(\"T\")[0] }\r\n            )\r\n          );\r\n\r\n          result.push({\r\n            value: currentSum,\r\n            valueDate: valueDate.toISOString().split(\"T\")[0],\r\n          });\r\n        }\r\n\r\n        currentDate = nextDate; // Переходим к следующей неделе\r\n      }\r\n\r\n      setReceivedPoints(\r\n        result.sort((a, b) => new Date(b.valueDate) - new Date(a.valueDate))\r\n      );\r\n    }\r\n  }, [\r\n    currentStatistic.id,\r\n    isLoadingGetStatisticId,\r\n    isFetchingGetStatisticId,\r\n    typeGraphic,\r\n  ]);\r\n\r\n  // Все для модального окна при нажатии на блок координат точек для статистики\r\n  const exitModal = () => {\r\n    setShowPoints([]);\r\n    setActiveIndex(null);\r\n    setOpenModal(false);\r\n  };\r\n\r\n  const showCurrentPoint = (id) => {\r\n    setOpenModal(true);\r\n\r\n    const end = new Date(id);\r\n    let start = new Date(id);\r\n\r\n    if (typeGraphic === \"Ежемесячный\") {\r\n      const elementcorrelationType = showCorrelationPoint.filter(\r\n        (item) => new Date(item.valueDate).toDateString() === end.toDateString()\r\n      );\r\n      if (elementcorrelationType.length > 0) {\r\n        setShowPoints(elementcorrelationType);\r\n      } else {\r\n        setShowPoints((prevState) => [\r\n          ...prevState,\r\n          { valueDate: end, value: \"\" },\r\n        ]);\r\n      }\r\n    }\r\n\r\n    if (typeGraphic === \"Ежегодовой\") {\r\n      const elementcorrelationType = showCorrelationPoint.filter(\r\n        (item) => new Date(item.valueDate).toDateString() === end.toDateString()\r\n      );\r\n      if (elementcorrelationType.length > 0) {\r\n        setShowPoints(elementcorrelationType);\r\n      } else {\r\n        setShowPoints((prevState) => [\r\n          ...prevState,\r\n          { valueDate: end, value: \"\" },\r\n        ]);\r\n      }\r\n    }\r\n\r\n    if (typeGraphic !== \"Ежемесячный\" && typeGraphic !== \"Ежегодовой\") {\r\n      start.setDate(end.getDate() - 7); //Вот тут происходит вычисление количества дат в модальном окне\r\n      const array = arrayPoints\r\n        .filter((item) => item.myID === id)\r\n        .sort((a, b) => new Date(a.valueDate) - new Date(b.valueDate));\r\n\r\n      const arrayNew = [];\r\n\r\n      if (array.length < 7) {\r\n        // Проходим по всем датам от start до end\r\n        while (start < end) {\r\n          // Ищем элемент, соответствующий текущей дате start\r\n          const foundItem = array.find(\r\n            (item) =>\r\n              new Date(item.valueDate).toDateString() === start.toDateString()\r\n          );\r\n\r\n          if (foundItem) {\r\n            // Если нашли, добавляем его в arrayNew\r\n            arrayNew.push(foundItem);\r\n          } else {\r\n            // Если не нашли, добавляем объект с нулевым значением\r\n            arrayNew.push({\r\n              valueDate: start.toISOString(), // Для сохранения даты в правильном формате\r\n              value: \"\",\r\n            });\r\n          }\r\n\r\n          // Переходим к следующему дню\r\n          start.setDate(start.getDate() + 1);\r\n        }\r\n        setShowPoints(arrayNew);\r\n      } else {\r\n        setShowPoints(array);\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateModalPoint = (value, index) => {\r\n    if (index < 0 || index >= showPoints.length) return;\r\n\r\n    const update = showPoints.map((item) => ({\r\n      ...item,\r\n    }));\r\n\r\n    update[index] = {\r\n      ...update[index],\r\n      value: value === null ? \"\" : Number(value),\r\n\r\n      ...(typeGraphic === \"Ежегодовой\" ? { correlationType: \"Год\" } : {}),\r\n      ...(typeGraphic === \"Ежемесячный\" ? { correlationType: \"Месяц\" } : {}),\r\n    };\r\n\r\n    setShowPoints(update);\r\n  };\r\n\r\n  const saveModalPoints = async (array) => {\r\n    const Data = {};\r\n    if (typeGraphic === \"Ежемесячный\" || typeGraphic === \"Ежегодовой\") {\r\n      if (array[0][\"id\"]) {\r\n        const arrayReceived = array.map((item) => ({\r\n          _id: item.id,\r\n          value: item.value,\r\n          valueDate: item.valueDate,\r\n          ...(typeGraphic === \"Ежегодовой\"\r\n            ? { correlationType: item.correlationType }\r\n            : {}),\r\n          ...(typeGraphic === \"Ежемесячный\"\r\n            ? { correlationType: item.correlationType }\r\n            : {}),\r\n        }));\r\n        Data.statisticDataUpdateDtos = arrayReceived;\r\n      } else {\r\n        const formatDate = array.map((item) => {\r\n          return {\r\n            ...item,\r\n            valueDate: new Date(item.valueDate),\r\n\r\n            ...(typeGraphic === \"Ежегодовой\"\r\n              ? { correlationType: item.correlationType }\r\n              : {}),\r\n            ...(typeGraphic === \"Ежемесячный\"\r\n              ? { correlationType: item.correlationType }\r\n              : {}),\r\n          };\r\n        });\r\n        Data.statisticDataCreateDtos = formatDate;\r\n      }\r\n    } else {\r\n      const endArray = array.filter((item) => item.value != \"\");\r\n      const create = endArray.filter((item) => !item.id);\r\n      const received = endArray\r\n        .filter((item) => item.id)\r\n        .map((item) => ({\r\n          _id: item.id,\r\n          value: item.value,\r\n          valueDate: item.valueDate,\r\n        }));\r\n\r\n      if (create.length > 0) {\r\n        const formatDate = create.map((item) => {\r\n          return {\r\n            ...item,\r\n            valueDate: new Date(item.valueDate),\r\n          };\r\n        });\r\n        Data.statisticDataCreateDtos = formatDate;\r\n      }\r\n      if (received.length > 0) {\r\n        Data.statisticDataUpdateDtos = received;\r\n      }\r\n    }\r\n    await updateStatistics({\r\n      statisticId,\r\n      _id: statisticId,\r\n      ...Data,\r\n    })\r\n      .unwrap()\r\n      .then(() => {\r\n        setOpenModal(false);\r\n        setActiveIndex(null);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Ошибка:\", JSON.stringify(error, null, 2)); // выводим детализированную ошибку\r\n      });\r\n  };\r\n\r\n  //Для стрелок влева вправо график менять\r\n\r\n  const handleArrowLeftClick = () => {\r\n    setCount((prevCount) => prevCount - 1);\r\n  };\r\n\r\n  const handleArrowRightClick = () => {\r\n    setCount((prevCount) => prevCount + 1);\r\n  };\r\n\r\n  const functionForColorFirstPoint = (startDate) => {\r\n    if (typeGraphic === \"Ежедневный\") {\r\n      const colorFirstPoint = new Date(startDate);\r\n      colorFirstPoint.setDate(colorFirstPoint.getDate() + (count - 1));\r\n      const element = statisticDatas.find(\r\n        (item) =>\r\n          new Date(item.valueDate).toISOString().split(\"T\")[0] ===\r\n          colorFirstPoint.toISOString().split(\"T\")[0]\r\n      );\r\n      setColorFirstPoint(element?.value);\r\n    }\r\n\r\n    if (typeGraphic === \"Ежемесячный\") {\r\n      const oneMonth = statisticDatas.reduce((acc, item) => {\r\n        const itemDate = new Date(item.valueDate);\r\n        const monthKey = `${itemDate.getFullYear()}-${itemDate.getMonth() + 1}`; // Год-месяц как ключ\r\n\r\n        const minDate = new Date();\r\n        minDate.setMonth(minDate.getMonth() - 13 + count);\r\n        const maxDate = new Date();\r\n        maxDate.setMonth(maxDate.getMonth() - 12 + count);\r\n        if (\r\n          !isNaN(itemDate) &&\r\n          item?.correlationType !== \"Год\" &&\r\n          itemDate >= minDate &&\r\n          itemDate <= maxDate\r\n        ) {\r\n          if (item?.correlationType === \"Месяц\") {\r\n            acc[monthKey] = {\r\n              id: item.id,\r\n              valueSum: item.value,\r\n              year: itemDate.getFullYear(),\r\n              month: itemDate.getMonth() + 1,\r\n              correlationType: \"Месяц\",\r\n            };\r\n          }\r\n\r\n          if (!acc[monthKey]) {\r\n            acc[monthKey] = {\r\n              valueSum: 0,\r\n              year: itemDate.getFullYear(),\r\n              month: itemDate.getMonth() + 1,\r\n            };\r\n          }\r\n\r\n          if (!acc[monthKey]?.correlationType) {\r\n            acc[monthKey].valueSum += item.value;\r\n          }\r\n        }\r\n        return acc;\r\n      }, {});\r\n\r\n      const firstMonthData = Object.values(oneMonth)[0];\r\n      console.log(\"firstMonthData\", firstMonthData);\r\n      if (firstMonthData) {\r\n        setColorFirstPoint(firstMonthData.valueSum);\r\n      }\r\n\r\n      // const oneMonth = statisticDatas.reduce((acc, item) => {\r\n      //   const itemDate = new Date(item.valueDate);\r\n      //   const monthKey = `${itemDate.getFullYear()}-${itemDate.getMonth() + 1}`; // Год-месяц как ключ\r\n\r\n      //   const minDate = new Date();\r\n      //   minDate.setMonth(minDate.getMonth() - 13);\r\n      //   const maxDate = new Date();\r\n      //   maxDate.setMonth(maxDate.getMonth() - 12);\r\n      //   if (\r\n      //     !isNaN(itemDate) &&\r\n      //     item?.correlationType !== \"Год\" &&\r\n      //     itemDate >= minDate &&\r\n      //     itemDate <= maxDate\r\n      //   ) {\r\n      //     if (item?.correlationType === \"Месяц\") {\r\n      //       acc[monthKey] = {\r\n      //         id: item.id,\r\n      //         valueSum: item.value,\r\n      //         year: itemDate.getFullYear(),\r\n      //         month: itemDate.getMonth() + 1,\r\n      //         correlationType: \"Месяц\",\r\n      //       };\r\n      //     }\r\n\r\n      //     if (!acc[monthKey]) {\r\n      //       acc[monthKey] = {\r\n      //         valueSum: 0,\r\n      //         year: itemDate.getFullYear(),\r\n      //         month: itemDate.getMonth() + 1,\r\n      //       };\r\n      //     }\r\n\r\n      //     if (!acc[monthKey]?.correlationType) {\r\n      //       acc[monthKey].valueSum += item.value;\r\n      //     }\r\n      //   }\r\n      //   return acc;\r\n      // }, {});\r\n\r\n      // const firstMonthData = Object.values(oneMonth)[0];\r\n      // if (firstMonthData) {\r\n      //   setColorFirstPoint(firstMonthData.valueSum);\r\n      // }\r\n    }\r\n\r\n    if (typeGraphic === \"Ежегодовой\") {\r\n      const dataMonth = countMonthsForGraphicYear();\r\n      const startDate = new Date().getFullYear() - 12 + count;\r\n\r\n      const dataWithCorrelationTypeYear = statisticDatas?.filter(\r\n        (item) =>\r\n          item.correlationType === \"Год\" &&\r\n          startDate == new Date(item.valueDate).getFullYear()\r\n      );\r\n\r\n      const prepareData = dataMonth.reduce((acc, month) => {\r\n        const date = new Date(month.valueDate);\r\n        const yearKey = `${date.getFullYear()}`;\r\n\r\n        const elementWithSameYear = dataWithCorrelationTypeYear.find(\r\n          (el) => new Date(el.valueDate).getFullYear() === date.getFullYear()\r\n        );\r\n\r\n        if (elementWithSameYear && !acc[yearKey]) {\r\n          acc[yearKey] = {\r\n            id: month.id,\r\n            valueSum: elementWithSameYear.value,\r\n            correlationType: elementWithSameYear.correlationType,\r\n          };\r\n          return acc;\r\n        }\r\n\r\n        if (!acc[yearKey]) {\r\n          // Если года ещё нет в объекте, создаём новую запись\r\n          acc[yearKey] = {\r\n            valueSum: 0,\r\n            year: date.getFullYear(),\r\n          };\r\n        }\r\n\r\n        // Если у года нет свойства correlationType, добавляем значение к valueSum\r\n        if (!acc[yearKey]?.correlationType) {\r\n          acc[yearKey].valueSum += month.value;\r\n        }\r\n\r\n        return acc;\r\n      }, {});\r\n\r\n      const objectdataWithCorrelationTypeYear =\r\n        dataWithCorrelationTypeYear.reduce((acc, item) => {\r\n          const itemDate = new Date(item.valueDate).getFullYear();\r\n          const yearKey = `${itemDate}`;\r\n          if (startDate === itemDate) {\r\n            if (!acc[yearKey]) {\r\n              acc[yearKey] = {\r\n                id: item.id,\r\n                valueSum: item.value,\r\n                correlationType: item.correlationType,\r\n              };\r\n            }\r\n          }\r\n\r\n          return acc;\r\n        }, {});\r\n\r\n      const prepareObjectData = _.merge(\r\n        {},\r\n        prepareData,\r\n        objectdataWithCorrelationTypeYear\r\n      );\r\n\r\n      const firstYearData = Object.values(prepareObjectData)[0];\r\n      console.log(\"firstYearData\", firstYearData);\r\n      if (firstYearData) {\r\n        setColorFirstPoint(firstYearData.valueSum);\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateStatisticsData = () => {\r\n    setReceivedPoints([]);\r\n    setArrayPoints([]);\r\n    setShowPoints([]);\r\n    setShowCorrelationPoint([]);\r\n\r\n    if (!statisticDatas.length) return;\r\n\r\n    if (typeGraphic === \"Ежедневный\") {\r\n      const dayNow = new Date();\r\n      const currentWeekday = dayNow.getDay(); // Текущий день недели (0 - Воскресенье, 1 - Понедельник и т.д.)\r\n\r\n      // Определяем начальную дату - ближайший предыдущий день `day`, не более 7 дней назад\r\n      const startDate = new Date(dayNow);\r\n      let dayDifference;\r\n\r\n      if (currentWeekday >= reportDay) {\r\n        dayDifference = currentWeekday - reportDay;\r\n      } else {\r\n        dayDifference = 7 - (reportDay - currentWeekday);\r\n      }\r\n\r\n      startDate.setDate(dayNow.getDate() - dayDifference);\r\n\r\n      // Ограничиваем начальную дату максимум 7 днями назад от текущего дня\r\n      const maxStartDate = new Date(dayNow);\r\n      maxStartDate.setDate(dayNow.getDate() - 7);\r\n\r\n      if (startDate < maxStartDate) {\r\n        startDate.setTime(maxStartDate.getTime());\r\n      }\r\n\r\n      // Создаем массив всех дат за последние 7 дней\r\n      const last7Days = [];\r\n      for (let i = count; i < 7 + count; i++) {\r\n        const date = new Date(startDate);\r\n        date.setDate(dayNow.getDate() + i);\r\n        last7Days.push(date.toISOString().split(\"T\")[0]);\r\n\r\n        if (i === count) {\r\n          functionForColorFirstPoint(startDate);\r\n        }\r\n      }\r\n\r\n      // Группируем данные по дате и фильтруем\r\n      const dataMap = statisticDatas.reduce((acc, item) => {\r\n        const itemDate = item.valueDate.split(\"T\")[0];\r\n        if (!item.correlationType) {\r\n          acc[itemDate] = {\r\n            ...item,\r\n            valueDate: itemDate,\r\n          };\r\n        }\r\n\r\n        return acc;\r\n      }, {});\r\n\r\n      // Создаем массив данных для последних 7 дней, добавляем нулевые значения, если данные отсутствуют\r\n      const updatedPoints = last7Days.map((date) => {\r\n        if (dataMap[date] && dataMap[date].correlationType === null) {\r\n          return dataMap[date];\r\n        } else {\r\n          return {\r\n            id: date,\r\n            valueDate: date,\r\n            value: \"\", // Заполняем нулевым значением, если данных за день нет\r\n          };\r\n        }\r\n      });\r\n\r\n      const crPoints = updatedPoints.filter((item) => item.value === \"\");\r\n      const _updatedPoints = updatedPoints.filter((item) => item.value !== \"\");\r\n\r\n      const updatedPoints1 = _updatedPoints.map((item) => ({ ...item }));\r\n\r\n      setOldReceivedPoints(updatedPoints1);\r\n      setReceivedPoints(_updatedPoints);\r\n      setCreatePoints(crPoints);\r\n    }\r\n\r\n    if (typeGraphic === \"Ежемесячный\") {\r\n      const arrayPointsCorrelationTypeisMonth = statisticDatas.filter(\r\n        (item) => item.correlationType === \"Месяц\"\r\n      );\r\n      setShowCorrelationPoint(arrayPointsCorrelationTypeisMonth);\r\n      // Группируем данные по месяцам и суммируем `valueDate` за каждый месяц\r\n      const monthlyData = statisticDatas.reduce((acc, item) => {\r\n        const itemDate = new Date(item.valueDate);\r\n        const monthKey = `${itemDate.getFullYear()}-${itemDate.getMonth() + 1}`; // Год-месяц как ключ\r\n        if (\r\n          !isNaN(itemDate) &&\r\n          new Date(new Date().setMonth(new Date().getMonth() - 14 + count)) <\r\n            itemDate\r\n        ) {\r\n          if (item?.correlationType === \"Месяц\") {\r\n            acc[monthKey] = {\r\n              id: item.id,\r\n              valueSum: item.value,\r\n              year: itemDate.getFullYear(),\r\n              month: itemDate.getMonth() + 1,\r\n              correlationType: \"Месяц\",\r\n            };\r\n          }\r\n          if (!acc[monthKey]) {\r\n            acc[monthKey] = {\r\n              valueSum: 0,\r\n              year: itemDate.getFullYear(),\r\n              month: itemDate.getMonth() + 1,\r\n            };\r\n          }\r\n\r\n          if (!acc[monthKey]?.correlationType) {\r\n            acc[monthKey].valueSum += item.value;\r\n          }\r\n        }\r\n        return acc;\r\n      }, {});\r\n\r\n      // Формируем новый массив, включающий `valueDate` и `date` (последний день месяца)\r\n      const updatedMonthlyPoints = [];\r\n\r\n      // Для каждого месяца от 14 месяцев назад до текущего добавляем данные\r\n      for (let i = new Date().getMonth() - 14 + count; i <= count; i++) {\r\n        const monthDate = new Date();\r\n        monthDate.setMonth(monthDate.getMonth() + i);\r\n        const monthKey = `${monthDate.getFullYear()}-${\r\n          monthDate.getMonth() + 1\r\n        }`;\r\n\r\n        // Если данных нет для этого месяца, создаем запись с суммой 0\r\n        if (!monthlyData[monthKey]) {\r\n          monthlyData[monthKey] = {\r\n            valueSum: 0,\r\n            year: monthDate.getFullYear(),\r\n            month: monthDate.getMonth() + 1,\r\n          };\r\n        }\r\n\r\n        const lastDayOfMonth = new Date(\r\n          monthDate.getFullYear(),\r\n          monthDate.getMonth() + 1,\r\n          0\r\n        ); // Получаем последний день месяца\r\n        const year = lastDayOfMonth.getFullYear();\r\n        const monthValue = lastDayOfMonth.getMonth() + 1; // Месяцы начинаются с 0\r\n        const date = lastDayOfMonth.getDate(); // Дата\r\n\r\n        updatedMonthlyPoints.push({\r\n          id: monthlyData[monthKey]?.id || null, // Если id не найден, присваиваем null\r\n          valueDate: `${year}-${monthValue}-${date}`, // Форматирование в 'год-месяц-день'\r\n          value: monthlyData[monthKey].valueSum, // Сумма за месяц\r\n          ...(monthlyData[monthKey].correlationType\r\n            ? { correlationType: monthlyData[monthKey].correlationType }\r\n            : {}),\r\n        });\r\n      }\r\n\r\n      // Сортируем данные по дате, от последнего месяца к первому\r\n      updatedMonthlyPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n\r\n      setReceivedPoints(updatedMonthlyPoints);\r\n\r\n      functionForColorFirstPoint();\r\n    }\r\n\r\n    if (typeGraphic === \"Ежегодовой\") {\r\n      const arrayPointsCorrelationTypeisYear = statisticDatas.filter(\r\n        (item) => item.correlationType === \"Год\"\r\n      );\r\n      setShowCorrelationPoint(arrayPointsCorrelationTypeisYear);\r\n\r\n      const dataMonth = countMonthsForGraphicYear();\r\n      const dataWithCorrelationTypeYear = statisticDatas?.filter(\r\n        (item) =>\r\n          item.correlationType === \"Год\" &&\r\n          new Date().getFullYear() - 12 + count <\r\n            new Date(item.valueDate).getFullYear()\r\n      );\r\n\r\n      const prepareData = dataMonth.reduce((acc, month) => {\r\n        const date = new Date(month.valueDate);\r\n        const yearKey = `${date.getFullYear()}`;\r\n\r\n        const elementWithSameYear = dataWithCorrelationTypeYear.find(\r\n          (el) => new Date(el.valueDate).getFullYear() === date.getFullYear()\r\n        );\r\n\r\n        if (elementWithSameYear && !acc[yearKey]) {\r\n          acc[yearKey] = {\r\n            id: month.id,\r\n            valueSum: elementWithSameYear.value,\r\n            correlationType: elementWithSameYear.correlationType,\r\n          };\r\n          return acc;\r\n        }\r\n\r\n        if (!acc[yearKey]) {\r\n          // Если года ещё нет в объекте, создаём новую запись\r\n          acc[yearKey] = {\r\n            valueSum: 0,\r\n            year: date.getFullYear(),\r\n          };\r\n        }\r\n\r\n        // Если у года нет свойства correlationType, добавляем значение к valueSum\r\n        if (!acc[yearKey]?.correlationType) {\r\n          acc[yearKey].valueSum += month.value;\r\n        }\r\n\r\n        return acc;\r\n      }, {});\r\n\r\n      const objectdataWithCorrelationTypeYear =\r\n        dataWithCorrelationTypeYear.reduce((acc, item) => {\r\n          const itemDate = new Date(item.valueDate);\r\n          const yearKey = `${itemDate.getFullYear()}`;\r\n          if (\r\n            new Date(\r\n              new Date().setFullYear(new Date().getFullYear() - 12 + count)\r\n            ) < itemDate\r\n          ) {\r\n            if (!acc[yearKey]) {\r\n              acc[yearKey] = {\r\n                id: item.id,\r\n                valueSum: item.value,\r\n                correlationType: item.correlationType,\r\n              };\r\n            }\r\n          }\r\n\r\n          return acc;\r\n        }, {});\r\n\r\n      const prepareObjectData = _.merge(\r\n        {},\r\n        prepareData,\r\n        objectdataWithCorrelationTypeYear\r\n      );\r\n      const updatedYearPoints = [];\r\n\r\n      // Для каждого года от 13 лет назад до текущего добавляем данные\r\n      for (\r\n        let i = new Date().getFullYear() - 11 + count;\r\n        i <= new Date().getFullYear() + count;\r\n        i++\r\n      ) {\r\n        const yearDate = new Date();\r\n        yearDate.setFullYear(i);\r\n        const yearKey = `${yearDate.getFullYear()}`;\r\n\r\n        // Если данных нет для этого года, создаем запись с суммой 0\r\n        if (!prepareObjectData[yearKey]) {\r\n          prepareObjectData[yearKey] = {\r\n            valueSum: 0,\r\n            year: yearDate.getFullYear(),\r\n          };\r\n        }\r\n\r\n        updatedYearPoints.push({\r\n          id: prepareObjectData[yearKey]?.id || null, // Если id не найден, присваиваем null\r\n          valueDate: `${yearDate.getFullYear()}-01-01`,\r\n          value: prepareObjectData[yearKey].valueSum, // Сумма за год\r\n          ...(prepareObjectData[yearKey].correlationType\r\n            ? { correlationType: prepareObjectData[yearKey].correlationType }\r\n            : {}),\r\n        });\r\n      }\r\n\r\n      updatedYearPoints.sort(\r\n        (a, b) => new Date(b.valueDate) - new Date(a.valueDate)\r\n      );\r\n      console.log(\"updatedYearPoints\", updatedYearPoints);\r\n      setReceivedPoints(updatedYearPoints);\r\n    }\r\n\r\n    if (typeGraphic === \"13\" || typeGraphic === \"26\" || typeGraphic === \"52\") {\r\n      const today = new Date();\r\n      today.setDate(today.getDate() + count * 7);\r\n      const end = new Date(today);\r\n\r\n      const start = new Date(end);\r\n      start.setDate(end.getDate() - (Number(typeGraphic) + 1) * 7);\r\n\r\n      const selectedDayOfWeek = parseInt(reportDay);\r\n      const result = [];\r\n\r\n      let currentDate = new Date(start);\r\n      let currentSum = 0;\r\n\r\n      // Перемещаем currentDate на первый выбранный день недели\r\n      while (currentDate.getDay() !== selectedDayOfWeek) {\r\n        currentDate.setDate(currentDate.getDate() + 1);\r\n      }\r\n\r\n      // Цикл по неделям\r\n      while (currentDate <= end) {\r\n        const nextDate = new Date(currentDate);\r\n        nextDate.setDate(currentDate.getDate() + 7);\r\n\r\n        // Фильтруем и суммируем значения для текущей недели\r\n        currentSum = statisticDatas\r\n          .filter((item) => {\r\n            const itemDate = new Date(item.valueDate);\r\n            if (\r\n              currentDate <= itemDate &&\r\n              itemDate < nextDate &&\r\n              item.correlationType === null\r\n            ) {\r\n              setArrayPoints((prevState) => [...prevState, item]);\r\n            }\r\n            return (\r\n              currentDate <= itemDate &&\r\n              itemDate < nextDate &&\r\n              item.correlationType === null\r\n            );\r\n          })\r\n          .reduce((sum, item) => sum + item.value, 0);\r\n\r\n        // Создаем новую дату на день позже\r\n        const valueDate = new Date(nextDate.getTime() + 24 * 60 * 60 * 1000);\r\n\r\n        // Проверяем, что valueDate не позже сегодняшней даты\r\n        if (valueDate <= today) {\r\n          setArrayPoints((prevState) =>\r\n            prevState.map((item) => {\r\n              if (item.myID) {\r\n                return { ...item };\r\n              } else {\r\n                return {\r\n                  ...item,\r\n                  myID: valueDate.toISOString().split(\"T\")[0],\r\n                };\r\n              }\r\n            })\r\n          );\r\n\r\n          result.push({\r\n            value: currentSum,\r\n            valueDate: valueDate.toISOString().split(\"T\")[0],\r\n          });\r\n        }\r\n\r\n        currentDate = nextDate; // Переходим к следующей неделе\r\n      }\r\n\r\n      setReceivedPoints(\r\n        result.sort((a, b) => new Date(b.valueDate) - new Date(a.valueDate))\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateStatisticsData();\r\n  }, [count]);\r\n\r\n  // Все для модального окна при смене отчетного дня\r\n  const dayWeek = (day, func) => {\r\n    switch (Number(day)) {\r\n      case 0:\r\n        func(\"Воскресенье\");\r\n        break;\r\n      case 1:\r\n        func(\"Понедельник\");\r\n        break;\r\n      case 2:\r\n        func(\"Вторник\");\r\n        break;\r\n      case 3:\r\n        func(\"Среда\");\r\n        break;\r\n      case 4:\r\n        func(\"Четверг\");\r\n        break;\r\n      case 5:\r\n        func(\"Пятница\");\r\n        break;\r\n      case 6:\r\n        func(\"Суббота\");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const save = () => {\r\n    console.log(`reportDay =${reportDay}`);\r\n    console.log(\r\n      `currentOrganization?.reportDay =${currentOrganization?.reportDay}`\r\n    );\r\n    if (reportDay != currentOrganization?.reportDay) {\r\n      setOpenModalReportDay(true);\r\n      dayWeek(reportDay, setShowReportDay);\r\n      dayWeek(currentOrganization?.reportDay, setShowReportDayComes);\r\n    } else {\r\n      saveUpdateStatistics();\r\n    }\r\n  };\r\n\r\n  const btnYes = async () => {\r\n    try {\r\n      await saveUpdateOrganization(); // Сначала выполняем обновление организации\r\n      localStorage.setItem(\"reportDay\", Number(reportDay));\r\n      setOpenModalReportDay(false);\r\n      // Добавляем задержку в 1 секунду\r\n      await new Promise((resolve) => setTimeout(resolve, 1500));\r\n\r\n      await saveUpdateStatistics(); // Затем обновляем статистику через секунду\r\n    } catch (error) {\r\n      console.error(\"Ошибка при выполнении операций:\", error);\r\n    }\r\n  };\r\n\r\n  const btnNo = () => {\r\n    saveUpdateStatistics();\r\n  };\r\n\r\n  const saveUpdateOrganization = async () => {\r\n    await updateOrganization({\r\n      _id: reduxSelectedOrganizationId,\r\n      reportDay: Number(reportDay),\r\n    })\r\n      .unwrap()\r\n      .then(() => {\r\n        setOpenModalReportDay(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Ошибка:\", JSON.stringify(error, null, 2)); // выводим детализированную ошибку\r\n      });\r\n  };\r\n\r\n  // Для кастомного Select\r\n  const weeksDay = [\r\n    { id: 1, value: \"Понедельник\" },\r\n    { id: 2, value: \"Вторник\" },\r\n    { id: 3, value: \"Среда\" },\r\n    { id: 4, value: \"Четверг\" },\r\n    { id: 5, value: \"Пятница\" },\r\n    { id: 6, value: \"Суббота\" },\r\n    { id: 0, value: \"Воскресенье\" },\r\n  ];\r\n\r\n  const selectType = [\r\n    { id: \"Прямая\", value: \"Прямая\" },\r\n    { id: \"Обратная\", value: \"Обратная\" },\r\n  ];\r\n\r\n  const selectViewGraphic = [\r\n    { id: \"Ежедневный\", value: \"Ежедневный\", view: \"Ежедневный\" },\r\n    { id: \"Ежемесячный\", value: \"Ежемесячный\", view: \"Ежемесячный\" },\r\n    { id: \"Ежегодовой\", value: \"Ежегодовой\", view: \"Ежегодовой\" },\r\n    { id: \"13\", value: \"13\", view: \"13 недель\" },\r\n    { id: \"26\", value: \"26\", view: \"26 недель\" },\r\n    { id: \"52\", value: \"52\", view: \"52 недели\" },\r\n  ];\r\n\r\n  const selectStatistics = (id) => {\r\n    setStatisticId(id);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.dialog}>\r\n      <Headers name={\"статистика\"} funcActiveHint={() => setOpen(true)}>\r\n        <BottomHeaders\r\n          create={functionOpenModalForCreated}\r\n          update={save}\r\n          refCreate={refCreate}\r\n          refUpdate={refUpdate}\r\n        >\r\n          <Select\r\n            refSelect={refDay}\r\n            name={\"Отчетный день\"}\r\n            value={reportDay}\r\n            onChange={setReportDay}\r\n            array={weeksDay}\r\n            arrayItem={\"value\"}\r\n          ></Select>\r\n        </BottomHeaders>\r\n      </Headers>\r\n\r\n      <ConfigProvider locale={ruRU}>\r\n        <Tour open={open} onClose={() => setOpen(false)} steps={steps} />\r\n      </ConfigProvider>\r\n\r\n      <div className={classes.main}>\r\n        {isErrorGetStatistics && isErrorGetPosts ? (\r\n          <>\r\n            <HandlerQeury\r\n              Error={isErrorGetStatistics || isErrorGetPosts}\r\n            ></HandlerQeury>\r\n          </>\r\n        ) : (\r\n          <>\r\n            {isErrorGetStatisticId ? (\r\n              <HandlerQeury Error={isErrorGetStatisticId}></HandlerQeury>\r\n            ) : (\r\n              <>\r\n                <HandlerQeury\r\n                  Loading={isLoadingGetStatistics}\r\n                  Fetching={isFetchingGetStatistics}\r\n                ></HandlerQeury>\r\n\r\n                <HandlerQeury Loading={isLoadingGetPosts}></HandlerQeury>\r\n\r\n                {isFetchingGetStatisticId || isLoadingGetStatisticId ? (\r\n                  <HandlerQeury\r\n                    Loading={isLoadingGetStatisticId}\r\n                    Fetching={isFetchingGetStatisticId}\r\n                  ></HandlerQeury>\r\n                ) : (\r\n                  <>\r\n                    {currentStatistic.id ? (\r\n                      <>\r\n                        <div className={classes.block1}>\r\n                          <Graphic\r\n                            colorFirstPoint={colorFirstPoint}\r\n                            data={[...receivedPoints, ...createPoints]}\r\n                            name={name}\r\n                            setName={setName}\r\n                            typeGraphic={typeGraphic}\r\n                            type={type}\r\n                          ></Graphic>\r\n\r\n                          <div className={classes.blockArrrow}>\r\n                            <div\r\n                              ref={refArrowLeft}\r\n                              className={classes.statisticsArrow}\r\n                            >\r\n                              <img\r\n                                src={statisticsArrowLeft}\r\n                                alt=\"statisticsArrowLeftWhite\"\r\n                                onClick={handleArrowLeftClick}\r\n                              />\r\n                            </div>\r\n                            <div\r\n                              ref={refArrowRight}\r\n                              className={classes.statisticsArrow}\r\n                            >\r\n                              <img\r\n                                src={statisticsArrowRight}\r\n                                alt=\"statisticsArrowRightWhite\"\r\n                                onClick={handleArrowRightClick}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className={classes.block2}>\r\n                          <div\r\n                            ref={refAddPoint}\r\n                            className={classes.addPoint}\r\n                            onClick={addPoint}\r\n                          >\r\n                            <img src={addBlock} alt=\"addBlock\" />\r\n                          </div>\r\n\r\n                          {statisticId !== \"\" ? (\r\n                            <div className={classes.points}>\r\n                              {createPoints\r\n                                ?.sort(\r\n                                  (a, b) =>\r\n                                    Date.parse(b.valueDate) -\r\n                                    Date.parse(a.valueDate)\r\n                                )\r\n                                ?.map((item, index) => {\r\n                                  if (item.valueDate === \"\") {\r\n                                    item.valueDate = new Date()\r\n                                      .toISOString()\r\n                                      .split(\"T\")[0];\r\n                                  }\r\n                                  return (\r\n                                    <div key={index} className={classes.item}>\r\n                                      <input\r\n                                        type=\"date\"\r\n                                        value={item.valueDate}\r\n                                        onChange={(e) => {\r\n                                          onChangePoints(\r\n                                            \"\",\r\n                                            e.target.value,\r\n                                            \"valueDate\",\r\n                                            null,\r\n                                            item.id\r\n                                          );\r\n                                        }}\r\n                                        className={classes.date}\r\n                                      />\r\n                                      <input\r\n                                        type=\"text\"\r\n                                        value={item.value}\r\n                                        inputMode=\"numeric\"\r\n                                        placeholder=\"—\"\r\n                                        onChange={(e) => {\r\n                                          const newValue =\r\n                                            e.target.value.replace(\r\n                                              /[^0-9]/g,\r\n                                              \"\"\r\n                                            );\r\n                                          onChangePoints(\r\n                                            \"\",\r\n                                            newValue,\r\n                                            \"value\",\r\n                                            null,\r\n                                            item.id\r\n                                          );\r\n                                        }}\r\n                                        className={classes.number}\r\n                                      />\r\n                                    </div>\r\n                                  );\r\n                                })}\r\n\r\n                              {receivedPoints?.map((item, index) => {\r\n                                if (typeGraphic === \"Ежедневный\") {\r\n                                  return (\r\n                                    <div key={index} className={classes.item}>\r\n                                      <input\r\n                                        type=\"date\"\r\n                                        value={item.valueDate}\r\n                                        onChange={(e) => {\r\n                                          onChangePoints(\r\n                                            \"received\",\r\n                                            e.target.value,\r\n                                            \"valueDate\",\r\n                                            index,\r\n                                            null\r\n                                          );\r\n                                        }}\r\n                                        className={`${classes.date}`}\r\n                                        disabled={disabledPoints}\r\n                                      />\r\n\r\n                                      <input\r\n                                        type=\"text\"\r\n                                        value={item.value}\r\n                                        onChange={(e) => {\r\n                                          const newValue =\r\n                                            e.target.value.replace(\r\n                                              /[^0-9]/g,\r\n                                              \"\"\r\n                                            );\r\n                                          onChangePoints(\r\n                                            \"received\",\r\n                                            newValue,\r\n                                            \"value\",\r\n                                            index,\r\n                                            null\r\n                                          );\r\n                                        }}\r\n                                        className={classes.number}\r\n                                        disabled={disabledPoints}\r\n                                      />\r\n                                    </div>\r\n                                  );\r\n                                } else {\r\n                                  return (\r\n                                    <div\r\n                                      key={index}\r\n                                      className={`${classes.item}  ${\r\n                                        classes.itemHover\r\n                                      }  ${\r\n                                        activeIndex === index\r\n                                          ? classes.active\r\n                                          : \"\"\r\n                                      }`}\r\n                                      onClick={() => {\r\n                                        setActiveIndex(index);\r\n                                        showCurrentPoint(item.valueDate);\r\n                                      }}\r\n                                    >\r\n                                      <span\r\n                                        disabled={disabledPoints}\r\n                                        className={`${classes.date} ${classes.textGrey}`}\r\n                                      >\r\n                                        {getDateFormatSatatistic(\r\n                                          item.valueDate,\r\n                                          typeGraphic\r\n                                        )}\r\n                                      </span>\r\n\r\n                                      <span\r\n                                        className={`${classes.number} ${classes.textGrey}`}\r\n                                        disabled={disabledPoints}\r\n                                      >\r\n                                        {item.value}\r\n                                      </span>\r\n                                    </div>\r\n                                  );\r\n                                }\r\n                              })}\r\n                            </div>\r\n                          ) : (\r\n                            <></>\r\n                          )}\r\n\r\n                          <div\r\n                            ref={refDeletePoint}\r\n                            className={classes.deletePoint}\r\n                            onClick={deletePoint}\r\n                          >\r\n                            <img src={trash} alt=\"trash\" />\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className={classes.block3}>\r\n                          <div className={classes.row1}>\r\n                            <Input\r\n                              refInput={refName}\r\n                              name={\"Статистика\"}\r\n                              value={name}\r\n                              onChange={setName}\r\n                            >\r\n                              <Lupa\r\n                                refLupa={refLupa}\r\n                                setIsOpenSearch={setIsOpenSearch}\r\n                                isOpenSearch={isOpenSearch}\r\n                                select={selectStatistics}\r\n                                array={statistics}\r\n                                arrayItem={\"name\"}\r\n                                positionBottomStyle={\"0\"}\r\n                              ></Lupa>\r\n                            </Input>\r\n\r\n                            <Select\r\n                              refSelect={refType}\r\n                              name={\"Тип\"}\r\n                              value={type}\r\n                              onChange={setType}\r\n                              array={selectType}\r\n                              arrayItem={\"value\"}\r\n                            ></Select>\r\n\r\n                            <Select\r\n                              refSelect={refPost}\r\n                              name={\"Пост\"}\r\n                              value={postId}\r\n                              onChange={setPostId}\r\n                              array={allPosts}\r\n                              arrayItem={\"postName\"}\r\n                            ></Select>\r\n\r\n                            <Select\r\n                              refSelect={refTypeGraphic}\r\n                              name={\"График\"}\r\n                              value={typeGraphic}\r\n                              onChange={setTypeGraphic}\r\n                              array={selectViewGraphic}\r\n                              arrayItem={\"view\"}\r\n                            ></Select>\r\n                          </div>\r\n\r\n                          <div className={classes.row2}>\r\n                            <textarea\r\n                              ref={refDescription}\r\n                              placeholder=\"Описание статистики: что и как считать\"\r\n                              value={description}\r\n                              onChange={(e) => setDescription(e.target.value)}\r\n                              className={classes.textMontserrat}\r\n                            ></textarea>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <HandlerMutation\r\n                          Loading={isLoadingPostStatisticMutation}\r\n                          Error={\r\n                            isErrorPostStatisticMutation &&\r\n                            localIsResponsePostStatisticsMutation\r\n                          } // Учитываем ручной сброс\r\n                          Success={\r\n                            isSuccessPostStatisticMutation &&\r\n                            localIsResponsePostStatisticsMutation\r\n                          } // Учитываем ручной сброс\r\n                          textSuccess={\"Статистика создана\"}\r\n                          textError={\r\n                            ErrorPostStatisticMutation?.data?.errors?.[0]\r\n                              ?.errors?.[0]\r\n                              ? ErrorPostStatisticMutation.data.errors[0]\r\n                                  .errors[0]\r\n                              : ErrorPostStatisticMutation?.data?.message\r\n                          }\r\n                        ></HandlerMutation>\r\n\r\n                        <HandlerMutation\r\n                          Loading={isLoadingUpdateStatisticMutation}\r\n                          Error={\r\n                            isErrorUpdateStatisticMutation &&\r\n                            localIsResponseUpdateStatisticsMutation\r\n                          } // Учитываем ручной сброс\r\n                          Success={\r\n                            isSuccessUpdateStatisticMutation &&\r\n                            localIsResponseUpdateStatisticsMutation\r\n                          } // Учитываем ручной сброс\r\n                          textSuccess={\"Статистика обновлена\"}\r\n                          textError={\r\n                            ErrorUpdateStatisticMutation?.data?.errors?.[0]\r\n                              ?.errors?.[0]\r\n                              ? ErrorUpdateStatisticMutation.data.errors[0]\r\n                                  .errors[0]\r\n                              : ErrorUpdateStatisticMutation?.data?.message\r\n                          }\r\n                        ></HandlerMutation>\r\n\r\n                        {openModal && (\r\n                          <>\r\n                            <div className={classes.modal}>\r\n                              <table className={classes.modalTable}>\r\n                                <div className={classes.tableHeader}>\r\n                                  {typeGraphic === \"Ежемесячный\" ||\r\n                                  typeGraphic === \"Ежегодовой\" ? (\r\n                                    <div className={classes.tableHeading}>\r\n                                      <span>Значение за месяц</span>\r\n                                      <div className={classes.tableHintWrapper}>\r\n                                        <img\r\n                                          src={hint}\r\n                                          alt=\"hint\"\r\n                                          className={classes.tableHint}\r\n                                        />\r\n                                      </div>\r\n                                    </div>\r\n                                  ) : (\r\n                                    <div className=\"\"></div>\r\n                                  )}\r\n\r\n                                  <div className={classes.iconSaveModal}>\r\n                                    <img\r\n                                      src={Blacksavetmp}\r\n                                      alt=\"Blacksavetmp\"\r\n                                      className={classes.image}\r\n                                      onClick={() => {\r\n                                        saveModalPoints(showPoints);\r\n                                      }}\r\n                                    />\r\n                                  </div>\r\n                                </div>\r\n\r\n                                <img\r\n                                  src={exit}\r\n                                  alt=\"exit\"\r\n                                  onClick={exitModal}\r\n                                  className={classes.exitImage}\r\n                                />\r\n\r\n                                <thead>\r\n                                  <tr>\r\n                                    <th>Дата</th>\r\n                                    <th>Значение</th>\r\n                                  </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                  <tr>\r\n                                    <td>\r\n                                      {showPoints?.map((item) => (\r\n                                        <div\r\n                                          key={item.id}\r\n                                          className={classes.row}\r\n                                        >\r\n                                          <span\r\n                                            className={`${classes.date} ${classes.textGrey}`}\r\n                                          >\r\n                                            {getDateFormatSatatistic(\r\n                                              item.valueDate,\r\n                                              typeGraphic\r\n                                            )}\r\n                                          </span>\r\n                                        </div>\r\n                                      ))}\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                      {showPoints?.map((item, index) => (\r\n                                        <div\r\n                                          key={item.id}\r\n                                          className={classes.row}\r\n                                        >\r\n                                          <input\r\n                                            type=\"text\"\r\n                                            inputMode=\"numeric\"\r\n                                            placeholder=\"—\"\r\n                                            value={\r\n                                              item.value === null ||\r\n                                              item.value === \"\"\r\n                                                ? \"\"\r\n                                                : item.value\r\n                                            }\r\n                                            onChange={(e) => {\r\n                                              const newValue =\r\n                                                e.target.value.replace(\r\n                                                  /[^0-9]/g,\r\n                                                  \"\"\r\n                                                );\r\n                                              updateModalPoint(\r\n                                                newValue === \"\"\r\n                                                  ? null\r\n                                                  : newValue,\r\n                                                index\r\n                                              );\r\n                                            }}\r\n                                          />\r\n                                        </div>\r\n                                      ))}\r\n                                    </td>\r\n                                  </tr>\r\n                                </tbody>\r\n                              </table>\r\n                            </div>\r\n                          </>\r\n                        )}\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <WaveLetters\r\n                          letters={\"Выберите статистику\"}\r\n                        ></WaveLetters>\r\n                        <div className={classes.block1}></div>\r\n                        <div className={classes.block2}></div>\r\n                        <div className={classes.block3}>\r\n                          <div className={classes.row1}>\r\n                            <Input\r\n                              refInput={refName}\r\n                              name={\"Статистика\"}\r\n                              value={name}\r\n                              onChange={setName}\r\n                            >\r\n                              <Lupa\r\n                                refLupa={refLupa}\r\n                                setIsOpenSearch={setIsOpenSearch}\r\n                                isOpenSearch={isOpenSearch}\r\n                                select={selectStatistics}\r\n                                array={statistics}\r\n                                arrayItem={\"name\"}\r\n                                positionBottomStyle={\"0\"}\r\n                              ></Lupa>\r\n                            </Input>\r\n                          </div>\r\n                          <div className={classes.row2}>\r\n                            <textarea\r\n                              disabled\r\n                              placeholder=\"Описание статистики: что и как считать\"\r\n                            ></textarea>\r\n                          </div>\r\n                        </div>\r\n                      </>\r\n                    )}\r\n\r\n                    {openModalReportDay && (\r\n                      <>\r\n                        <div className={classes.modalDelete}>\r\n                          <div className={classes.modalDeleteElement}>\r\n                            <img\r\n                              src={exit}\r\n                              alt=\"exit\"\r\n                              className={classes.exitImage}\r\n                              onClick={() => setOpenModalReportDay(false)}\r\n                            />\r\n                            <div className={classes.modalRow1}>\r\n                              <span className={classes.text}>\r\n                                Вы поменяли отчетный день с <span> </span>\r\n                                <span style={{ fontWeight: \"700\" }}>\r\n                                  {showReportDayComes}\r\n                                </span>\r\n                                <span> на </span>\r\n                                <span style={{ fontWeight: \"700\" }}>\r\n                                  {showReportDay}\r\n                                </span>\r\n                                . Если подтвердите действие, то отчетный день\r\n                                поменяется у всей организации.\r\n                              </span>\r\n                            </div>\r\n\r\n                            <div className={classes.modalRow2}>\r\n                              <button\r\n                                className={`${classes.btnYes} ${classes.textBtnYes}`}\r\n                                onClick={btnYes}\r\n                              >\r\n                                Да\r\n                              </button>\r\n                              <button\r\n                                className={`${classes.btnNo} ${classes.textBtnNo}`}\r\n                                onClick={btnNo}\r\n                              >\r\n                                Нет\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </>\r\n                    )}\r\n\r\n                    <HandlerMutation\r\n                      Loading={isLoadingUpdateOrganizationMutation}\r\n                      Error={\r\n                        isErrorUpdateOrganizationMutation &&\r\n                        localIsResponseUpdateOrganizationMutation\r\n                      }\r\n                      Success={\r\n                        isSuccessUpdateOrganizationMutation &&\r\n                        localIsResponseUpdateOrganizationMutation\r\n                      }\r\n                      textSuccess={`Обновился отчетный день у организации на ${showReportDay}`}\r\n                      textError={\r\n                        ErrorOrganization?.data?.errors?.[0]?.errors?.[0]\r\n                          ? ErrorOrganization.data.errors[0].errors[0]\r\n                          : ErrorOrganization?.data?.message\r\n                      }\r\n                    ></HandlerMutation>\r\n\r\n                    {openModalForCreated && (\r\n                      <ModalSelectRadio\r\n                        nameTable={\"Название поста\"}\r\n                        handleSearchValue={inputSearchModal}\r\n                        handleSearchOnChange={handleInputChangeModalSearch}\r\n                        handleRadioChange={handleRadioChange}\r\n                        exit={() => {\r\n                          setOpenModalForCreated(false);\r\n                        }}\r\n                        filterArray={filterArraySearchModal}\r\n                        array={allPosts}\r\n                        arrayItem={\"postName\"}\r\n                        selectedItemID={selectedPostIdForCreated}\r\n                        save={createStatistics}\r\n                      ></ModalSelectRadio>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["ButtonAction","_ref","create","update","refUpdate","refCreate","_jsxs","className","classes","wrapper","children","_jsx","ButtonImage","refAction","name","icon","iconAdd","onClick","Blacksavetmp","BottomHeaders","editText","Lupa","setIsOpenSearch","isOpenSearch","select","projects","archivesProjects","projectsWithProgram","archivesProjectsWithProgram","programs","archivesPrograms","array","arrayItem","positionBottomStyle","refLupa","selectRef","useRef","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","ref","src","subbarSearch","alt","ul","style","bottom","length","value","disabled","activeText","map","item","id","li","projectName","completedText","WaveLetters","letters","arrayLetters","split","wave","index","ModalSelectRadio","nameTable","handleSearchValue","handleSearchOnChange","exit","filterArray","selectedItemID","handleRadioChange","save","modal","modalWindow","exitModal","header","item1","type","placeholder","onChange","search","item2","table","row","checked","colorFirstPoint","data","setName","typeGraphic","svgRef","nameStatistics","setNameStatistics","useState","width","setWidth","height","setHeight","updateDimensions","newWidth","newHeight","window","innerWidth","sort","a","b","Date","valueDate","margin","upperLimit","d3","d","x","domain","getDateFormatSatatistic","range","padding","y","nice","line","defined","selectAll","remove","svg","attr","tickValues","yTickValues","ticks","enter","append","xAxis","concat","call","tickFormat","forEach","i","prevValue","color","datum","getColor","undefined","on","currentTarget","tooltipX","tooltipY","dateText","valueText","textWidth","Math","max","tooltipWidth","isTopOutOfBound","adjustedX","adjustedY","pointColor","indexOf","tooltipGroup","text","block","e","row1","row2","Statistic","_createPoints$sort","_ErrorPostStatisticMu","_ErrorPostStatisticMu2","_ErrorPostStatisticMu3","_ErrorPostStatisticMu4","_ErrorPostStatisticMu5","_ErrorUpdateStatistic","_ErrorUpdateStatistic2","_ErrorUpdateStatistic3","_ErrorUpdateStatistic4","_ErrorUpdateStatistic5","_ErrorOrganization$da","_ErrorOrganization$da2","_ErrorOrganization$da3","_ErrorOrganization$da4","_ErrorOrganization$da5","setColorFirstPoint","reduxSelectedOrganizationId","reduxSelectedOrganizationReportDay","currentOrganization","isLoadingOrganizationId","isFetchingOrganizationId","updateOrganization","isLoadingUpdateOrganizationMutation","isSuccessUpdateOrganizationMutation","isErrorUpdateOrganizationMutation","ErrorOrganization","localIsResponseUpdateOrganizationMutation","useOrganizationHook","openModalForCreated","setOpenModalForCreated","statisticId","setStatisticId","setType","postId","setPostId","description","setDescription","receivedPoints","setReceivedPoints","oldReceivedPoints","setOldReceivedPoints","createPoints","setCreatePoints","reportDay","setReportDay","setTypeGraphic","disabledPoints","setDisabledPoints","arrayPoints","setArrayPoints","showPoints","setShowPoints","openModal","setOpenModal","activeIndex","setActiveIndex","count","setCount","openModalReportDay","setOpenModalReportDay","showReportDay","setShowReportDay","showReportDayComes","setShowReportDayComes","showCorrelationPoint","setShowCorrelationPoint","refDay","refName","refArrowLeft","refArrowRight","refType","refPost","refTypeGraphic","refDescription","refAddPoint","refDeletePoint","open","setOpen","steps","title","filter","step","statistics","isLoadingGetStatistics","isFetchingGetStatistics","isErrorGetStatistics","currentStatistic","statisticDatas","isLoadingGetStatisticId","isErrorGetStatisticId","isFetchingGetStatisticId","updateStatistics","isLoadingUpdateStatisticMutation","isSuccessUpdateStatisticMutation","isErrorUpdateStatisticMutation","ErrorUpdateStatisticMutation","localIsResponseUpdateStatisticsMutation","postStatistics","isLoadingPostStatisticMutation","isSuccessPostStatisticMutation","isErrorPostStatisticMutation","ErrorPostStatisticMutation","localIsResponsePostStatisticsMutation","useStatisticsHook","statisticData","allPosts","isLoadingGetPosts","isErrorGetPosts","usePostsHook","selectedID","selectedPostIdForCreated","handleInputChangeModalSearch","filterArraySearchModal","inputSearchModal","useModalSelectRadio","onChangePoints","nameArrray","updatedPoints","Number","prevState","_objectSpread","parse","saveUpdateStatistics","async","_currentStatistic$pos","Data","Object","keys","post","formatDate","statisticDataCreateDtos","oldArray","newArray","changes","newItem","oldItem","find","itemChanges","key","push","_id","compareArrays","statisticDataUpdateDtos","unwrap","then","catch","error","console","JSON","stringify","_currentStatistic$pos2","countMonthsForGraphicYear","monthlyData","reduce","acc","itemDate","monthKey","getFullYear","getMonth","_acc$monthKey","isNaN","correlationType","setFullYear","valueSum","year","month","date","getDate","_statisticDatas$filte","dayNow","currentWeekday","getDay","startDate","dayDifference","setDate","endDate","allDates","toISOString","filteredData","getTime","isValidStartDate","isValidEndDate","itemDateStr","startDateStr","endDateStr","_item$valueDate","_updatedPoints","_createdPoints","existingPoint","functionForColorFirstPoint","arrayPointsCorrelationTypeisMonth","_acc$monthKey2","setMonth","updatedMonthlyPoints","_monthlyData$monthKey","monthDate","lastDayOfMonth","monthValue","arrayPointsCorrelationTypeisYear","dataMonth","dataWithCorrelationTypeYear","prepareData","_acc$yearKey","yearKey","elementWithSameYear","el","objectdataWithCorrelationTypeYear","prepareObjectData","_","updatedYearPoints","_prepareObjectData$ye","yearDate","today","end","start","selectedDayOfWeek","parseInt","Error","result","currentDate","nextDate","currentSum","isValid","sum","myID","element","oneMonth","minDate","maxDate","_acc$monthKey3","firstMonthData","values","log","_acc$yearKey2","firstYearData","updateStatisticsData","maxStartDate","setTime","last7Days","dataMap","crPoints","updatedPoints1","_acc$monthKey4","_monthlyData$monthKey2","_acc$yearKey3","_prepareObjectData$ye2","dayWeek","day","func","saveUpdateOrganization","selectStatistics","dialog","Headers","funcActiveHint","functionOpenModalForCreated","Select","refSelect","ConfigProvider","locale","ruRU","Tour","onClose","main","_Fragment","HandlerQeury","Loading","Fetching","block1","Graphic","blockArrrow","statisticsArrow","statisticsArrowLeft","handleArrowLeftClick","prevCount","statisticsArrowRight","handleArrowRightClick","block2","addPoint","addBlock","points","inputMode","newValue","replace","number","itemHover","active","elementcorrelationType","toDateString","arrayNew","foundItem","showCurrentPoint","textGrey","deletePoint","slice","trash","block3","Input","refInput","view","textMontserrat","HandlerMutation","Success","textSuccess","textError","errors","message","modalTable","tableHeader","tableHeading","tableHintWrapper","hint","tableHint","iconSaveModal","image","arrayReceived","endArray","received","saveModalPoints","exitImage","updateModalPoint","modalDelete","modalDeleteElement","modalRow1","fontWeight","modalRow2","btnYes","textBtnYes","localStorage","setItem","Promise","resolve","setTimeout","btnNo","textBtnNo"],"sourceRoot":""}